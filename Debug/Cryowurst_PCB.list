
Cryowurst_PCB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008afc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008c88  08008c88  00018c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ce8  08008ce8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ce8  08008ce8  00018ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cf0  08008cf0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cf0  08008cf0  00018cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cf4  08008cf4  00018cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  2000000c  08008d04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08008d04  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec2e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f3  00000000  00000000  0003ec6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  00041e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001778  00000000  00000000  00043710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c54  00000000  00000000  00044e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bbf0  00000000  00000000  0006aadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef95d  00000000  00000000  000866cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176029  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a34  00000000  00000000  0017607c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08008c70 	.word	0x08008c70

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08008c70 	.word	0x08008c70

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b96e 	b.w	80004d0 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	468c      	mov	ip, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	f040 8083 	bne.w	8000322 <__udivmoddi4+0x116>
 800021c:	428a      	cmp	r2, r1
 800021e:	4617      	mov	r7, r2
 8000220:	d947      	bls.n	80002b2 <__udivmoddi4+0xa6>
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	b142      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000228:	f1c2 0020 	rsb	r0, r2, #32
 800022c:	fa24 f000 	lsr.w	r0, r4, r0
 8000230:	4091      	lsls	r1, r2
 8000232:	4097      	lsls	r7, r2
 8000234:	ea40 0c01 	orr.w	ip, r0, r1
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbbc f6f8 	udiv	r6, ip, r8
 8000244:	fa1f fe87 	uxth.w	lr, r7
 8000248:	fb08 c116 	mls	r1, r8, r6, ip
 800024c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000250:	fb06 f10e 	mul.w	r1, r6, lr
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 8119 	bcs.w	8000494 <__udivmoddi4+0x288>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8116 	bls.w	8000494 <__udivmoddi4+0x288>
 8000268:	3e02      	subs	r6, #2
 800026a:	443b      	add	r3, r7
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000280:	45a6      	cmp	lr, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	193c      	adds	r4, r7, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8105 	bcs.w	8000498 <__udivmoddi4+0x28c>
 800028e:	45a6      	cmp	lr, r4
 8000290:	f240 8102 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029c:	eba4 040e 	sub.w	r4, r4, lr
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	b902      	cbnz	r2, 80002b6 <__udivmoddi4+0xaa>
 80002b4:	deff      	udf	#255	; 0xff
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d150      	bne.n	8000360 <__udivmoddi4+0x154>
 80002be:	1bcb      	subs	r3, r1, r7
 80002c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c4:	fa1f f887 	uxth.w	r8, r7
 80002c8:	2601      	movs	r6, #1
 80002ca:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ce:	0c21      	lsrs	r1, r4, #16
 80002d0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d8:	fb08 f30c 	mul.w	r3, r8, ip
 80002dc:	428b      	cmp	r3, r1
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0xe4>
 80002e0:	1879      	adds	r1, r7, r1
 80002e2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0xe2>
 80002e8:	428b      	cmp	r3, r1
 80002ea:	f200 80e9 	bhi.w	80004c0 <__udivmoddi4+0x2b4>
 80002ee:	4684      	mov	ip, r0
 80002f0:	1ac9      	subs	r1, r1, r3
 80002f2:	b2a3      	uxth	r3, r4
 80002f4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002fc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000300:	fb08 f800 	mul.w	r8, r8, r0
 8000304:	45a0      	cmp	r8, r4
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0x10c>
 8000308:	193c      	adds	r4, r7, r4
 800030a:	f100 33ff 	add.w	r3, r0, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x10a>
 8000310:	45a0      	cmp	r8, r4
 8000312:	f200 80d9 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 8000316:	4618      	mov	r0, r3
 8000318:	eba4 0408 	sub.w	r4, r4, r8
 800031c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000320:	e7bf      	b.n	80002a2 <__udivmoddi4+0x96>
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0x12e>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80b1 	beq.w	800048e <__udivmoddi4+0x282>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x1cc>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0x140>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80b8 	bhi.w	80004bc <__udivmoddi4+0x2b0>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0103 	sbc.w	r1, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	468c      	mov	ip, r1
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0a8      	beq.n	80002ac <__udivmoddi4+0xa0>
 800035a:	e9c5 4c00 	strd	r4, ip, [r5]
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0xa0>
 8000360:	f1c2 0320 	rsb	r3, r2, #32
 8000364:	fa20 f603 	lsr.w	r6, r0, r3
 8000368:	4097      	lsls	r7, r2
 800036a:	fa01 f002 	lsl.w	r0, r1, r2
 800036e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000372:	40d9      	lsrs	r1, r3
 8000374:	4330      	orrs	r0, r6
 8000376:	0c03      	lsrs	r3, r0, #16
 8000378:	fbb1 f6fe 	udiv	r6, r1, lr
 800037c:	fa1f f887 	uxth.w	r8, r7
 8000380:	fb0e 1116 	mls	r1, lr, r6, r1
 8000384:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000388:	fb06 f108 	mul.w	r1, r6, r8
 800038c:	4299      	cmp	r1, r3
 800038e:	fa04 f402 	lsl.w	r4, r4, r2
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x19c>
 8000394:	18fb      	adds	r3, r7, r3
 8000396:	f106 3cff 	add.w	ip, r6, #4294967295
 800039a:	f080 808d 	bcs.w	80004b8 <__udivmoddi4+0x2ac>
 800039e:	4299      	cmp	r1, r3
 80003a0:	f240 808a 	bls.w	80004b8 <__udivmoddi4+0x2ac>
 80003a4:	3e02      	subs	r6, #2
 80003a6:	443b      	add	r3, r7
 80003a8:	1a5b      	subs	r3, r3, r1
 80003aa:	b281      	uxth	r1, r0
 80003ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b8:	fb00 f308 	mul.w	r3, r0, r8
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x1c4>
 80003c0:	1879      	adds	r1, r7, r1
 80003c2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c6:	d273      	bcs.n	80004b0 <__udivmoddi4+0x2a4>
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d971      	bls.n	80004b0 <__udivmoddi4+0x2a4>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4439      	add	r1, r7
 80003d0:	1acb      	subs	r3, r1, r3
 80003d2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d6:	e778      	b.n	80002ca <__udivmoddi4+0xbe>
 80003d8:	f1c6 0c20 	rsb	ip, r6, #32
 80003dc:	fa03 f406 	lsl.w	r4, r3, r6
 80003e0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e4:	431c      	orrs	r4, r3
 80003e6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003f2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f6:	431f      	orrs	r7, r3
 80003f8:	0c3b      	lsrs	r3, r7, #16
 80003fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fe:	fa1f f884 	uxth.w	r8, r4
 8000402:	fb0e 1119 	mls	r1, lr, r9, r1
 8000406:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800040a:	fb09 fa08 	mul.w	sl, r9, r8
 800040e:	458a      	cmp	sl, r1
 8000410:	fa02 f206 	lsl.w	r2, r2, r6
 8000414:	fa00 f306 	lsl.w	r3, r0, r6
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x220>
 800041a:	1861      	adds	r1, r4, r1
 800041c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000420:	d248      	bcs.n	80004b4 <__udivmoddi4+0x2a8>
 8000422:	458a      	cmp	sl, r1
 8000424:	d946      	bls.n	80004b4 <__udivmoddi4+0x2a8>
 8000426:	f1a9 0902 	sub.w	r9, r9, #2
 800042a:	4421      	add	r1, r4
 800042c:	eba1 010a 	sub.w	r1, r1, sl
 8000430:	b2bf      	uxth	r7, r7
 8000432:	fbb1 f0fe 	udiv	r0, r1, lr
 8000436:	fb0e 1110 	mls	r1, lr, r0, r1
 800043a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043e:	fb00 f808 	mul.w	r8, r0, r8
 8000442:	45b8      	cmp	r8, r7
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x24a>
 8000446:	19e7      	adds	r7, r4, r7
 8000448:	f100 31ff 	add.w	r1, r0, #4294967295
 800044c:	d22e      	bcs.n	80004ac <__udivmoddi4+0x2a0>
 800044e:	45b8      	cmp	r8, r7
 8000450:	d92c      	bls.n	80004ac <__udivmoddi4+0x2a0>
 8000452:	3802      	subs	r0, #2
 8000454:	4427      	add	r7, r4
 8000456:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800045a:	eba7 0708 	sub.w	r7, r7, r8
 800045e:	fba0 8902 	umull	r8, r9, r0, r2
 8000462:	454f      	cmp	r7, r9
 8000464:	46c6      	mov	lr, r8
 8000466:	4649      	mov	r1, r9
 8000468:	d31a      	bcc.n	80004a0 <__udivmoddi4+0x294>
 800046a:	d017      	beq.n	800049c <__udivmoddi4+0x290>
 800046c:	b15d      	cbz	r5, 8000486 <__udivmoddi4+0x27a>
 800046e:	ebb3 020e 	subs.w	r2, r3, lr
 8000472:	eb67 0701 	sbc.w	r7, r7, r1
 8000476:	fa07 fc0c 	lsl.w	ip, r7, ip
 800047a:	40f2      	lsrs	r2, r6
 800047c:	ea4c 0202 	orr.w	r2, ip, r2
 8000480:	40f7      	lsrs	r7, r6
 8000482:	e9c5 2700 	strd	r2, r7, [r5]
 8000486:	2600      	movs	r6, #0
 8000488:	4631      	mov	r1, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e70b      	b.n	80002ac <__udivmoddi4+0xa0>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e9      	b.n	800026c <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fd      	b.n	8000298 <__udivmoddi4+0x8c>
 800049c:	4543      	cmp	r3, r8
 800049e:	d2e5      	bcs.n	800046c <__udivmoddi4+0x260>
 80004a0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a4:	eb69 0104 	sbc.w	r1, r9, r4
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7df      	b.n	800046c <__udivmoddi4+0x260>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e7d2      	b.n	8000456 <__udivmoddi4+0x24a>
 80004b0:	4660      	mov	r0, ip
 80004b2:	e78d      	b.n	80003d0 <__udivmoddi4+0x1c4>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e7b9      	b.n	800042c <__udivmoddi4+0x220>
 80004b8:	4666      	mov	r6, ip
 80004ba:	e775      	b.n	80003a8 <__udivmoddi4+0x19c>
 80004bc:	4630      	mov	r0, r6
 80004be:	e74a      	b.n	8000356 <__udivmoddi4+0x14a>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	4439      	add	r1, r7
 80004c6:	e713      	b.n	80002f0 <__udivmoddi4+0xe4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	443c      	add	r4, r7
 80004cc:	e724      	b.n	8000318 <__udivmoddi4+0x10c>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <NAU7802_begin>:
//Sets up the NAU7802 for basic function
//If initialize is true (or not specified), default init and calibration is performed
//If initialize is false, then it's up to the caller to initalize and calibrate
//Returns true upon completion
bool NAU7802_begin(I2C_HandleTypeDef * wirePort, bool initialize)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]
  //Get user's options
  _NAU7802_i2cPort = wirePort;
 80004e0:	4a3e      	ldr	r2, [pc, #248]	; (80005dc <NAU7802_begin+0x108>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6013      	str	r3, [r2, #0]

  //Check if the device ack's over I2C
  if (NAU7802_isConnected() == false)
 80004e6:	f000 f87b 	bl	80005e0 <NAU7802_isConnected>
 80004ea:	4603      	mov	r3, r0
 80004ec:	f083 0301 	eor.w	r3, r3, #1
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d009      	beq.n	800050a <NAU7802_begin+0x36>
  {
    //There are rare times when the sensor is occupied and doesn't ack. A 2nd try resolves this.
    if (NAU7802_isConnected() == false)
 80004f6:	f000 f873 	bl	80005e0 <NAU7802_isConnected>
 80004fa:	4603      	mov	r3, r0
 80004fc:	f083 0301 	eor.w	r3, r3, #1
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <NAU7802_begin+0x36>
      return (false);
 8000506:	2300      	movs	r3, #0
 8000508:	e064      	b.n	80005d4 <NAU7802_begin+0x100>
  }

  bool result = true; //Accumulate a result as we do the setup
 800050a:	2301      	movs	r3, #1
 800050c:	73fb      	strb	r3, [r7, #15]

  if (initialize)
 800050e:	78fb      	ldrb	r3, [r7, #3]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d05e      	beq.n	80005d2 <NAU7802_begin+0xfe>
  {
    result &= NAU7802_reset(); //Reset all registers
 8000514:	f000 f93c 	bl	8000790 <NAU7802_reset>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	4013      	ands	r3, r2
 8000520:	2b00      	cmp	r3, #0
 8000522:	bf14      	ite	ne
 8000524:	2301      	movne	r3, #1
 8000526:	2300      	moveq	r3, #0
 8000528:	73fb      	strb	r3, [r7, #15]

    result &= NAU7802_powerUp(); //Power on analog and digital sections of the scale
 800052a:	f000 f90d 	bl	8000748 <NAU7802_powerUp>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	4013      	ands	r3, r2
 8000536:	2b00      	cmp	r3, #0
 8000538:	bf14      	ite	ne
 800053a:	2301      	movne	r3, #1
 800053c:	2300      	moveq	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]

    result &= NAU7802_setLDO(NAU7802_LDO_3V0); //Set LDO to 3.0V - John recommended this in case the battery voltage sags
 8000540:	2005      	movs	r0, #5
 8000542:	f000 f935 	bl	80007b0 <NAU7802_setLDO>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	4013      	ands	r3, r2
 800054e:	2b00      	cmp	r3, #0
 8000550:	bf14      	ite	ne
 8000552:	2301      	movne	r3, #1
 8000554:	2300      	moveq	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]

    result &= NAU7802_setGain(NAU7802_GAIN_128); //Set gain to 128
 8000558:	2007      	movs	r0, #7
 800055a:	f000 f952 	bl	8000802 <NAU7802_setGain>
 800055e:	4603      	mov	r3, r0
 8000560:	461a      	mov	r2, r3
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	4013      	ands	r3, r2
 8000566:	2b00      	cmp	r3, #0
 8000568:	bf14      	ite	ne
 800056a:	2301      	movne	r3, #1
 800056c:	2300      	moveq	r3, #0
 800056e:	73fb      	strb	r3, [r7, #15]

    result &= NAU7802_setSampleRate(NAU7802_SPS_80); //Set samples per second to 10
 8000570:	2003      	movs	r0, #3
 8000572:	f000 f8ad 	bl	80006d0 <NAU7802_setSampleRate>
 8000576:	4603      	mov	r3, r0
 8000578:	461a      	mov	r2, r3
 800057a:	7bfb      	ldrb	r3, [r7, #15]
 800057c:	4013      	ands	r3, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	bf14      	ite	ne
 8000582:	2301      	movne	r3, #1
 8000584:	2300      	moveq	r3, #0
 8000586:	73fb      	strb	r3, [r7, #15]

    result &= NAU7802_setRegister(NAU7802_ADC, 0x30); //Turn off CLK_CHP. From 9.1 power on sequencing.
 8000588:	2130      	movs	r1, #48	; 0x30
 800058a:	2015      	movs	r0, #21
 800058c:	f000 fa4a 	bl	8000a24 <NAU7802_setRegister>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	4013      	ands	r3, r2
 8000598:	2b00      	cmp	r3, #0
 800059a:	bf14      	ite	ne
 800059c:	2301      	movne	r3, #1
 800059e:	2300      	moveq	r3, #0
 80005a0:	73fb      	strb	r3, [r7, #15]

    result &= NAU7802_clearBit(NAU7802_PGA_PWR_PGA_CAP_EN, NAU7802_PGA_PWR); //Disables 330pF decoupling cap on chan 2 - we must cut the CAP trace on the bottom of the board as we're using channel 2
 80005a2:	211c      	movs	r1, #28
 80005a4:	2007      	movs	r0, #7
 80005a6:	f000 f9bc 	bl	8000922 <NAU7802_clearBit>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	4013      	ands	r3, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	bf14      	ite	ne
 80005b6:	2301      	movne	r3, #1
 80005b8:	2300      	moveq	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]

    result &= NAU7802_calibrateAFE(); //Re-cal analog front end when we change gain, sample rate, or channel
 80005bc:	f000 f832 	bl	8000624 <NAU7802_calibrateAFE>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	4013      	ands	r3, r2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	bf14      	ite	ne
 80005cc:	2301      	movne	r3, #1
 80005ce:	2300      	moveq	r3, #0
 80005d0:	73fb      	strb	r3, [r7, #15]
  }

  return (result);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000038 	.word	0x20000038

080005e0 <NAU7802_isConnected>:

//Returns true if device is present
//Tests for device ack to I2C address
bool NAU7802_isConnected()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_BUSY;
 80005e6:	2302      	movs	r3, #2
 80005e8:	73fb      	strb	r3, [r7, #15]

	uint32_t trials = 3; // number of tries to connect before we give up
 80005ea:	2303      	movs	r3, #3
 80005ec:	60bb      	str	r3, [r7, #8]
	uint32_t timeout = 1000; // number of millisconds to wait before we give up
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	607b      	str	r3, [r7, #4]

	status = HAL_I2C_IsDeviceReady(_NAU7802_i2cPort, _NAU7802_deviceAddress<<1, trials, timeout);
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <NAU7802_isConnected+0x40>)
 80005f6:	6818      	ldr	r0, [r3, #0]
 80005f8:	232a      	movs	r3, #42	; 0x2a
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	b299      	uxth	r1, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	f004 f8a8 	bl	8004758 <HAL_I2C_IsDeviceReady>
 8000608:	4603      	mov	r3, r0
 800060a:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) {
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <NAU7802_isConnected+0x36>
		return false;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <NAU7802_isConnected+0x38>
	} else {
		return true;
 8000616:	2301      	movs	r3, #1
  _i2cPort->beginTransmission(_deviceAddress);
  if (_i2cPort->endTransmission() != 0)
    return (false); //Sensor did not ACK
  return (true);    //All good
  */
}
 8000618:	4618      	mov	r0, r3
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000038 	.word	0x20000038

08000624 <NAU7802_calibrateAFE>:

//Calibrate analog front end of system. Returns true if CAL_ERR bit is 0 (no error)
//Takes approximately 344ms to calibrate; wait up to 1000ms.
//It is recommended that the AFE be re-calibrated any time the gain, SPS, or channel number is changed.
bool NAU7802_calibrateAFE()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	NAU7802_beginCalibrateAFE();
 8000628:	f000 f807 	bl	800063a <NAU7802_beginCalibrateAFE>
  return NAU7802_waitForCalibrateAFE(1000);
 800062c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000630:	f000 f822 	bl	8000678 <NAU7802_waitForCalibrateAFE>
 8000634:	4603      	mov	r3, r0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}

0800063a <NAU7802_beginCalibrateAFE>:

//Begin asynchronous calibration of the analog front end.
// Poll for completion with calAFEStatus() or wait with waitForCalibrateAFE()
void NAU7802_beginCalibrateAFE()
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
	NAU7802_setBit(NAU7802_CTRL2_CALS, NAU7802_CTRL2);
 800063e:	2102      	movs	r1, #2
 8000640:	2002      	movs	r0, #2
 8000642:	f000 f94b 	bl	80008dc <NAU7802_setBit>
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <NAU7802_calAFEStatus>:

//Check calibration status.
NAU7802_Cal_Status NAU7802_calAFEStatus()
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  if (NAU7802_getBit(NAU7802_CTRL2_CALS, NAU7802_CTRL2))
 800064e:	2102      	movs	r1, #2
 8000650:	2002      	movs	r0, #2
 8000652:	f000 f98b 	bl	800096c <NAU7802_getBit>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <NAU7802_calAFEStatus+0x16>
  {
    return NAU7802_CAL_IN_PROGRESS;
 800065c:	2301      	movs	r3, #1
 800065e:	e009      	b.n	8000674 <NAU7802_calAFEStatus+0x2a>
  }

  if (NAU7802_getBit(NAU7802_CTRL2_CAL_ERROR, NAU7802_CTRL2))
 8000660:	2102      	movs	r1, #2
 8000662:	2003      	movs	r0, #3
 8000664:	f000 f982 	bl	800096c <NAU7802_getBit>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <NAU7802_calAFEStatus+0x28>
  {
    return NAU7802_CAL_FAILURE;
 800066e:	2302      	movs	r3, #2
 8000670:	e000      	b.n	8000674 <NAU7802_calAFEStatus+0x2a>
  }

  // Calibration passed
  return NAU7802_CAL_SUCCESS;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	bd80      	pop	{r7, pc}

08000678 <NAU7802_waitForCalibrateAFE>:

//Wait for asynchronous AFE calibration to complete with optional timeout.
//If timeout is not specified (or set to 0), then wait indefinitely.
//Returns true if calibration completes succsfully, otherwise returns false.
bool NAU7802_waitForCalibrateAFE(uint32_t timeout_ms)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

  uint32_t begin = HAL_GetTick();
 8000680:	f002 f8b0 	bl	80027e4 <HAL_GetTick>
 8000684:	60f8      	str	r0, [r7, #12]
  NAU7802_Cal_Status cal_ready;

  while ((cal_ready = NAU7802_calAFEStatus()) == NAU7802_CAL_IN_PROGRESS)
 8000686:	e00d      	b.n	80006a4 <NAU7802_waitForCalibrateAFE+0x2c>
  {
    if ((timeout_ms > 0) && ((HAL_GetTick() - begin) > timeout_ms))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d007      	beq.n	800069e <NAU7802_waitForCalibrateAFE+0x26>
 800068e:	f002 f8a9 	bl	80027e4 <HAL_GetTick>
 8000692:	4602      	mov	r2, r0
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	429a      	cmp	r2, r3
 800069c:	d30a      	bcc.n	80006b4 <NAU7802_waitForCalibrateAFE+0x3c>
    {
      break;
    }
    HAL_Delay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f002 f8ac 	bl	80027fc <HAL_Delay>
  while ((cal_ready = NAU7802_calAFEStatus()) == NAU7802_CAL_IN_PROGRESS)
 80006a4:	f7ff ffd1 	bl	800064a <NAU7802_calAFEStatus>
 80006a8:	4603      	mov	r3, r0
 80006aa:	72fb      	strb	r3, [r7, #11]
 80006ac:	7afb      	ldrb	r3, [r7, #11]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d0ea      	beq.n	8000688 <NAU7802_waitForCalibrateAFE+0x10>
 80006b2:	e000      	b.n	80006b6 <NAU7802_waitForCalibrateAFE+0x3e>
      break;
 80006b4:	bf00      	nop
  }

  if (cal_ready == NAU7802_CAL_SUCCESS)
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d104      	bne.n	80006c6 <NAU7802_waitForCalibrateAFE+0x4e>
  {
	HAL_Delay(50); // extra 50ms delay added here because without it we get erroneous readings
 80006bc:	2032      	movs	r0, #50	; 0x32
 80006be:	f002 f89d 	bl	80027fc <HAL_Delay>
    return (true);
 80006c2:	2301      	movs	r3, #1
 80006c4:	e000      	b.n	80006c8 <NAU7802_waitForCalibrateAFE+0x50>
  }

  return (false);
 80006c6:	2300      	movs	r3, #0

}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <NAU7802_setSampleRate>:

//Set the readings per second
//10, 20, 40, 80, and 320 samples per second is available
bool NAU7802_setSampleRate(uint8_t rate)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	71fb      	strb	r3, [r7, #7]
  if (rate > 0b111)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b07      	cmp	r3, #7
 80006de:	d901      	bls.n	80006e4 <NAU7802_setSampleRate+0x14>
    rate = 0b111; //Error check
 80006e0:	2307      	movs	r3, #7
 80006e2:	71fb      	strb	r3, [r7, #7]

  uint8_t value = NAU7802_getRegister(NAU7802_CTRL2);
 80006e4:	2002      	movs	r0, #2
 80006e6:	f000 f963 	bl	80009b0 <NAU7802_getRegister>
 80006ea:	4603      	mov	r3, r0
 80006ec:	73fb      	strb	r3, [r7, #15]
  value &= 0b10001111; //Clear CRS bits
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80006f4:	73fb      	strb	r3, [r7, #15]
  value |= rate << 4;  //Mask in new CRS bits
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	b25a      	sxtb	r2, r3
 80006fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000700:	4313      	orrs	r3, r2
 8000702:	b25b      	sxtb	r3, r3
 8000704:	73fb      	strb	r3, [r7, #15]

  return (NAU7802_setRegister(NAU7802_CTRL2, value));
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	4619      	mov	r1, r3
 800070a:	2002      	movs	r0, #2
 800070c:	f000 f98a 	bl	8000a24 <NAU7802_setRegister>
 8000710:	4603      	mov	r3, r0
}
 8000712:	4618      	mov	r0, r3
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <NAU7802_setChannel>:

//Select between 1 and 2
bool NAU7802_setChannel(uint8_t channelNumber)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	4603      	mov	r3, r0
 8000722:	71fb      	strb	r3, [r7, #7]
  if (channelNumber == NAU7802_CHANNEL_1)
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d105      	bne.n	8000736 <NAU7802_setChannel+0x1c>
    return (NAU7802_clearBit(NAU7802_CTRL2_CHS, NAU7802_CTRL2)); //Channel 1 (default)
 800072a:	2102      	movs	r1, #2
 800072c:	2007      	movs	r0, #7
 800072e:	f000 f8f8 	bl	8000922 <NAU7802_clearBit>
 8000732:	4603      	mov	r3, r0
 8000734:	e004      	b.n	8000740 <NAU7802_setChannel+0x26>
  else
    return (NAU7802_setBit(NAU7802_CTRL2_CHS, NAU7802_CTRL2)); //Channel 2
 8000736:	2102      	movs	r1, #2
 8000738:	2007      	movs	r0, #7
 800073a:	f000 f8cf 	bl	80008dc <NAU7802_setBit>
 800073e:	4603      	mov	r3, r0
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <NAU7802_powerUp>:

//Power up digital and analog sections of scale
bool NAU7802_powerUp()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
  NAU7802_setBit(NAU7802_PU_CTRL_PUD, NAU7802_PU_CTRL);
 800074e:	2100      	movs	r1, #0
 8000750:	2001      	movs	r0, #1
 8000752:	f000 f8c3 	bl	80008dc <NAU7802_setBit>
  NAU7802_setBit(NAU7802_PU_CTRL_PUA, NAU7802_PU_CTRL);
 8000756:	2100      	movs	r1, #0
 8000758:	2002      	movs	r0, #2
 800075a:	f000 f8bf 	bl	80008dc <NAU7802_setBit>

  //Wait for Power Up bit to be set - takes approximately 200us
  uint8_t counter = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    if (NAU7802_getBit(NAU7802_PU_CTRL_PUR, NAU7802_PU_CTRL) == true)
 8000762:	2100      	movs	r1, #0
 8000764:	2003      	movs	r0, #3
 8000766:	f000 f901 	bl	800096c <NAU7802_getBit>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d109      	bne.n	8000784 <NAU7802_powerUp+0x3c>
      break; //Good to go
    HAL_Delay(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f002 f843 	bl	80027fc <HAL_Delay>
    if (counter++ > 100)
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	1c5a      	adds	r2, r3, #1
 800077a:	71fa      	strb	r2, [r7, #7]
 800077c:	2b64      	cmp	r3, #100	; 0x64
 800077e:	d9f0      	bls.n	8000762 <NAU7802_powerUp+0x1a>
      return (false); //Error
 8000780:	2300      	movs	r3, #0
 8000782:	e001      	b.n	8000788 <NAU7802_powerUp+0x40>
      break; //Good to go
 8000784:	bf00      	nop
  }
  return (true);
 8000786:	2301      	movs	r3, #1
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <NAU7802_reset>:
  return (NAU7802_clearBit(NAU7802_PU_CTRL_PUA, NAU7802_PU_CTRL));
}

//Resets all registers to Power Off Defaults
bool NAU7802_reset()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  NAU7802_setBit(NAU7802_PU_CTRL_RR, NAU7802_PU_CTRL); //Set RR
 8000794:	2100      	movs	r1, #0
 8000796:	2000      	movs	r0, #0
 8000798:	f000 f8a0 	bl	80008dc <NAU7802_setBit>
  HAL_Delay(1);
 800079c:	2001      	movs	r0, #1
 800079e:	f002 f82d 	bl	80027fc <HAL_Delay>
  return (NAU7802_clearBit(NAU7802_PU_CTRL_RR, NAU7802_PU_CTRL)); //Clear RR to leave reset state
 80007a2:	2100      	movs	r1, #0
 80007a4:	2000      	movs	r0, #0
 80007a6:	f000 f8bc 	bl	8000922 <NAU7802_clearBit>
 80007aa:	4603      	mov	r3, r0
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <NAU7802_setLDO>:

//Set the onboard Low-Drop-Out voltage regulator to a given value
//2.4, 2.7, 3.0, 3.3, 3.6, 3.9, 4.2, 4.5V are available
bool NAU7802_setLDO(uint8_t ldoValue)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  if (ldoValue > 0b111)
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b07      	cmp	r3, #7
 80007be:	d901      	bls.n	80007c4 <NAU7802_setLDO+0x14>
    ldoValue = 0b111; //Error check
 80007c0:	2307      	movs	r3, #7
 80007c2:	71fb      	strb	r3, [r7, #7]

  //Set the value of the LDO
  uint8_t value = NAU7802_getRegister(NAU7802_CTRL1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f000 f8f3 	bl	80009b0 <NAU7802_getRegister>
 80007ca:	4603      	mov	r3, r0
 80007cc:	73fb      	strb	r3, [r7, #15]
  value &= 0b11000111;    //Clear LDO bits
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80007d4:	73fb      	strb	r3, [r7, #15]
  value |= ldoValue << 3; //Mask in new LDO bits
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	b25a      	sxtb	r2, r3
 80007dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	73fb      	strb	r3, [r7, #15]
  NAU7802_setRegister(NAU7802_CTRL1, value);
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4619      	mov	r1, r3
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 f91a 	bl	8000a24 <NAU7802_setRegister>

  return (NAU7802_setBit(NAU7802_PU_CTRL_AVDDS, NAU7802_PU_CTRL)); //Enable the internal LDO
 80007f0:	2100      	movs	r1, #0
 80007f2:	2007      	movs	r0, #7
 80007f4:	f000 f872 	bl	80008dc <NAU7802_setBit>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <NAU7802_setGain>:

//Set the gain
//x1, 2, 4, 8, 16, 32, 64, 128 are avaialable
bool NAU7802_setGain(uint8_t gainValue)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b084      	sub	sp, #16
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  if (gainValue > 0b111)
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	2b07      	cmp	r3, #7
 8000810:	d901      	bls.n	8000816 <NAU7802_setGain+0x14>
    gainValue = 0b111; //Error check
 8000812:	2307      	movs	r3, #7
 8000814:	71fb      	strb	r3, [r7, #7]

  uint8_t value = NAU7802_getRegister(NAU7802_CTRL1);
 8000816:	2001      	movs	r0, #1
 8000818:	f000 f8ca 	bl	80009b0 <NAU7802_getRegister>
 800081c:	4603      	mov	r3, r0
 800081e:	73fb      	strb	r3, [r7, #15]
  value &= 0b11111000; //Clear gain bits
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	f023 0307 	bic.w	r3, r3, #7
 8000826:	73fb      	strb	r3, [r7, #15]
  value |= gainValue;  //Mask in new bits
 8000828:	7bfa      	ldrb	r2, [r7, #15]
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4313      	orrs	r3, r2
 800082e:	73fb      	strb	r3, [r7, #15]

  return (NAU7802_setRegister(NAU7802_CTRL1, value));
 8000830:	7bfb      	ldrb	r3, [r7, #15]
 8000832:	4619      	mov	r1, r3
 8000834:	2001      	movs	r0, #1
 8000836:	f000 f8f5 	bl	8000a24 <NAU7802_setRegister>
 800083a:	4603      	mov	r3, r0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <NAU7802_getReading>:
}

//Returns 24-bit reading
//Assumes CR Cycle Ready bit (ADC conversion complete) has been checked to be 1 - which can be done with NAU7802_available()
int32_t NAU7802_getReading()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef status = HAL_BUSY;
 800084a:	2302      	movs	r3, #2
 800084c:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout = 1000; // number of ms to wait for a reply
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	61bb      	str	r3, [r7, #24]

	uint8_t ADC_result_buffer[3]; // 3-byte temporary buffer

	// ask the NAU7802 for the ADC result
	// first we write the address and register value
	uint8_t registerAddress = NAU7802_ADCO_B2;
 8000854:	2312      	movs	r3, #18
 8000856:	71fb      	strb	r3, [r7, #7]

	status = HAL_I2C_Master_Transmit(_NAU7802_i2cPort, _NAU7802_deviceAddress<<1, &registerAddress, 1, timeout); // send one byte, which is the register address
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <NAU7802_getReading+0x94>)
 800085a:	6818      	ldr	r0, [r3, #0]
 800085c:	232a      	movs	r3, #42	; 0x2a
 800085e:	b29b      	uxth	r3, r3
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	b299      	uxth	r1, r3
 8000864:	1dfa      	adds	r2, r7, #7
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2301      	movs	r3, #1
 800086c:	f003 fd8a 	bl	8004384 <HAL_I2C_Master_Transmit>
 8000870:	4603      	mov	r3, r0
 8000872:	77fb      	strb	r3, [r7, #31]

	if (status != HAL_OK) {
 8000874:	7ffb      	ldrb	r3, [r7, #31]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <NAU7802_getReading+0x3a>
		return 0; // give up if we couldn't transmit
 800087a:	2300      	movs	r3, #0
 800087c:	e027      	b.n	80008ce <NAU7802_getReading+0x8a>
	}

	// then we read back the three result bytes (the NAU7802 automatically sends the subsequent bytes in the register map if we keep reading)
	status = HAL_I2C_Master_Receive(_NAU7802_i2cPort, _NAU7802_deviceAddress<<1, ADC_result_buffer, sizeof(ADC_result_buffer), timeout);
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <NAU7802_getReading+0x94>)
 8000880:	6818      	ldr	r0, [r3, #0]
 8000882:	232a      	movs	r3, #42	; 0x2a
 8000884:	b29b      	uxth	r3, r3
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	b299      	uxth	r1, r3
 800088a:	f107 0208 	add.w	r2, r7, #8
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2303      	movs	r3, #3
 8000894:	f003 fe6a 	bl	800456c <HAL_I2C_Master_Receive>
 8000898:	4603      	mov	r3, r0
 800089a:	77fb      	strb	r3, [r7, #31]

	if (status != HAL_OK) {
 800089c:	7ffb      	ldrb	r3, [r7, #31]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <NAU7802_getReading+0x62>
		return 0; // again, give up if we lost comms
 80008a2:	2300      	movs	r3, #0
 80008a4:	e013      	b.n	80008ce <NAU7802_getReading+0x8a>
	}

	// now we reassemble those three bytes into a 24-bit number and perform an unsigned-to-signed conversion
	uint32_t valueRaw = (uint32_t)ADC_result_buffer[0] << 16; //MSB
 80008a6:	7a3b      	ldrb	r3, [r7, #8]
 80008a8:	041b      	lsls	r3, r3, #16
 80008aa:	617b      	str	r3, [r7, #20]
	valueRaw |= (uint32_t)ADC_result_buffer[1] << 8;          //MidSB
 80008ac:	7a7b      	ldrb	r3, [r7, #9]
 80008ae:	021b      	lsls	r3, r3, #8
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	617b      	str	r3, [r7, #20]
	valueRaw |= (uint32_t)ADC_result_buffer[2];               //LSB
 80008b6:	7abb      	ldrb	r3, [r7, #10]
 80008b8:	461a      	mov	r2, r3
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	4313      	orrs	r3, r2
 80008be:	617b      	str	r3, [r7, #20]
	// the raw value coming from the ADC is a 24-bit number, so the sign bit now
	// resides on bit 23 (0 is LSB) of the uint32_t container. By shifting the
	// value to the left, I move the sign bit to the MSB of the uint32_t container.
	// By casting to a signed int32_t container I now have properly recovered
	// the sign of the original value
	int32_t valueShifted = (int32_t)(valueRaw << 8);
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	613b      	str	r3, [r7, #16]

	// shift the number back right to recover its intended magnitude
	int32_t value = (valueShifted >> 8);
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	121b      	asrs	r3, r3, #8
 80008ca:	60fb      	str	r3, [r7, #12]

	return (value);
 80008cc:	68fb      	ldr	r3, [r7, #12]
    return (value);
  }
*/
  return (0); //Error

}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000038 	.word	0x20000038

080008dc <NAU7802_setBit>:
  return (NAU7802_setBit(NAU7802_CTRL1_CRP, NAU7802_CTRL1)); //1 = CRDY pin is low active (ready when 0)
}

//Mask & set a given bit within a register
bool NAU7802_setBit(uint8_t bitNumber, uint8_t registerAddress)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	460a      	mov	r2, r1
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	4613      	mov	r3, r2
 80008ea:	71bb      	strb	r3, [r7, #6]
  uint8_t value = NAU7802_getRegister(registerAddress);
 80008ec:	79bb      	ldrb	r3, [r7, #6]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f85e 	bl	80009b0 <NAU7802_getRegister>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]
  value |= (1 << bitNumber); //Set this bit
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2201      	movs	r2, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	b25a      	sxtb	r2, r3
 8000902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000906:	4313      	orrs	r3, r2
 8000908:	b25b      	sxtb	r3, r3
 800090a:	73fb      	strb	r3, [r7, #15]
  return (NAU7802_setRegister(registerAddress, value));
 800090c:	7bfa      	ldrb	r2, [r7, #15]
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f886 	bl	8000a24 <NAU7802_setRegister>
 8000918:	4603      	mov	r3, r0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <NAU7802_clearBit>:

//Mask & clear a given bit within a register
bool NAU7802_clearBit(uint8_t bitNumber, uint8_t registerAddress)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af00      	add	r7, sp, #0
 8000928:	4603      	mov	r3, r0
 800092a:	460a      	mov	r2, r1
 800092c:	71fb      	strb	r3, [r7, #7]
 800092e:	4613      	mov	r3, r2
 8000930:	71bb      	strb	r3, [r7, #6]
  uint8_t value = NAU7802_getRegister(registerAddress);
 8000932:	79bb      	ldrb	r3, [r7, #6]
 8000934:	4618      	mov	r0, r3
 8000936:	f000 f83b 	bl	80009b0 <NAU7802_getRegister>
 800093a:	4603      	mov	r3, r0
 800093c:	73fb      	strb	r3, [r7, #15]
  value &= ~(1 << bitNumber); //Set this bit
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2201      	movs	r2, #1
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	b25b      	sxtb	r3, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	b25a      	sxtb	r2, r3
 800094c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000950:	4013      	ands	r3, r2
 8000952:	b25b      	sxtb	r3, r3
 8000954:	73fb      	strb	r3, [r7, #15]
  return (NAU7802_setRegister(registerAddress, value));
 8000956:	7bfa      	ldrb	r2, [r7, #15]
 8000958:	79bb      	ldrb	r3, [r7, #6]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f000 f861 	bl	8000a24 <NAU7802_setRegister>
 8000962:	4603      	mov	r3, r0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <NAU7802_getBit>:

//Return a given bit within a register
bool NAU7802_getBit(uint8_t bitNumber, uint8_t registerAddress)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	4613      	mov	r3, r2
 800097a:	71bb      	strb	r3, [r7, #6]
  uint8_t value = NAU7802_getRegister(registerAddress);
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f816 	bl	80009b0 <NAU7802_getRegister>
 8000984:	4603      	mov	r3, r0
 8000986:	73fb      	strb	r3, [r7, #15]
  value &= (1 << bitNumber); //Clear all but this bit
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2201      	movs	r2, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	b25a      	sxtb	r2, r3
 8000992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000996:	4013      	ands	r3, r2
 8000998:	b25b      	sxtb	r3, r3
 800099a:	73fb      	strb	r3, [r7, #15]
  return (value);
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	bf14      	ite	ne
 80009a2:	2301      	movne	r3, #1
 80009a4:	2300      	moveq	r3, #0
 80009a6:	b2db      	uxtb	r3, r3
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <NAU7802_getRegister>:

//Get contents of a register
uint8_t NAU7802_getRegister(uint8_t registerAddress)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_BUSY;
 80009ba:	2302      	movs	r3, #2
 80009bc:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = 1000; // number of ms to wait for a reply
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	613b      	str	r3, [r7, #16]

	uint8_t register_value = 0; // return value
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]

	// write to the NAU7802 with the register address
	status = HAL_I2C_Master_Transmit(_NAU7802_i2cPort, _NAU7802_deviceAddress<<1, &registerAddress, 1, timeout); // send one byte, which is the register address
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <NAU7802_getRegister+0x70>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	232a      	movs	r3, #42	; 0x2a
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	b299      	uxth	r1, r3
 80009d4:	1dfa      	adds	r2, r7, #7
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	2301      	movs	r3, #1
 80009dc:	f003 fcd2 	bl	8004384 <HAL_I2C_Master_Transmit>
 80009e0:	4603      	mov	r3, r0
 80009e2:	75fb      	strb	r3, [r7, #23]

	if (status != HAL_OK) {
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <NAU7802_getRegister+0x3e>
		return false; // give up if we couldn't transmit
 80009ea:	2300      	movs	r3, #0
 80009ec:	e014      	b.n	8000a18 <NAU7802_getRegister+0x68>
	}

	// read back one byte
	status = HAL_I2C_Master_Receive(_NAU7802_i2cPort, _NAU7802_deviceAddress<<1, &register_value, 1, timeout); // all registers are 1 byte
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <NAU7802_getRegister+0x70>)
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	232a      	movs	r3, #42	; 0x2a
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	b299      	uxth	r1, r3
 80009fa:	f107 020f 	add.w	r2, r7, #15
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2301      	movs	r3, #1
 8000a04:	f003 fdb2 	bl	800456c <HAL_I2C_Master_Receive>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	75fb      	strb	r3, [r7, #23]

	if (status != HAL_OK) {
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <NAU7802_getRegister+0x66>
		return false; // again, give up if we lost comms
 8000a12:	2300      	movs	r3, #0
 8000a14:	e000      	b.n	8000a18 <NAU7802_getRegister+0x68>
	}

	return register_value;
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
  if (_i2cPort->available())
    return (_i2cPort->read());

  return (-1); //Error
*/
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000038 	.word	0x20000038

08000a24 <NAU7802_setRegister>:

//Send a given value to be written to given address
//Return true if successful
bool NAU7802_setRegister(uint8_t registerAddress, uint8_t value)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af02      	add	r7, sp, #8
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	460a      	mov	r2, r1
 8000a2e:	71fb      	strb	r3, [r7, #7]
 8000a30:	4613      	mov	r3, r2
 8000a32:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_BUSY;
 8000a34:	2302      	movs	r3, #2
 8000a36:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = 1000; // number of ms to wait for a reply
 8000a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3c:	613b      	str	r3, [r7, #16]

	uint8_t data_buffer[2]; // two bytes to send

	data_buffer[0] = registerAddress;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	733b      	strb	r3, [r7, #12]
	data_buffer[1] = value;
 8000a42:	79bb      	ldrb	r3, [r7, #6]
 8000a44:	737b      	strb	r3, [r7, #13]

	status = HAL_I2C_Master_Transmit(_NAU7802_i2cPort, _NAU7802_deviceAddress<<1, data_buffer, sizeof(data_buffer), timeout);
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <NAU7802_setRegister+0x54>)
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	232a      	movs	r3, #42	; 0x2a
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	b299      	uxth	r1, r3
 8000a52:	f107 020c 	add.w	r2, r7, #12
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f003 fc92 	bl	8004384 <HAL_I2C_Master_Transmit>
 8000a60:	4603      	mov	r3, r0
 8000a62:	75fb      	strb	r3, [r7, #23]

	if (status != HAL_OK) {
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <NAU7802_setRegister+0x4a>
		return false;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <NAU7802_setRegister+0x4c>
	} else {
		return true;
 8000a6e:	2301      	movs	r3, #1
  if (_i2cPort->endTransmission() != 0)
    return (false); //Sensor did not ACK
  return (true);
  */

}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000038 	.word	0x20000038

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f001 fe46 	bl	8002712 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f89b 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 fb03 	bl	8001094 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a8e:	f000 fad1 	bl	8001034 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000a92:	f000 f999 	bl	8000dc8 <MX_I2C3_Init>
  MX_RTC_Init();
 8000a96:	f000 f9d7 	bl	8000e48 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000a9a:	f000 fa9b 	bl	8000fd4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000a9e:	f000 f9fb 	bl	8000e98 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000aa2:	f000 f8ed 	bl	8000c80 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000aa6:	f000 f94f 	bl	8000d48 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /*CRYOEGG 19 WAKEUP CODE*/
  // wakeup functionality
  /* Check and handle if the system was resumed from StandBy mode */
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <main+0x120>)
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d003      	beq.n	8000abe <main+0x42>
  {
	  /* Clear Standby flag */
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8000ab6:	4b39      	ldr	r3, [pc, #228]	; (8000b9c <main+0x120>)
 8000ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000abc:	619a      	str	r2, [r3, #24]
   * - Clear all related wakeup flags,
   * - Re-enable all used wakeup sources,
   * - Enter the Standby mode.
   * */
  /* Disable all used wakeup sources*/
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000abe:	4838      	ldr	r0, [pc, #224]	; (8000ba0 <main+0x124>)
 8000ac0:	f005 fdf4 	bl	80066ac <HAL_RTCEx_DeactivateWakeUpTimer>
  /* Clear all related wakeup flags */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000ac4:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <main+0x120>)
 8000ac6:	221f      	movs	r2, #31
 8000ac8:	619a      	str	r2, [r3, #24]
  /*CRYOEGG 19 WAKEUP CODE*/

  //Enable Sensor 3v3
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2120      	movs	r1, #32
 8000ace:	4835      	ldr	r0, [pc, #212]	; (8000ba4 <main+0x128>)
 8000ad0:	f003 fbb0 	bl	8004234 <HAL_GPIO_WritePin>
   HAL_Delay(1000);
 8000ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad8:	f001 fe90 	bl	80027fc <HAL_Delay>

   load_cell_connected = setup_load_cell_sensor(); // returns true on success
 8000adc:	f001 f902 	bl	8001ce4 <setup_load_cell_sensor>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <main+0x12c>)
 8000ae6:	701a      	strb	r2, [r3, #0]
   //tilt_sensor_connected = setup_tilt_sensor();
   tilt_sensor_connected = false; // temporary removal of tilt sensor function as we're not using it and it seems to sometimes cause the micro to hang.
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <main+0x130>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
   imu_connected = setup_imu_sensor();
 8000aee:	f000 fd33 	bl	8001558 <setup_imu_sensor>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <main+0x134>)
 8000af8:	701a      	strb	r2, [r3, #0]
   temperature_sensor_connected = setup_temperature_sensor();
 8000afa:	f000 fc4b 	bl	8001394 <setup_temperature_sensor>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <main+0x138>)
 8000b04:	701a      	strb	r2, [r3, #0]
   pressure_sensor_connected = setup_pressure_sensor();
 8000b06:	f001 f889 	bl	8001c1c <setup_pressure_sensor>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <main+0x13c>)
 8000b10:	701a      	strb	r2, [r3, #0]


  //Enable Radio Modem
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2101      	movs	r1, #1
 8000b16:	4829      	ldr	r0, [pc, #164]	; (8000bbc <main+0x140>)
 8000b18:	f003 fb8c 	bl	8004234 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000b1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b20:	f001 fe6c 	bl	80027fc <HAL_Delay>
  assemble_and_send_packet();
 8000b24:	f001 f968 	bl	8001df8 <assemble_and_send_packet>
  //turn on led
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b30:	f003 fb80 	bl	8004234 <HAL_GPIO_WritePin>

  HAL_Delay(3000);
 8000b34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b38:	f001 fe60 	bl	80027fc <HAL_Delay>
  //Disable Sensor 3v3
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2120      	movs	r1, #32
 8000b40:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <main+0x128>)
 8000b42:	f003 fb77 	bl	8004234 <HAL_GPIO_WritePin>
  //Disable Radio Modem
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	481c      	ldr	r0, [pc, #112]	; (8000bbc <main+0x140>)
 8000b4c:	f003 fb72 	bl	8004234 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8000b50:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b54:	f001 fe52 	bl	80027fc <HAL_Delay>
  #define DEPLOYMENT_PACKET_TOTAL_COUNT 10 // 10 deployment packets before we go to long-term mode (just for testing)

  #define LONG_TERM_SLEEP 60 // 60 seconds = 1 minute for testing

  // read values from RTC backup registers
  HAL_PWR_EnableBkUpAccess(); // enable access to the Backup Registers
 8000b58:	f004 fa16 	bl	8004f88 <HAL_PWR_EnableBkUpAccess>

  deployment_packet_count = HAL_RTCEx_BKUPRead(&hrtc, 0); // get the number of deployment packets transmitted so far
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4810      	ldr	r0, [pc, #64]	; (8000ba0 <main+0x124>)
 8000b60:	f005 fe4b 	bl	80067fa <HAL_RTCEx_BKUPRead>
 8000b64:	60f8      	str	r0, [r7, #12]

  if (deployment_packet_count < DEPLOYMENT_PACKET_TOTAL_COUNT ) {
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b09      	cmp	r3, #9
 8000b6a:	d805      	bhi.n	8000b78 <main+0xfc>

	  // we're still in deployment mode
	  deployment_packet_count++;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
	  sleep_time = DEPLOYMENT_PACKET_SLEEP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	e001      	b.n	8000b7c <main+0x100>

  } else {

	  // we're in long-term mode
	  sleep_time = LONG_TERM_SLEEP;
 8000b78:	233c      	movs	r3, #60	; 0x3c
 8000b7a:	60bb      	str	r3, [r7, #8]
  }

  // write back the deployment packet count to the backup register
  HAL_RTCEx_BKUPWrite(&hrtc, 0, deployment_packet_count);
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <main+0x124>)
 8000b82:	f005 fe21 	bl	80067c8 <HAL_RTCEx_BKUPWrite>



  HAL_StatusTypeDef rtc_ret;
  // configure wakeup timer - set the clock to count in seconds, 0x3C seconds = 60 seconds
  rtc_ret = HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, sleep_time, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8000b86:	2204      	movs	r2, #4
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <main+0x124>)
 8000b8c:	f005 fcfa 	bl	8006584 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]

//  strcpy((char*)buf, "sleep\r\n");
//  HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
  /* Enter the Shutdown mode */
  HAL_PWREx_EnterSHUTDOWNMode();
 8000b94:	f004 fa6c 	bl	8005070 <HAL_PWREx_EnterSHUTDOWNMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <main+0x11c>
 8000b9a:	bf00      	nop
 8000b9c:	40007000 	.word	0x40007000
 8000ba0:	20000224 	.word	0x20000224
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	20000028 	.word	0x20000028
 8000bac:	2000002a 	.word	0x2000002a
 8000bb0:	2000002b 	.word	0x2000002b
 8000bb4:	2000002c 	.word	0x2000002c
 8000bb8:	20000029 	.word	0x20000029
 8000bbc:	48000400 	.word	0x48000400

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b096      	sub	sp, #88	; 0x58
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	2244      	movs	r2, #68	; 0x44
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f008 f846 	bl	8008c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000be2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000be6:	f004 f9ed 	bl	8004fc4 <HAL_PWREx_ControlVoltageScaling>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bf0:	f001 fa6c 	bl	80020cc <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bf4:	f004 f9c8 	bl	8004f88 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bf8:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <SystemClock_Config+0xbc>)
 8000bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <SystemClock_Config+0xbc>)
 8000c00:	f023 0318 	bic.w	r3, r3, #24
 8000c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000c08:	2306      	movs	r3, #6
 8000c0a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c14:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c16:	2310      	movs	r3, #16
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c26:	230a      	movs	r3, #10
 8000c28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 fa32 	bl	80050a4 <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c46:	f001 fa41 	bl	80020cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2104      	movs	r1, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f004 fe3e 	bl	80058e4 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c6e:	f001 fa2d 	bl	80020cc <Error_Handler>
  }
}
 8000c72:	bf00      	nop
 8000c74:	3758      	adds	r7, #88	; 0x58
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c86:	463b      	mov	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c96:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000c98:	4a29      	ldr	r2, [pc, #164]	; (8000d40 <MX_ADC1_Init+0xc0>)
 8000c9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c9c:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb4:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf6:	4811      	ldr	r0, [pc, #68]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000cf8:	f001 ffba 	bl	8002c70 <HAL_ADC_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000d02:	f001 f9e3 	bl	80020cc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_ADC1_Init+0xc4>)
 8000d08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d12:	237f      	movs	r3, #127	; 0x7f
 8000d14:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d16:	2304      	movs	r3, #4
 8000d18:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1e:	463b      	mov	r3, r7
 8000d20:	4619      	mov	r1, r3
 8000d22:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_ADC1_Init+0xbc>)
 8000d24:	f002 fa1e 	bl	8003164 <HAL_ADC_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d2e:	f001 f9cd 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000130 	.word	0x20000130
 8000d40:	50040000 	.word	0x50040000
 8000d44:	14f00020 	.word	0x14f00020

08000d48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <MX_I2C2_Init+0x78>)
 8000d50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d54:	4a1b      	ldr	r2, [pc, #108]	; (8000dc4 <MX_I2C2_Init+0x7c>)
 8000d56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d58:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d82:	480e      	ldr	r0, [pc, #56]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d84:	f003 fa6e 	bl	8004264 <HAL_I2C_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d8e:	f001 f99d 	bl	80020cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4809      	ldr	r0, [pc, #36]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000d96:	f004 f85f 	bl	8004e58 <HAL_I2CEx_ConfigAnalogFilter>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000da0:	f001 f994 	bl	80020cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000da4:	2100      	movs	r1, #0
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_I2C2_Init+0x74>)
 8000da8:	f004 f8a1 	bl	8004eee <HAL_I2CEx_ConfigDigitalFilter>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000db2:	f001 f98b 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000c8 	.word	0x200000c8
 8000dc0:	40005800 	.word	0x40005800
 8000dc4:	10909cec 	.word	0x10909cec

08000dc8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <MX_I2C3_Init+0x78>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <MX_I2C3_Init+0x7c>)
 8000dd6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e02:	480e      	ldr	r0, [pc, #56]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000e04:	f003 fa2e 	bl	8004264 <HAL_I2C_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e0e:	f001 f95d 	bl	80020cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e12:	2100      	movs	r1, #0
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000e16:	f004 f81f 	bl	8004e58 <HAL_I2CEx_ConfigAnalogFilter>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e20:	f001 f954 	bl	80020cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e24:	2100      	movs	r1, #0
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_I2C3_Init+0x74>)
 8000e28:	f004 f861 	bl	8004eee <HAL_I2CEx_ConfigDigitalFilter>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e32:	f001 f94b 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000007c 	.word	0x2000007c
 8000e40:	40005c00 	.word	0x40005c00
 8000e44:	10909cec 	.word	0x10909cec

08000e48 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <MX_RTC_Init+0x48>)
 8000e4e:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <MX_RTC_Init+0x4c>)
 8000e50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_RTC_Init+0x48>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <MX_RTC_Init+0x48>)
 8000e5a:	227f      	movs	r2, #127	; 0x7f
 8000e5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_RTC_Init+0x48>)
 8000e60:	22ff      	movs	r2, #255	; 0xff
 8000e62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <MX_RTC_Init+0x48>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_RTC_Init+0x48>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <MX_RTC_Init+0x48>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_RTC_Init+0x48>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_RTC_Init+0x48>)
 8000e7e:	f005 fa6f 	bl	8006360 <HAL_RTC_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000e88:	f001 f920 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000224 	.word	0x20000224
 8000e94:	40002800 	.word	0x40002800

08000e98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b096      	sub	sp, #88	; 0x58
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	615a      	str	r2, [r3, #20]
 8000ebc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	222c      	movs	r2, #44	; 0x2c
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 fecb 	bl	8008c60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eca:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000ecc:	4a40      	ldr	r2, [pc, #256]	; (8000fd0 <MX_TIM1_Init+0x138>)
 8000ece:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20000;
 8000ed0:	4b3e      	ldr	r3, [pc, #248]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000ed2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ed6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b3c      	ldr	r3, [pc, #240]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6;
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000ee0:	2206      	movs	r2, #6
 8000ee2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee4:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ef6:	4835      	ldr	r0, [pc, #212]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000ef8:	f005 fc95 	bl	8006826 <HAL_TIM_PWM_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f001 f8e3 	bl	80020cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f06:	2300      	movs	r3, #0
 8000f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f16:	4619      	mov	r1, r3
 8000f18:	482c      	ldr	r0, [pc, #176]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000f1a:	f006 fa5d 	bl	80073d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f24:	f001 f8d2 	bl	80020cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f28:	2360      	movs	r3, #96	; 0x60
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f30:	2300      	movs	r3, #0
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	481f      	ldr	r0, [pc, #124]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000f4e:	f005 fe27 	bl	8006ba0 <HAL_TIM_PWM_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f58:	f001 f8b8 	bl	80020cc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f64:	220c      	movs	r2, #12
 8000f66:	4619      	mov	r1, r3
 8000f68:	4818      	ldr	r0, [pc, #96]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000f6a:	f005 fe19 	bl	8006ba0 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0xe0>
  {
    Error_Handler();
 8000f74:	f001 f8aa 	bl	80020cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	4619      	mov	r1, r3
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000fae:	f006 fa79 	bl	80074a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000fb8:	f001 f888 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <MX_TIM1_Init+0x134>)
 8000fbe:	f001 fa2f 	bl	8002420 <HAL_TIM_MspPostInit>

}
 8000fc2:	bf00      	nop
 8000fc4:	3758      	adds	r7, #88	; 0x58
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000248 	.word	0x20000248
 8000fd0:	40012c00 	.word	0x40012c00

08000fd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <MX_USART1_UART_Init+0x5c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_USART1_UART_Init+0x58>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_USART1_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_USART1_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_USART1_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_USART1_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_USART1_UART_Init+0x58>)
 8001018:	f006 fabc 	bl	8007594 <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001022:	f001 f853 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001a0 	.word	0x200001a0
 8001030:	40013800 	.word	0x40013800

08001034 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_USART2_UART_Init+0x58>)
 800103a:	4a15      	ldr	r2, [pc, #84]	; (8001090 <MX_USART2_UART_Init+0x5c>)
 800103c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001040:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001044:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_USART2_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_USART2_UART_Init+0x58>)
 800105a:	220c      	movs	r2, #12
 800105c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_USART2_UART_Init+0x58>)
 8001078:	f006 fada 	bl	8007630 <HAL_HalfDuplex_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001082:	f001 f823 	bl	80020cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200002cc 	.word	0x200002cc
 8001090:	40004400 	.word	0x40004400

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b31      	ldr	r3, [pc, #196]	; (8001170 <MX_GPIO_Init+0xdc>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a30      	ldr	r2, [pc, #192]	; (8001170 <MX_GPIO_Init+0xdc>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <MX_GPIO_Init+0xdc>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <MX_GPIO_Init+0xdc>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a2a      	ldr	r2, [pc, #168]	; (8001170 <MX_GPIO_Init+0xdc>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <MX_GPIO_Init+0xdc>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <MX_GPIO_Init+0xdc>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a24      	ldr	r2, [pc, #144]	; (8001170 <MX_GPIO_Init+0xdc>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b22      	ldr	r3, [pc, #136]	; (8001170 <MX_GPIO_Init+0xdc>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2102      	movs	r1, #2
 80010f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fa:	f003 f89b 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2120      	movs	r1, #32
 8001102:	481c      	ldr	r0, [pc, #112]	; (8001174 <MX_GPIO_Init+0xe0>)
 8001104:	f003 f896 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	2101      	movs	r1, #1
 800110c:	481a      	ldr	r0, [pc, #104]	; (8001178 <MX_GPIO_Init+0xe4>)
 800110e:	f003 f891 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001112:	2302      	movs	r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f002 ff08 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001130:	2320      	movs	r3, #32
 8001132:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	480b      	ldr	r0, [pc, #44]	; (8001174 <MX_GPIO_Init+0xe0>)
 8001148:	f002 fefa 	bl	8003f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800114c:	2301      	movs	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4619      	mov	r1, r3
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_GPIO_Init+0xe4>)
 8001164:	f002 feec 	bl	8003f40 <HAL_GPIO_Init>

}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	48000800 	.word	0x48000800
 8001178:	48000400 	.word	0x48000400

0800117c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a31      	ldr	r2, [pc, #196]	; (8001250 <HAL_UART_RxCpltCallback+0xd4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d15c      	bne.n	8001248 <HAL_UART_RxCpltCallback+0xcc>
	{


		//"$" is char found at start of sensor data string
		if(TILT_RX_BUF[0] == '$'){
 800118e:	4b31      	ldr	r3, [pc, #196]	; (8001254 <HAL_UART_RxCpltCallback+0xd8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b24      	cmp	r3, #36	; 0x24
 8001194:	d102      	bne.n	800119c <HAL_UART_RxCpltCallback+0x20>
			TILT_RX_DATA_INDEX = 0;
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
		}

		TILT_RX_DATA[TILT_RX_DATA_INDEX] = TILT_RX_BUF[0];
 800119c:	4b2e      	ldr	r3, [pc, #184]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a2c      	ldr	r2, [pc, #176]	; (8001254 <HAL_UART_RxCpltCallback+0xd8>)
 80011a2:	7811      	ldrb	r1, [r2, #0]
 80011a4:	4a2d      	ldr	r2, [pc, #180]	; (800125c <HAL_UART_RxCpltCallback+0xe0>)
 80011a6:	54d1      	strb	r1, [r2, r3]

		//"\n" char is found at end of sensor data string
		if(TILT_RX_BUF[0] == '\n'){
 80011a8:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <HAL_UART_RxCpltCallback+0xd8>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b0a      	cmp	r3, #10
 80011ae:	d106      	bne.n	80011be <HAL_UART_RxCpltCallback+0x42>
			TILT_RX_DATA_INDEX = 0;
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
			TILT_RX_FLAG = true;
 80011b6:	4b2a      	ldr	r3, [pc, #168]	; (8001260 <HAL_UART_RxCpltCallback+0xe4>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
			TILT_RX_DATA_INDEX = (TILT_RX_DATA_INDEX + 1) > 47? 0 : TILT_RX_DATA_INDEX + 1;
			HAL_UART_Receive_IT(&huart1, TILT_RX_BUF, 1);
		}

	}
}
 80011bc:	e044      	b.n	8001248 <HAL_UART_RxCpltCallback+0xcc>
			if(TILT_RX_DATA_INDEX == 1){
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d106      	bne.n	80011d4 <HAL_UART_RxCpltCallback+0x58>
				TILT_CHKSUM = TILT_RX_DATA[TILT_RX_DATA_INDEX];
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a24      	ldr	r2, [pc, #144]	; (800125c <HAL_UART_RxCpltCallback+0xe0>)
 80011cc:	5cd2      	ldrb	r2, [r2, r3]
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <HAL_UART_RxCpltCallback+0xe8>)
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	e00d      	b.n	80011f0 <HAL_UART_RxCpltCallback+0x74>
			}else if(TILT_RX_DATA_INDEX < 43){
 80011d4:	4b20      	ldr	r3, [pc, #128]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b2a      	cmp	r3, #42	; 0x2a
 80011da:	dc09      	bgt.n	80011f0 <HAL_UART_RxCpltCallback+0x74>
				TILT_CHKSUM ^= TILT_RX_DATA[TILT_RX_DATA_INDEX];
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a1e      	ldr	r2, [pc, #120]	; (800125c <HAL_UART_RxCpltCallback+0xe0>)
 80011e2:	5cd2      	ldrb	r2, [r2, r3]
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <HAL_UART_RxCpltCallback+0xe8>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4053      	eors	r3, r2
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_UART_RxCpltCallback+0xe8>)
 80011ee:	701a      	strb	r2, [r3, #0]
			if(TILT_RX_DATA_INDEX == 44){
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b2c      	cmp	r3, #44	; 0x2c
 80011f6:	d106      	bne.n	8001206 <HAL_UART_RxCpltCallback+0x8a>
				TILT_CHKSUM_RETREIVED[0] = TILT_RX_DATA[TILT_RX_DATA_INDEX];
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_UART_RxCpltCallback+0xe0>)
 80011fe:	5cd2      	ldrb	r2, [r2, r3]
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_UART_RxCpltCallback+0xec>)
 8001202:	701a      	strb	r2, [r3, #0]
 8001204:	e009      	b.n	800121a <HAL_UART_RxCpltCallback+0x9e>
			}else if(TILT_RX_DATA_INDEX == 45){
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b2d      	cmp	r3, #45	; 0x2d
 800120c:	d105      	bne.n	800121a <HAL_UART_RxCpltCallback+0x9e>
				TILT_CHKSUM_RETREIVED[1] = TILT_RX_DATA[TILT_RX_DATA_INDEX];
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a12      	ldr	r2, [pc, #72]	; (800125c <HAL_UART_RxCpltCallback+0xe0>)
 8001214:	5cd2      	ldrb	r2, [r2, r3]
 8001216:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_UART_RxCpltCallback+0xec>)
 8001218:	705a      	strb	r2, [r3, #1]
			if(TILT_RX_DATA_INDEX + 1 > 47){
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b2e      	cmp	r3, #46	; 0x2e
 8001220:	dd02      	ble.n	8001228 <HAL_UART_RxCpltCallback+0xac>
				TILT_RX_FLAG = true;
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_UART_RxCpltCallback+0xe4>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
			TILT_RX_DATA_INDEX = (TILT_RX_DATA_INDEX + 1) > 47? 0 : TILT_RX_DATA_INDEX + 1;
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b2e      	cmp	r3, #46	; 0x2e
 800122e:	dc03      	bgt.n	8001238 <HAL_UART_RxCpltCallback+0xbc>
 8001230:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3301      	adds	r3, #1
 8001236:	e000      	b.n	800123a <HAL_UART_RxCpltCallback+0xbe>
 8001238:	2300      	movs	r3, #0
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_UART_RxCpltCallback+0xdc>)
 800123c:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1, TILT_RX_BUF, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	4904      	ldr	r1, [pc, #16]	; (8001254 <HAL_UART_RxCpltCallback+0xd8>)
 8001242:	480a      	ldr	r0, [pc, #40]	; (800126c <HAL_UART_RxCpltCallback+0xf0>)
 8001244:	f006 fade 	bl	8007804 <HAL_UART_Receive_IT>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40013800 	.word	0x40013800
 8001254:	20000044 	.word	0x20000044
 8001258:	20000030 	.word	0x20000030
 800125c:	20000294 	.word	0x20000294
 8001260:	20000034 	.word	0x20000034
 8001264:	20000036 	.word	0x20000036
 8001268:	2000012c 	.word	0x2000012c
 800126c:	200001a0 	.word	0x200001a0

08001270 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_UART_ErrorCallback+0x2c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d105      	bne.n	800128e <HAL_UART_ErrorCallback+0x1e>
	{
		//if error set rx flag to true to exit while loop
		TILT_RX_FLAG = true;
 8001282:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <HAL_UART_ErrorCallback+0x30>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
		TILT_ERROR_FLAG = true;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_UART_ErrorCallback+0x34>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
	}
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40013800 	.word	0x40013800
 80012a0:	20000034 	.word	0x20000034
 80012a4:	20000035 	.word	0x20000035

080012a8 <tilt_helper_char_to_int>:
  * 		by TILT-05 sensor to int.
  * @param start Start index of section in TILT_RX_DATA string to be converted (int)
  * @param unit_size Size of character section in TILT_RX_DATA string (int)
  * @retval int16_t Character section converted to int16_t
  */
int16_t tilt_helper_char_to_int(int start, int size, int unit_size){
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
	int16_t temp = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	82fb      	strh	r3, [r7, #22]
	for(int i=start + 1; i<size + start; i++){
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	e01f      	b.n	8001300 <tilt_helper_char_to_int+0x58>
		if(TILT_RX_DATA[i] == '.'){
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <tilt_helper_char_to_int+0x90>)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4413      	add	r3, r2
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b2e      	cmp	r3, #46	; 0x2e
 80012ca:	d016      	beq.n	80012fa <tilt_helper_char_to_int+0x52>
			//skip decimal dot
		}else{
			temp += (TILT_RX_DATA[i] - '0') * unit_size;
 80012cc:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <tilt_helper_char_to_int+0x90>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4413      	add	r3, r2
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	3b30      	subs	r3, #48	; 0x30
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	fb12 f303 	smulbb	r3, r2, r3
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	8afb      	ldrh	r3, [r7, #22]
 80012e4:	4413      	add	r3, r2
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	82fb      	strh	r3, [r7, #22]
			unit_size /= 10;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <tilt_helper_char_to_int+0x94>)
 80012ee:	fb82 1203 	smull	r1, r2, r2, r3
 80012f2:	1092      	asrs	r2, r2, #2
 80012f4:	17db      	asrs	r3, r3, #31
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	607b      	str	r3, [r7, #4]
	for(int i=start + 1; i<size + start; i++){
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	3301      	adds	r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbd9      	blt.n	80012c0 <tilt_helper_char_to_int+0x18>
		}
	}
	temp = TILT_RX_DATA[start] == '-'? temp * (-1) : temp;
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <tilt_helper_char_to_int+0x90>)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b2d      	cmp	r3, #45	; 0x2d
 8001316:	d104      	bne.n	8001322 <tilt_helper_char_to_int+0x7a>
 8001318:	8afb      	ldrh	r3, [r7, #22]
 800131a:	425b      	negs	r3, r3
 800131c:	b29b      	uxth	r3, r3
 800131e:	b21b      	sxth	r3, r3
 8001320:	e001      	b.n	8001326 <tilt_helper_char_to_int+0x7e>
 8001322:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001326:	82fb      	strh	r3, [r7, #22]
	return temp;
 8001328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800132c:	4618      	mov	r0, r3
 800132e:	371c      	adds	r7, #28
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20000294 	.word	0x20000294
 800133c:	66666667 	.word	0x66666667

08001340 <hexchar2int>:
uint8_t hexchar2int(char ch)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
    if (ch >= '0' && ch <= '9')
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2b2f      	cmp	r3, #47	; 0x2f
 800134e:	d906      	bls.n	800135e <hexchar2int+0x1e>
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b39      	cmp	r3, #57	; 0x39
 8001354:	d803      	bhi.n	800135e <hexchar2int+0x1e>
        return ch - '0';
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	3b30      	subs	r3, #48	; 0x30
 800135a:	b2db      	uxtb	r3, r3
 800135c:	e014      	b.n	8001388 <hexchar2int+0x48>
    if (ch >= 'A' && ch <= 'F')
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b40      	cmp	r3, #64	; 0x40
 8001362:	d906      	bls.n	8001372 <hexchar2int+0x32>
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2b46      	cmp	r3, #70	; 0x46
 8001368:	d803      	bhi.n	8001372 <hexchar2int+0x32>
        return ch - 'A' + 10;
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	3b37      	subs	r3, #55	; 0x37
 800136e:	b2db      	uxtb	r3, r3
 8001370:	e00a      	b.n	8001388 <hexchar2int+0x48>
    if (ch >= 'a' && ch <= 'f')
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	2b60      	cmp	r3, #96	; 0x60
 8001376:	d906      	bls.n	8001386 <hexchar2int+0x46>
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2b66      	cmp	r3, #102	; 0x66
 800137c:	d803      	bhi.n	8001386 <hexchar2int+0x46>
        return ch - 'a' + 10;
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	3b57      	subs	r3, #87	; 0x57
 8001382:	b2db      	uxtb	r3, r3
 8001384:	e000      	b.n	8001388 <hexchar2int+0x48>
    return 16;
 8001386:	2310      	movs	r3, #16
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <setup_temperature_sensor>:
  * @brief Setup Temperature Sensor Function
  * @note Function used to set TMP117 to shutdown mode on startup.
  * @param None
  * @retval bool Status
  */
bool setup_temperature_sensor(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af02      	add	r7, sp, #8
	//1.5ms wait after startup
	HAL_Delay(50);
 800139a:	2032      	movs	r0, #50	; 0x32
 800139c:	f001 fa2e 	bl	80027fc <HAL_Delay>
	uint8_t rec_buf[2];

	HAL_StatusTypeDef HAL_temperature_ret;

	//Fill pointer register with device id reg address
	uint16_t id_reg = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	81fb      	strh	r3, [r7, #14]
	cmd_buf[0] = TMP117_DEVICE_ID_REG;
 80013a4:	230f      	movs	r3, #15
 80013a6:	713b      	strb	r3, [r7, #4]
	HAL_temperature_ret = HAL_I2C_Master_Transmit(&hi2c3, TMP117_ADDR, cmd_buf, 1, TMP117_I2C_DELAY);
 80013a8:	2390      	movs	r3, #144	; 0x90
 80013aa:	b299      	uxth	r1, r3
 80013ac:	1d3a      	adds	r2, r7, #4
 80013ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	4833      	ldr	r0, [pc, #204]	; (8001484 <setup_temperature_sensor+0xf0>)
 80013b8:	f002 ffe4 	bl	8004384 <HAL_I2C_Master_Transmit>
 80013bc:	4603      	mov	r3, r0
 80013be:	737b      	strb	r3, [r7, #13]
	//Read device id register
	HAL_temperature_ret = HAL_I2C_Master_Receive(&hi2c3, TMP117_ADDR, rec_buf, 2, TMP117_I2C_DELAY);
 80013c0:	2390      	movs	r3, #144	; 0x90
 80013c2:	b299      	uxth	r1, r3
 80013c4:	463a      	mov	r2, r7
 80013c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2302      	movs	r3, #2
 80013ce:	482d      	ldr	r0, [pc, #180]	; (8001484 <setup_temperature_sensor+0xf0>)
 80013d0:	f003 f8cc 	bl	800456c <HAL_I2C_Master_Receive>
 80013d4:	4603      	mov	r3, r0
 80013d6:	737b      	strb	r3, [r7, #13]
	id_reg = ((uint16_t)rec_buf[0] << 8 | rec_buf[1]);
 80013d8:	783b      	ldrb	r3, [r7, #0]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	787b      	ldrb	r3, [r7, #1]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	81fb      	strh	r3, [r7, #14]

	//default id reg 279 base10

	uint16_t config_reg = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	817b      	strh	r3, [r7, #10]

	//Read config register
	cmd_buf[0] = TMP117_CONFIG_REG;
 80013ec:	2301      	movs	r3, #1
 80013ee:	713b      	strb	r3, [r7, #4]
	HAL_temperature_ret = HAL_I2C_Master_Transmit(&hi2c3, TMP117_ADDR, cmd_buf, 1, TMP117_I2C_DELAY);
 80013f0:	2390      	movs	r3, #144	; 0x90
 80013f2:	b299      	uxth	r1, r3
 80013f4:	1d3a      	adds	r2, r7, #4
 80013f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	4821      	ldr	r0, [pc, #132]	; (8001484 <setup_temperature_sensor+0xf0>)
 8001400:	f002 ffc0 	bl	8004384 <HAL_I2C_Master_Transmit>
 8001404:	4603      	mov	r3, r0
 8001406:	737b      	strb	r3, [r7, #13]
	HAL_temperature_ret = HAL_I2C_Master_Receive(&hi2c3, TMP117_ADDR, rec_buf, 2, TMP117_I2C_DELAY);
 8001408:	2390      	movs	r3, #144	; 0x90
 800140a:	b299      	uxth	r1, r3
 800140c:	463a      	mov	r2, r7
 800140e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2302      	movs	r3, #2
 8001416:	481b      	ldr	r0, [pc, #108]	; (8001484 <setup_temperature_sensor+0xf0>)
 8001418:	f003 f8a8 	bl	800456c <HAL_I2C_Master_Receive>
 800141c:	4603      	mov	r3, r0
 800141e:	737b      	strb	r3, [r7, #13]
	config_reg = ((uint16_t)rec_buf[0] << 8 | rec_buf[1]);
 8001420:	783b      	ldrb	r3, [r7, #0]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	787b      	ldrb	r3, [r7, #1]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21b      	sxth	r3, r3
 800142e:	817b      	strh	r3, [r7, #10]

	//Set bit [10, 11] so that sensor can go from continuous -> shutdown mode
	config_reg |= 0x0400;
 8001430:	897b      	ldrh	r3, [r7, #10]
 8001432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001436:	817b      	strh	r3, [r7, #10]
	cmd_buf[0] = TMP117_CONFIG_REG;
 8001438:	2301      	movs	r3, #1
 800143a:	713b      	strb	r3, [r7, #4]
	cmd_buf[1] = config_reg >> 8;
 800143c:	897b      	ldrh	r3, [r7, #10]
 800143e:	0a1b      	lsrs	r3, r3, #8
 8001440:	b29b      	uxth	r3, r3
 8001442:	b2db      	uxtb	r3, r3
 8001444:	717b      	strb	r3, [r7, #5]
	cmd_buf[2] = config_reg & 0x00FF;
 8001446:	897b      	ldrh	r3, [r7, #10]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	71bb      	strb	r3, [r7, #6]
	HAL_temperature_ret = HAL_I2C_Master_Transmit(&hi2c3, TMP117_ADDR, cmd_buf, 3, TMP117_I2C_DELAY);
 800144c:	2390      	movs	r3, #144	; 0x90
 800144e:	b299      	uxth	r1, r3
 8001450:	1d3a      	adds	r2, r7, #4
 8001452:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2303      	movs	r3, #3
 800145a:	480a      	ldr	r0, [pc, #40]	; (8001484 <setup_temperature_sensor+0xf0>)
 800145c:	f002 ff92 	bl	8004384 <HAL_I2C_Master_Transmit>
 8001460:	4603      	mov	r3, r0
 8001462:	737b      	strb	r3, [r7, #13]

	if(HAL_temperature_ret == HAL_OK && id_reg == 279){
 8001464:	7b7b      	ldrb	r3, [r7, #13]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d106      	bne.n	8001478 <setup_temperature_sensor+0xe4>
 800146a:	89fb      	ldrh	r3, [r7, #14]
 800146c:	f240 1217 	movw	r2, #279	; 0x117
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <setup_temperature_sensor+0xe4>
		return true;
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <setup_temperature_sensor+0xe6>
	}
	return false;
 8001478:	2300      	movs	r3, #0

}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000007c 	.word	0x2000007c

08001488 <read_temperature_sensor>:
  * @brief Read Temperature Sensor Function
  * @note	Function used to read raw temperature from TMP117.
  * @param None
  * @retval TEMPERATURE_DATA Raw sensor data
  */
TEMPERATURE_DATA read_temperature_sensor(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af02      	add	r7, sp, #8
	TEMPERATURE_DATA data;
	uint8_t cmd_buf[3];
	uint8_t rec_buf[2];

	uint16_t config_reg = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	81fb      	strh	r3, [r7, #14]

	//Read config register
	cmd_buf[0] = TMP117_CONFIG_REG;
 8001492:	2301      	movs	r3, #1
 8001494:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c3, TMP117_ADDR, cmd_buf, 1, TMP117_I2C_DELAY);
 8001496:	2390      	movs	r3, #144	; 0x90
 8001498:	b299      	uxth	r1, r3
 800149a:	f107 0208 	add.w	r2, r7, #8
 800149e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	482b      	ldr	r0, [pc, #172]	; (8001554 <read_temperature_sensor+0xcc>)
 80014a8:	f002 ff6c 	bl	8004384 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c3, TMP117_ADDR, rec_buf, 2, TMP117_I2C_DELAY);
 80014ac:	2390      	movs	r3, #144	; 0x90
 80014ae:	b299      	uxth	r1, r3
 80014b0:	1d3a      	adds	r2, r7, #4
 80014b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2302      	movs	r3, #2
 80014ba:	4826      	ldr	r0, [pc, #152]	; (8001554 <read_temperature_sensor+0xcc>)
 80014bc:	f003 f856 	bl	800456c <HAL_I2C_Master_Receive>
	config_reg = ((uint16_t)rec_buf[0] << 8 | rec_buf[1]);
 80014c0:	793b      	ldrb	r3, [r7, #4]
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b21a      	sxth	r2, r3
 80014c6:	797b      	ldrb	r3, [r7, #5]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	4313      	orrs	r3, r2
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	81fb      	strh	r3, [r7, #14]

	//Set bit [10, 11] so that sensor can perform one-shot conversion
	config_reg |= 0x0C00;
 80014d0:	89fb      	ldrh	r3, [r7, #14]
 80014d2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80014d6:	81fb      	strh	r3, [r7, #14]
	cmd_buf[0] = TMP117_CONFIG_REG;
 80014d8:	2301      	movs	r3, #1
 80014da:	723b      	strb	r3, [r7, #8]
	cmd_buf[1] = config_reg >> 8;
 80014dc:	89fb      	ldrh	r3, [r7, #14]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	727b      	strb	r3, [r7, #9]
	cmd_buf[2] = config_reg & 0x00FF;
 80014e6:	89fb      	ldrh	r3, [r7, #14]
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c3, TMP117_ADDR, cmd_buf, 3, TMP117_I2C_DELAY);
 80014ec:	2390      	movs	r3, #144	; 0x90
 80014ee:	b299      	uxth	r1, r3
 80014f0:	f107 0208 	add.w	r2, r7, #8
 80014f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2303      	movs	r3, #3
 80014fc:	4815      	ldr	r0, [pc, #84]	; (8001554 <read_temperature_sensor+0xcc>)
 80014fe:	f002 ff41 	bl	8004384 <HAL_I2C_Master_Transmit>

	//Wait for conversion to finish
	HAL_Delay(1000);
 8001502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001506:	f001 f979 	bl	80027fc <HAL_Delay>

	//Temperature register is where temperature value is stored
	cmd_buf[0] = TMP117_TEMPERATURE_REG;
 800150a:	2300      	movs	r3, #0
 800150c:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Master_Transmit(&hi2c3, TMP117_ADDR, cmd_buf, 1, TMP117_I2C_DELAY);
 800150e:	2390      	movs	r3, #144	; 0x90
 8001510:	b299      	uxth	r1, r3
 8001512:	f107 0208 	add.w	r2, r7, #8
 8001516:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <read_temperature_sensor+0xcc>)
 8001520:	f002 ff30 	bl	8004384 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c3, TMP117_ADDR, rec_buf, 2, TMP117_I2C_DELAY);
 8001524:	2390      	movs	r3, #144	; 0x90
 8001526:	b299      	uxth	r1, r3
 8001528:	1d3a      	adds	r2, r7, #4
 800152a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2302      	movs	r3, #2
 8001532:	4808      	ldr	r0, [pc, #32]	; (8001554 <read_temperature_sensor+0xcc>)
 8001534:	f003 f81a 	bl	800456c <HAL_I2C_Master_Receive>
	data.temperature = ((uint16_t)rec_buf[0] << 8 | rec_buf[1]);
 8001538:	793b      	ldrb	r3, [r7, #4]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	797b      	ldrb	r3, [r7, #5]
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21b      	sxth	r3, r3
 8001546:	81bb      	strh	r3, [r7, #12]

	return data;
 8001548:	89bb      	ldrh	r3, [r7, #12]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000007c 	.word	0x2000007c

08001558 <setup_imu_sensor>:
  * @brief Setup IMU Sensor Function
  * @note	Function used to setup MPU9250.
  * @param None
  * @retval bool Status
  */
bool setup_imu_sensor(void){
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af02      	add	r7, sp, #8
	uint8_t cmd_buf[2];
	uint8_t rec_buf[2];

	/*MAGNETOMETER DATA REGISTER READS ---- START*/

	uint8_t mag_id = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	75bb      	strb	r3, [r7, #22]
	volatile uint8_t mag_status = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	71fb      	strb	r3, [r7, #7]
	uint8_t mag_status2 = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	757b      	strb	r3, [r7, #21]
	uint8_t mag_control = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	753b      	strb	r3, [r7, #20]
	bool mag_setup_status = false;
 800156e:	2300      	movs	r3, #0
 8001570:	75fb      	strb	r3, [r7, #23]

	uint8_t icm20948_pwr_mgt_2 = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	74fb      	strb	r3, [r7, #19]
	//pwr mgt 2
	cmd_buf[0] = 0x07;
 8001576:	2307      	movs	r3, #7
 8001578:	733b      	strb	r3, [r7, #12]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, ICM20948_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 800157a:	23d0      	movs	r3, #208	; 0xd0
 800157c:	b299      	uxth	r1, r3
 800157e:	f107 020c 	add.w	r2, r7, #12
 8001582:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	4879      	ldr	r0, [pc, #484]	; (8001770 <setup_imu_sensor+0x218>)
 800158c:	f002 fefa 	bl	8004384 <HAL_I2C_Master_Transmit>
 8001590:	4603      	mov	r3, r0
 8001592:	74bb      	strb	r3, [r7, #18]
	HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, ICM20948_ADDR, rec_buf, 1, MPU9250_I2C_DELAY);
 8001594:	23d0      	movs	r3, #208	; 0xd0
 8001596:	b299      	uxth	r1, r3
 8001598:	f107 0208 	add.w	r2, r7, #8
 800159c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2301      	movs	r3, #1
 80015a4:	4872      	ldr	r0, [pc, #456]	; (8001770 <setup_imu_sensor+0x218>)
 80015a6:	f002 ffe1 	bl	800456c <HAL_I2C_Master_Receive>
 80015aa:	4603      	mov	r3, r0
 80015ac:	74bb      	strb	r3, [r7, #18]
	icm20948_pwr_mgt_2 = rec_buf[0];
 80015ae:	7a3b      	ldrb	r3, [r7, #8]
 80015b0:	74fb      	strb	r3, [r7, #19]

	//turn off gyro and accel
	cmd_buf[0] = 0x07;
 80015b2:	2307      	movs	r3, #7
 80015b4:	733b      	strb	r3, [r7, #12]
	cmd_buf[1] = icm20948_pwr_mgt_2 | 0x3F;
 80015b6:	7cfb      	ldrb	r3, [r7, #19]
 80015b8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	737b      	strb	r3, [r7, #13]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, ICM20948_ADDR, cmd_buf, 2, MPU9250_I2C_DELAY);
 80015c0:	23d0      	movs	r3, #208	; 0xd0
 80015c2:	b299      	uxth	r1, r3
 80015c4:	f107 020c 	add.w	r2, r7, #12
 80015c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	2302      	movs	r3, #2
 80015d0:	4867      	ldr	r0, [pc, #412]	; (8001770 <setup_imu_sensor+0x218>)
 80015d2:	f002 fed7 	bl	8004384 <HAL_I2C_Master_Transmit>
 80015d6:	4603      	mov	r3, r0
 80015d8:	74bb      	strb	r3, [r7, #18]

	uint8_t icm20948_pwr_mgt_1 = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	747b      	strb	r3, [r7, #17]
	//pwr mgt 1
	cmd_buf[0] = 0x06;
 80015de:	2306      	movs	r3, #6
 80015e0:	733b      	strb	r3, [r7, #12]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, ICM20948_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 80015e2:	23d0      	movs	r3, #208	; 0xd0
 80015e4:	b299      	uxth	r1, r3
 80015e6:	f107 020c 	add.w	r2, r7, #12
 80015ea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	2301      	movs	r3, #1
 80015f2:	485f      	ldr	r0, [pc, #380]	; (8001770 <setup_imu_sensor+0x218>)
 80015f4:	f002 fec6 	bl	8004384 <HAL_I2C_Master_Transmit>
 80015f8:	4603      	mov	r3, r0
 80015fa:	74bb      	strb	r3, [r7, #18]
	HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, ICM20948_ADDR, rec_buf, 1, MPU9250_I2C_DELAY);
 80015fc:	23d0      	movs	r3, #208	; 0xd0
 80015fe:	b299      	uxth	r1, r3
 8001600:	f107 0208 	add.w	r2, r7, #8
 8001604:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2301      	movs	r3, #1
 800160c:	4858      	ldr	r0, [pc, #352]	; (8001770 <setup_imu_sensor+0x218>)
 800160e:	f002 ffad 	bl	800456c <HAL_I2C_Master_Receive>
 8001612:	4603      	mov	r3, r0
 8001614:	74bb      	strb	r3, [r7, #18]
	icm20948_pwr_mgt_1 = rec_buf[0];
 8001616:	7a3b      	ldrb	r3, [r7, #8]
 8001618:	747b      	strb	r3, [r7, #17]

	//turn on sensor by clearing sleep bit
	cmd_buf[0] = 0x06;
 800161a:	2306      	movs	r3, #6
 800161c:	733b      	strb	r3, [r7, #12]
	cmd_buf[1] = icm20948_pwr_mgt_1 & 0xBF;
 800161e:	7c7b      	ldrb	r3, [r7, #17]
 8001620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001624:	b2db      	uxtb	r3, r3
 8001626:	737b      	strb	r3, [r7, #13]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, ICM20948_ADDR, cmd_buf, 2, MPU9250_I2C_DELAY);
 8001628:	23d0      	movs	r3, #208	; 0xd0
 800162a:	b299      	uxth	r1, r3
 800162c:	f107 020c 	add.w	r2, r7, #12
 8001630:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2302      	movs	r3, #2
 8001638:	484d      	ldr	r0, [pc, #308]	; (8001770 <setup_imu_sensor+0x218>)
 800163a:	f002 fea3 	bl	8004384 <HAL_I2C_Master_Transmit>
 800163e:	4603      	mov	r3, r0
 8001640:	74bb      	strb	r3, [r7, #18]

	uint8_t icm20948_int_pin_cfg = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	743b      	strb	r3, [r7, #16]
	//Read int_pin_cfg register on icm20948
	cmd_buf[0] = ICM20948_INT_PIN_CFG;
 8001646:	230f      	movs	r3, #15
 8001648:	733b      	strb	r3, [r7, #12]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, ICM20948_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 800164a:	23d0      	movs	r3, #208	; 0xd0
 800164c:	b299      	uxth	r1, r3
 800164e:	f107 020c 	add.w	r2, r7, #12
 8001652:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2301      	movs	r3, #1
 800165a:	4845      	ldr	r0, [pc, #276]	; (8001770 <setup_imu_sensor+0x218>)
 800165c:	f002 fe92 	bl	8004384 <HAL_I2C_Master_Transmit>
 8001660:	4603      	mov	r3, r0
 8001662:	74bb      	strb	r3, [r7, #18]
	HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, ICM20948_ADDR, rec_buf, 1, MPU9250_I2C_DELAY);
 8001664:	23d0      	movs	r3, #208	; 0xd0
 8001666:	b299      	uxth	r1, r3
 8001668:	f107 0208 	add.w	r2, r7, #8
 800166c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	2301      	movs	r3, #1
 8001674:	483e      	ldr	r0, [pc, #248]	; (8001770 <setup_imu_sensor+0x218>)
 8001676:	f002 ff79 	bl	800456c <HAL_I2C_Master_Receive>
 800167a:	4603      	mov	r3, r0
 800167c:	74bb      	strb	r3, [r7, #18]

	icm20948_int_pin_cfg = rec_buf[0];
 800167e:	7a3b      	ldrb	r3, [r7, #8]
 8001680:	743b      	strb	r3, [r7, #16]

	//Set BYPASS bit to high to allow I2C communication from mcu to magnetometer
	cmd_buf[0] = ICM20948_INT_PIN_CFG;
 8001682:	230f      	movs	r3, #15
 8001684:	733b      	strb	r3, [r7, #12]
	cmd_buf[1] = icm20948_int_pin_cfg | 0x02;
 8001686:	7c3b      	ldrb	r3, [r7, #16]
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	b2db      	uxtb	r3, r3
 800168e:	737b      	strb	r3, [r7, #13]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, ICM20948_ADDR, cmd_buf, 2, MPU9250_I2C_DELAY);
 8001690:	23d0      	movs	r3, #208	; 0xd0
 8001692:	b299      	uxth	r1, r3
 8001694:	f107 020c 	add.w	r2, r7, #12
 8001698:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2302      	movs	r3, #2
 80016a0:	4833      	ldr	r0, [pc, #204]	; (8001770 <setup_imu_sensor+0x218>)
 80016a2:	f002 fe6f 	bl	8004384 <HAL_I2C_Master_Transmit>
 80016a6:	4603      	mov	r3, r0
 80016a8:	74bb      	strb	r3, [r7, #18]

	//Read Device ID, default 0x09
	cmd_buf[0] = 0x01;
 80016aa:	2301      	movs	r3, #1
 80016ac:	733b      	strb	r3, [r7, #12]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 80016ae:	2318      	movs	r3, #24
 80016b0:	b299      	uxth	r1, r3
 80016b2:	f107 020c 	add.w	r2, r7, #12
 80016b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	2301      	movs	r3, #1
 80016be:	482c      	ldr	r0, [pc, #176]	; (8001770 <setup_imu_sensor+0x218>)
 80016c0:	f002 fe60 	bl	8004384 <HAL_I2C_Master_Transmit>
 80016c4:	4603      	mov	r3, r0
 80016c6:	74bb      	strb	r3, [r7, #18]
	HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, AK09916_ADDR, rec_buf, 1, MPU9250_I2C_DELAY);
 80016c8:	2318      	movs	r3, #24
 80016ca:	b299      	uxth	r1, r3
 80016cc:	f107 0208 	add.w	r2, r7, #8
 80016d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	4825      	ldr	r0, [pc, #148]	; (8001770 <setup_imu_sensor+0x218>)
 80016da:	f002 ff47 	bl	800456c <HAL_I2C_Master_Receive>
 80016de:	4603      	mov	r3, r0
 80016e0:	74bb      	strb	r3, [r7, #18]
	mag_id = rec_buf[0];
 80016e2:	7a3b      	ldrb	r3, [r7, #8]
 80016e4:	75bb      	strb	r3, [r7, #22]

	//Read CNTL2 register
	cmd_buf[0] = ICM20948_MAG_CNTL2;
 80016e6:	2331      	movs	r3, #49	; 0x31
 80016e8:	733b      	strb	r3, [r7, #12]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 80016ea:	2318      	movs	r3, #24
 80016ec:	b299      	uxth	r1, r3
 80016ee:	f107 020c 	add.w	r2, r7, #12
 80016f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2301      	movs	r3, #1
 80016fa:	481d      	ldr	r0, [pc, #116]	; (8001770 <setup_imu_sensor+0x218>)
 80016fc:	f002 fe42 	bl	8004384 <HAL_I2C_Master_Transmit>
 8001700:	4603      	mov	r3, r0
 8001702:	74bb      	strb	r3, [r7, #18]
	HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, AK09916_ADDR, rec_buf, 1, MPU9250_I2C_DELAY);
 8001704:	2318      	movs	r3, #24
 8001706:	b299      	uxth	r1, r3
 8001708:	f107 0208 	add.w	r2, r7, #8
 800170c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2301      	movs	r3, #1
 8001714:	4816      	ldr	r0, [pc, #88]	; (8001770 <setup_imu_sensor+0x218>)
 8001716:	f002 ff29 	bl	800456c <HAL_I2C_Master_Receive>
 800171a:	4603      	mov	r3, r0
 800171c:	74bb      	strb	r3, [r7, #18]
	mag_control = rec_buf[0];
 800171e:	7a3b      	ldrb	r3, [r7, #8]
 8001720:	753b      	strb	r3, [r7, #20]

	//Wait at least 100microseconds before switching to single measurement mode
	HAL_Delay(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f001 f86a 	bl	80027fc <HAL_Delay>

	//Set power down mode (xxxx0000 == power down mode)
	cmd_buf[0] = ICM20948_MAG_CNTL2;
 8001728:	2331      	movs	r3, #49	; 0x31
 800172a:	733b      	strb	r3, [r7, #12]
	cmd_buf[1] = (mag_control & 0x0) & 0xE;
 800172c:	2300      	movs	r3, #0
 800172e:	737b      	strb	r3, [r7, #13]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 2, MPU9250_I2C_DELAY);
 8001730:	2318      	movs	r3, #24
 8001732:	b299      	uxth	r1, r3
 8001734:	f107 020c 	add.w	r2, r7, #12
 8001738:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2302      	movs	r3, #2
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <setup_imu_sensor+0x218>)
 8001742:	f002 fe1f 	bl	8004384 <HAL_I2C_Master_Transmit>
 8001746:	4603      	mov	r3, r0
 8001748:	74bb      	strb	r3, [r7, #18]

	if(mag_id == 0x09 && HAL_imu_ret == HAL_OK){
 800174a:	7dbb      	ldrb	r3, [r7, #22]
 800174c:	2b09      	cmp	r3, #9
 800174e:	d104      	bne.n	800175a <setup_imu_sensor+0x202>
 8001750:	7cbb      	ldrb	r3, [r7, #18]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <setup_imu_sensor+0x202>
		mag_setup_status = true;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
		accel_setup_status = true;
	}
	*/

	//if(mag_setup_status && gyro_setup_status && accel_setup_status){
	if(mag_setup_status){
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <setup_imu_sensor+0x20c>
		return true;
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <setup_imu_sensor+0x20e>
	}
	return false;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000007c 	.word	0x2000007c

08001774 <read_imu_sensor>:
  * @brief Read IMU Sensor Function
  * @note	Function used to read raw gyro, accelerometer, magnetometer values from MPU9250.
  * @param None
  * @retval IMU_DATA Raw sensor data
  */
IMU_DATA read_imu_sensor(void){
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	b08e      	sub	sp, #56	; 0x38
 8001778:	af02      	add	r7, sp, #8
 800177a:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buf[2];
	uint8_t rec_buf[2];

	/*MAGNETOMETER DATA REGISTER READS ---- START*/

	int16_t mag_read_x = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t mag_read_y = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	85bb      	strh	r3, [r7, #44]	; 0x2c
	int16_t mag_read_z = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t mag_id = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	volatile uint8_t mag_status = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	72fb      	strb	r3, [r7, #11]
	uint8_t mag_status2 = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t mag_control = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//Read CNTL1 register
	cmd_buf[0] = ICM20948_MAG_CNTL2;
 800179e:	2331      	movs	r3, #49	; 0x31
 80017a0:	743b      	strb	r3, [r7, #16]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 80017a2:	2318      	movs	r3, #24
 80017a4:	b299      	uxth	r1, r3
 80017a6:	f107 0210 	add.w	r2, r7, #16
 80017aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2301      	movs	r3, #1
 80017b2:	4890      	ldr	r0, [pc, #576]	; (80019f4 <read_imu_sensor+0x280>)
 80017b4:	f002 fde6 	bl	8004384 <HAL_I2C_Master_Transmit>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, AK09916_ADDR, rec_buf, 1, MPU9250_I2C_DELAY);
 80017be:	2318      	movs	r3, #24
 80017c0:	b299      	uxth	r1, r3
 80017c2:	f107 020c 	add.w	r2, r7, #12
 80017c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2301      	movs	r3, #1
 80017ce:	4889      	ldr	r0, [pc, #548]	; (80019f4 <read_imu_sensor+0x280>)
 80017d0:	f002 fecc 	bl	800456c <HAL_I2C_Master_Receive>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	mag_control = rec_buf[0];
 80017da:	7b3b      	ldrb	r3, [r7, #12]
 80017dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//Set single measurement mode (xxxx0001 == single measurement mode)
	cmd_buf[0] = ICM20948_MAG_CNTL2;
 80017e0:	2331      	movs	r3, #49	; 0x31
 80017e2:	743b      	strb	r3, [r7, #16]
	cmd_buf[1] = (mag_control & 0x0) | 0x1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	747b      	strb	r3, [r7, #17]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 2, MPU9250_I2C_DELAY);
 80017e8:	2318      	movs	r3, #24
 80017ea:	b299      	uxth	r1, r3
 80017ec:	f107 0210 	add.w	r2, r7, #16
 80017f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	2302      	movs	r3, #2
 80017f8:	487e      	ldr	r0, [pc, #504]	; (80019f4 <read_imu_sensor+0x280>)
 80017fa:	f002 fdc3 	bl	8004384 <HAL_I2C_Master_Transmit>
 80017fe:	4603      	mov	r3, r0
 8001800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	//Read CNTL1 register
	cmd_buf[0] = ICM20948_MAG_CNTL2;
 8001804:	2331      	movs	r3, #49	; 0x31
 8001806:	743b      	strb	r3, [r7, #16]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 8001808:	2318      	movs	r3, #24
 800180a:	b299      	uxth	r1, r3
 800180c:	f107 0210 	add.w	r2, r7, #16
 8001810:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	4876      	ldr	r0, [pc, #472]	; (80019f4 <read_imu_sensor+0x280>)
 800181a:	f002 fdb3 	bl	8004384 <HAL_I2C_Master_Transmit>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, AK09916_ADDR, rec_buf, 1, MPU9250_I2C_DELAY);
 8001824:	2318      	movs	r3, #24
 8001826:	b299      	uxth	r1, r3
 8001828:	f107 020c 	add.w	r2, r7, #12
 800182c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2301      	movs	r3, #1
 8001834:	486f      	ldr	r0, [pc, #444]	; (80019f4 <read_imu_sensor+0x280>)
 8001836:	f002 fe99 	bl	800456c <HAL_I2C_Master_Receive>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	mag_control = rec_buf[0];
 8001840:	7b3b      	ldrb	r3, [r7, #12]
 8001842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	cmd_buf[0] = ICM20948_MAG_STATUS;
 8001846:	2310      	movs	r3, #16
 8001848:	743b      	strb	r3, [r7, #16]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 800184a:	2318      	movs	r3, #24
 800184c:	b299      	uxth	r1, r3
 800184e:	f107 0210 	add.w	r2, r7, #16
 8001852:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2301      	movs	r3, #1
 800185a:	4866      	ldr	r0, [pc, #408]	; (80019f4 <read_imu_sensor+0x280>)
 800185c:	f002 fd92 	bl	8004384 <HAL_I2C_Master_Transmit>
 8001860:	4603      	mov	r3, r0
 8001862:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, AK09916_ADDR, rec_buf, 1, MPU9250_I2C_DELAY);
 8001866:	2318      	movs	r3, #24
 8001868:	b299      	uxth	r1, r3
 800186a:	f107 020c 	add.w	r2, r7, #12
 800186e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2301      	movs	r3, #1
 8001876:	485f      	ldr	r0, [pc, #380]	; (80019f4 <read_imu_sensor+0x280>)
 8001878:	f002 fe78 	bl	800456c <HAL_I2C_Master_Receive>
 800187c:	4603      	mov	r3, r0
 800187e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	mag_status = rec_buf[0];
 8001882:	7b3b      	ldrb	r3, [r7, #12]
 8001884:	72fb      	strb	r3, [r7, #11]

	if(mag_status & 0x1){
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d06e      	beq.n	8001970 <read_imu_sensor+0x1fc>
		//Data ready
		//otherwise data has already been read

		//LittleEndian
		cmd_buf[0] = ICM20948_MAG_XOUT_L;
 8001892:	2311      	movs	r3, #17
 8001894:	743b      	strb	r3, [r7, #16]
		HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 8001896:	2318      	movs	r3, #24
 8001898:	b299      	uxth	r1, r3
 800189a:	f107 0210 	add.w	r2, r7, #16
 800189e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	4853      	ldr	r0, [pc, #332]	; (80019f4 <read_imu_sensor+0x280>)
 80018a8:	f002 fd6c 	bl	8004384 <HAL_I2C_Master_Transmit>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, AK09916_ADDR, rec_buf, 2, MPU9250_I2C_DELAY);
 80018b2:	2318      	movs	r3, #24
 80018b4:	b299      	uxth	r1, r3
 80018b6:	f107 020c 	add.w	r2, r7, #12
 80018ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2302      	movs	r3, #2
 80018c2:	484c      	ldr	r0, [pc, #304]	; (80019f4 <read_imu_sensor+0x280>)
 80018c4:	f002 fe52 	bl	800456c <HAL_I2C_Master_Receive>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mag_read_x = (rec_buf[1] << 8) | rec_buf[0];
 80018ce:	7b7b      	ldrb	r3, [r7, #13]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	7b3b      	ldrb	r3, [r7, #12]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	4313      	orrs	r3, r2
 80018da:	85fb      	strh	r3, [r7, #46]	; 0x2e

		cmd_buf[0] = ICM20948_MAG_YOUT_L;
 80018dc:	2313      	movs	r3, #19
 80018de:	743b      	strb	r3, [r7, #16]
		HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 80018e0:	2318      	movs	r3, #24
 80018e2:	b299      	uxth	r1, r3
 80018e4:	f107 0210 	add.w	r2, r7, #16
 80018e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2301      	movs	r3, #1
 80018f0:	4840      	ldr	r0, [pc, #256]	; (80019f4 <read_imu_sensor+0x280>)
 80018f2:	f002 fd47 	bl	8004384 <HAL_I2C_Master_Transmit>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, AK09916_ADDR, rec_buf, 2, MPU9250_I2C_DELAY);
 80018fc:	2318      	movs	r3, #24
 80018fe:	b299      	uxth	r1, r3
 8001900:	f107 020c 	add.w	r2, r7, #12
 8001904:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2302      	movs	r3, #2
 800190c:	4839      	ldr	r0, [pc, #228]	; (80019f4 <read_imu_sensor+0x280>)
 800190e:	f002 fe2d 	bl	800456c <HAL_I2C_Master_Receive>
 8001912:	4603      	mov	r3, r0
 8001914:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mag_read_y = (rec_buf[1] << 8) | rec_buf[0];
 8001918:	7b7b      	ldrb	r3, [r7, #13]
 800191a:	021b      	lsls	r3, r3, #8
 800191c:	b21a      	sxth	r2, r3
 800191e:	7b3b      	ldrb	r3, [r7, #12]
 8001920:	b21b      	sxth	r3, r3
 8001922:	4313      	orrs	r3, r2
 8001924:	85bb      	strh	r3, [r7, #44]	; 0x2c

		cmd_buf[0] = ICM20948_MAG_ZOUT_L;
 8001926:	2315      	movs	r3, #21
 8001928:	743b      	strb	r3, [r7, #16]
		HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 800192a:	2318      	movs	r3, #24
 800192c:	b299      	uxth	r1, r3
 800192e:	f107 0210 	add.w	r2, r7, #16
 8001932:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2301      	movs	r3, #1
 800193a:	482e      	ldr	r0, [pc, #184]	; (80019f4 <read_imu_sensor+0x280>)
 800193c:	f002 fd22 	bl	8004384 <HAL_I2C_Master_Transmit>
 8001940:	4603      	mov	r3, r0
 8001942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, AK09916_ADDR, rec_buf, 2, MPU9250_I2C_DELAY);
 8001946:	2318      	movs	r3, #24
 8001948:	b299      	uxth	r1, r3
 800194a:	f107 020c 	add.w	r2, r7, #12
 800194e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2302      	movs	r3, #2
 8001956:	4827      	ldr	r0, [pc, #156]	; (80019f4 <read_imu_sensor+0x280>)
 8001958:	f002 fe08 	bl	800456c <HAL_I2C_Master_Receive>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mag_read_z = (rec_buf[1] << 8) | rec_buf[0];
 8001962:	7b7b      	ldrb	r3, [r7, #13]
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	b21a      	sxth	r2, r3
 8001968:	7b3b      	ldrb	r3, [r7, #12]
 800196a:	b21b      	sxth	r3, r3
 800196c:	4313      	orrs	r3, r2
 800196e:	857b      	strh	r3, [r7, #42]	; 0x2a
	}

	//Read Status Register 2 (ST2) to signal end of read
	cmd_buf[0] = ICM20948_MAG_STATUS2;
 8001970:	2318      	movs	r3, #24
 8001972:	743b      	strb	r3, [r7, #16]
	HAL_imu_ret = HAL_I2C_Master_Transmit(&hi2c3, AK09916_ADDR, cmd_buf, 1, MPU9250_I2C_DELAY);
 8001974:	2318      	movs	r3, #24
 8001976:	b299      	uxth	r1, r3
 8001978:	f107 0210 	add.w	r2, r7, #16
 800197c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2301      	movs	r3, #1
 8001984:	481b      	ldr	r0, [pc, #108]	; (80019f4 <read_imu_sensor+0x280>)
 8001986:	f002 fcfd 	bl	8004384 <HAL_I2C_Master_Transmit>
 800198a:	4603      	mov	r3, r0
 800198c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	HAL_imu_ret = HAL_I2C_Master_Receive(&hi2c3, AK09916_ADDR, rec_buf, 1, MPU9250_I2C_DELAY);
 8001990:	2318      	movs	r3, #24
 8001992:	b299      	uxth	r1, r3
 8001994:	f107 020c 	add.w	r2, r7, #12
 8001998:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2301      	movs	r3, #1
 80019a0:	4814      	ldr	r0, [pc, #80]	; (80019f4 <read_imu_sensor+0x280>)
 80019a2:	f002 fde3 	bl	800456c <HAL_I2C_Master_Receive>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	mag_status2 = rec_buf[0];
 80019ac:	7b3b      	ldrb	r3, [r7, #12]
 80019ae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	data.mag_x = mag_read_x;
 80019b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019b4:	843b      	strh	r3, [r7, #32]
	data.mag_y = mag_read_y;
 80019b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019b8:	847b      	strh	r3, [r7, #34]	; 0x22
	data.mag_z = mag_read_z;
 80019ba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019bc:	84bb      	strh	r3, [r7, #36]	; 0x24

	/*MAGNETOMETER DATA REGISTER READS ---- END*/

	/*GYROSCOPE DATA REGISTER READS ---- START*/

	data.gyro_x = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	837b      	strh	r3, [r7, #26]
	data.gyro_y = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	83bb      	strh	r3, [r7, #28]
	data.gyro_z = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	83fb      	strh	r3, [r7, #30]
	*/
	/*GYROSCOPE DATA REGISTER READS ---- END*/

	/*ACCELEROMETER DATA REGISTER READS ---- START*/

	data.accel_x = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	82bb      	strh	r3, [r7, #20]
	data.accel_y = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	82fb      	strh	r3, [r7, #22]
	data.accel_z = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	833b      	strh	r3, [r7, #24]
	data.accel_z = accel_read_z;
	*/

	/*ACCELEROMETER DATA REGISTER READS ---- END*/

	return data;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	461d      	mov	r5, r3
 80019da:	f107 0414 	add.w	r4, r7, #20
 80019de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e0:	6028      	str	r0, [r5, #0]
 80019e2:	6069      	str	r1, [r5, #4]
 80019e4:	60aa      	str	r2, [r5, #8]
 80019e6:	60eb      	str	r3, [r5, #12]
 80019e8:	8823      	ldrh	r3, [r4, #0]
 80019ea:	822b      	strh	r3, [r5, #16]
}
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	3730      	adds	r7, #48	; 0x30
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}
 80019f4:	2000007c 	.word	0x2000007c

080019f8 <read_tilt_sensor>:
  * @brief Read Tilt Sensor Function
  * @note	Function used to read raw accelerometer, inclinometer values from TILT-05 sensor.
  * @param None
  * @retval TILT_DATA Raw sensor data
  */
TILT_DATA read_tilt_sensor(void){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	TILT_DATA data;
	HAL_StatusTypeDef ret_status;
	char cmd_buf[10];

	data.accel_x = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	833b      	strh	r3, [r7, #24]
	data.accel_y = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	837b      	strh	r3, [r7, #26]
	data.accel_z = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	83bb      	strh	r3, [r7, #28]
	data.pitch_x = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	83fb      	strh	r3, [r7, #30]
	data.roll_y = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	843b      	strh	r3, [r7, #32]

	//This command turns on single inclinometer data output
	//This out put is based on last sensor position, must call twice to get real-time data
	strcpy((char*)cmd_buf, "[1MIS\r");
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4a50      	ldr	r2, [pc, #320]	; (8001b5c <read_tilt_sensor+0x164>)
 8001a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a1e:	6018      	str	r0, [r3, #0]
 8001a20:	3304      	adds	r3, #4
 8001a22:	8019      	strh	r1, [r3, #0]
 8001a24:	3302      	adds	r3, #2
 8001a26:	0c0a      	lsrs	r2, r1, #16
 8001a28:	701a      	strb	r2, [r3, #0]
	ret_status = HAL_UART_Transmit(&huart1, cmd_buf, strlen((char*)cmd_buf), TILT_UART_DELAY);
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fbcc 	bl	80001cc <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f107 010c 	add.w	r1, r7, #12
 8001a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a40:	4847      	ldr	r0, [pc, #284]	; (8001b60 <read_tilt_sensor+0x168>)
 8001a42:	f005 fe4b 	bl	80076dc <HAL_UART_Transmit>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	TILT_RX_FLAG = false;
 8001a4c:	4b45      	ldr	r3, [pc, #276]	; (8001b64 <read_tilt_sensor+0x16c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]

	ret_status = HAL_UART_Receive_IT(&huart1, TILT_RX_BUF, 1);
 8001a52:	2201      	movs	r2, #1
 8001a54:	4944      	ldr	r1, [pc, #272]	; (8001b68 <read_tilt_sensor+0x170>)
 8001a56:	4842      	ldr	r0, [pc, #264]	; (8001b60 <read_tilt_sensor+0x168>)
 8001a58:	f005 fed4 	bl	8007804 <HAL_UART_Receive_IT>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	//Wait for flag to be set by interrupt receive completing
	while(!TILT_RX_FLAG){
 8001a62:	bf00      	nop
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <read_tilt_sensor+0x16c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f7      	bne.n	8001a64 <read_tilt_sensor+0x6c>
	}

	//check data validity
	uint8_t chksum = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t top_4bit_of_byte = hexchar2int(TILT_CHKSUM_RETREIVED[0]);
 8001a7a:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <read_tilt_sensor+0x174>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc5e 	bl	8001340 <hexchar2int>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t bot_4bit_of_byte = hexchar2int(TILT_CHKSUM_RETREIVED[1]);
 8001a8a:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <read_tilt_sensor+0x174>)
 8001a8c:	785b      	ldrb	r3, [r3, #1]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fc56 	bl	8001340 <hexchar2int>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(top_4bit_of_byte >= 16 || bot_4bit_of_byte >= 16){
 8001a9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a9e:	2b0f      	cmp	r3, #15
 8001aa0:	d803      	bhi.n	8001aaa <read_tilt_sensor+0xb2>
 8001aa2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	d909      	bls.n	8001abe <read_tilt_sensor+0xc6>
		return data;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	461a      	mov	r2, r3
 8001aae:	f107 0318 	add.w	r3, r7, #24
 8001ab2:	cb03      	ldmia	r3!, {r0, r1}
 8001ab4:	6010      	str	r0, [r2, #0]
 8001ab6:	6051      	str	r1, [r2, #4]
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	8113      	strh	r3, [r2, #8]
 8001abc:	e04a      	b.n	8001b54 <read_tilt_sensor+0x15c>
	}
	chksum = top_4bit_of_byte << 4 | bot_4bit_of_byte;
 8001abe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	b25a      	sxtb	r2, r3
 8001ac6:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	if(chksum != TILT_CHKSUM){
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <read_tilt_sensor+0x178>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d009      	beq.n	8001af2 <read_tilt_sensor+0xfa>
		return data;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f107 0318 	add.w	r3, r7, #24
 8001ae6:	cb03      	ldmia	r3!, {r0, r1}
 8001ae8:	6010      	str	r0, [r2, #0]
 8001aea:	6051      	str	r1, [r2, #4]
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	8113      	strh	r3, [r2, #8]
 8001af0:	e030      	b.n	8001b54 <read_tilt_sensor+0x15c>
	}

	data.accel_x = tilt_helper_char_to_int(7,5,1000);
 8001af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af6:	2105      	movs	r1, #5
 8001af8:	2007      	movs	r0, #7
 8001afa:	f7ff fbd5 	bl	80012a8 <tilt_helper_char_to_int>
 8001afe:	4603      	mov	r3, r0
 8001b00:	833b      	strh	r3, [r7, #24]
	data.accel_y = tilt_helper_char_to_int(13,5,1000);
 8001b02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b06:	2105      	movs	r1, #5
 8001b08:	200d      	movs	r0, #13
 8001b0a:	f7ff fbcd 	bl	80012a8 <tilt_helper_char_to_int>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	837b      	strh	r3, [r7, #26]
	data.accel_z = tilt_helper_char_to_int(19,5,1000);
 8001b12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b16:	2105      	movs	r1, #5
 8001b18:	2013      	movs	r0, #19
 8001b1a:	f7ff fbc5 	bl	80012a8 <tilt_helper_char_to_int>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	83bb      	strh	r3, [r7, #28]
	data.pitch_x = tilt_helper_char_to_int(25,6,1000);
 8001b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b26:	2106      	movs	r1, #6
 8001b28:	2019      	movs	r0, #25
 8001b2a:	f7ff fbbd 	bl	80012a8 <tilt_helper_char_to_int>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	83fb      	strh	r3, [r7, #30]
	data.roll_y = tilt_helper_char_to_int(32,6,1000);
 8001b32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b36:	2106      	movs	r1, #6
 8001b38:	2020      	movs	r0, #32
 8001b3a:	f7ff fbb5 	bl	80012a8 <tilt_helper_char_to_int>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	843b      	strh	r3, [r7, #32]


	return data;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	461a      	mov	r2, r3
 8001b46:	f107 0318 	add.w	r3, r7, #24
 8001b4a:	cb03      	ldmia	r3!, {r0, r1}
 8001b4c:	6010      	str	r0, [r2, #0]
 8001b4e:	6051      	str	r1, [r2, #4]
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	8113      	strh	r3, [r2, #8]
}
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	08008c98 	.word	0x08008c98
 8001b60:	200001a0 	.word	0x200001a0
 8001b64:	20000034 	.word	0x20000034
 8001b68:	20000044 	.word	0x20000044
 8001b6c:	2000012c 	.word	0x2000012c
 8001b70:	20000036 	.word	0x20000036

08001b74 <read_conductivity_sensor>:
  * @brief Read Conductivity Sensor Function
  * @note	Function used to read raw adc values conductivity sensor.
  * @param None
  * @retval COND_DATA Raw sensor data
  */
COND_DATA read_conductivity_sensor(void){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
	COND_DATA data;

	data.result = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	83bb      	strh	r3, [r7, #28]

	// configure ADC to the correct channel
	ADC_ChannelConfTypeDef sConfig = {0};
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
 8001b8c:	615a      	str	r2, [r3, #20]

	sConfig.Channel = ADC_CHANNEL_5;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	; (8001c10 <read_conductivity_sensor+0x9c>)
 8001b90:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b92:	2306      	movs	r3, #6
 8001b94:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b9a:	237f      	movs	r3, #127	; 0x7f
 8001b9c:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	481a      	ldr	r0, [pc, #104]	; (8001c14 <read_conductivity_sensor+0xa0>)
 8001bac:	f001 fada 	bl	8003164 <HAL_ADC_ConfigChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <read_conductivity_sensor+0x46>
	{
		Error_Handler();
 8001bb6:	f000 fa89 	bl	80020cc <Error_Handler>
	}

	//Turn on PWM square waves
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4816      	ldr	r0, [pc, #88]	; (8001c18 <read_conductivity_sensor+0xa4>)
 8001bbe:	f004 fe89 	bl	80068d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001bc2:	210c      	movs	r1, #12
 8001bc4:	4814      	ldr	r0, [pc, #80]	; (8001c18 <read_conductivity_sensor+0xa4>)
 8001bc6:	f004 fe85 	bl	80068d4 <HAL_TIM_PWM_Start>

	HAL_Delay(1000);
 8001bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bce:	f000 fe15 	bl	80027fc <HAL_Delay>
	// start conversion
	HAL_ADC_Start(&hadc1);
 8001bd2:	4810      	ldr	r0, [pc, #64]	; (8001c14 <read_conductivity_sensor+0xa0>)
 8001bd4:	f001 f994 	bl	8002f00 <HAL_ADC_Start>

	// poll ADC until conversion completes - note that we should check for the success of the conversion here really
	HAL_ADC_PollForConversion(&hadc1, ADC_POLL_TIMEOUT);
 8001bd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bdc:	480d      	ldr	r0, [pc, #52]	; (8001c14 <read_conductivity_sensor+0xa0>)
 8001bde:	f001 fa25 	bl	800302c <HAL_ADC_PollForConversion>

	// get result
	data.result = HAL_ADC_GetValue(&hadc1);
 8001be2:	480c      	ldr	r0, [pc, #48]	; (8001c14 <read_conductivity_sensor+0xa0>)
 8001be4:	f001 fab1 	bl	800314a <HAL_ADC_GetValue>
 8001be8:	4603      	mov	r3, r0
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	83bb      	strh	r3, [r7, #28]

	// switch off ADC
	HAL_ADC_Stop(&hadc1);
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <read_conductivity_sensor+0xa0>)
 8001bf0:	f001 f9e9 	bl	8002fc6 <HAL_ADC_Stop>

	//Turn off PWM square waves
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4808      	ldr	r0, [pc, #32]	; (8001c18 <read_conductivity_sensor+0xa4>)
 8001bf8:	f004 ff4a 	bl	8006a90 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8001bfc:	210c      	movs	r1, #12
 8001bfe:	4806      	ldr	r0, [pc, #24]	; (8001c18 <read_conductivity_sensor+0xa4>)
 8001c00:	f004 ff46 	bl	8006a90 <HAL_TIM_PWM_Stop>

	return data;
 8001c04:	8bbb      	ldrh	r3, [r7, #28]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	14f00020 	.word	0x14f00020
 8001c14:	20000130 	.word	0x20000130
 8001c18:	20000248 	.word	0x20000248

08001c1c <setup_pressure_sensor>:

bool setup_pressure_sensor(void) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status = HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
 8001c24:	73fb      	strb	r3, [r7, #15]

	uint32_t trials = 2; // number of tries to connect before we give up
 8001c26:	2302      	movs	r3, #2
 8001c28:	60bb      	str	r3, [r7, #8]
	uint32_t timeout = 100; // number of millisconds to wait before we give up
 8001c2a:	2364      	movs	r3, #100	; 0x64
 8001c2c:	607b      	str	r3, [r7, #4]

	status = HAL_I2C_IsDeviceReady(&hi2c2, PRESSURE_ADDR, trials, timeout);
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	b299      	uxth	r1, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	4807      	ldr	r0, [pc, #28]	; (8001c54 <setup_pressure_sensor+0x38>)
 8001c38:	f002 fd8e 	bl	8004758 <HAL_I2C_IsDeviceReady>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK) {
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <setup_pressure_sensor+0x2e>
		return false;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <setup_pressure_sensor+0x30>
	} else {
		return true;
 8001c4a:	2301      	movs	r3, #1
	}

	return false;
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200000c8 	.word	0x200000c8

08001c58 <read_pressure_sensor>:
  * @brief Read Pressure Sensor Function
  * @note	Function used to read raw keller pressure sensor values.
  * @param None
  * @retval PRES_DATA Raw sensor data
  */
PRES_DATA read_pressure_sensor(void){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af02      	add	r7, sp, #8
	PRES_DATA data;

	data.pressure_result = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	80bb      	strh	r3, [r7, #4]

	uint8_t command_byte = 0xAC; // request measurement command
 8001c62:	23ac      	movs	r3, #172	; 0xac
 8001c64:	70fb      	strb	r3, [r7, #3]
	uint8_t pressure_received_bytes[3]; // array to store 5 received bytes from sensor
	bool pressure_okay = false;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
	// send conversion request
	HAL_I2C_Master_Transmit(&hi2c2, PRESSURE_ADDR, &command_byte, sizeof(command_byte), 500 ); // 500ms timeout
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	b299      	uxth	r1, r3
 8001c6e:	1cfa      	adds	r2, r7, #3
 8001c70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2301      	movs	r3, #1
 8001c78:	4819      	ldr	r0, [pc, #100]	; (8001ce0 <read_pressure_sensor+0x88>)
 8001c7a:	f002 fb83 	bl	8004384 <HAL_I2C_Master_Transmit>
	// wait 10ms - 8ms minimum required for result to be ready
	HAL_Delay(10);
 8001c7e:	200a      	movs	r0, #10
 8001c80:	f000 fdbc 	bl	80027fc <HAL_Delay>
	// read back results
	HAL_I2C_Master_Receive(&hi2c2, PRESSURE_ADDR, pressure_received_bytes, sizeof(pressure_received_bytes), 500); // 500ms timeout
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	b299      	uxth	r1, r3
 8001c88:	463a      	mov	r2, r7
 8001c8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2303      	movs	r3, #3
 8001c92:	4813      	ldr	r0, [pc, #76]	; (8001ce0 <read_pressure_sensor+0x88>)
 8001c94:	f002 fc6a 	bl	800456c <HAL_I2C_Master_Receive>
	// check pressure reading was okay - status byte should be 0x40 if everything is operating normally
	if (pressure_received_bytes[0] == 0x40) {
 8001c98:	783b      	ldrb	r3, [r7, #0]
 8001c9a:	2b40      	cmp	r3, #64	; 0x40
 8001c9c:	d101      	bne.n	8001ca2 <read_pressure_sensor+0x4a>
		pressure_okay = true;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	73fb      	strb	r3, [r7, #15]
	}

	uint16_t raw_result = pressure_received_bytes[1];
 8001ca2:	787b      	ldrb	r3, [r7, #1]
 8001ca4:	81bb      	strh	r3, [r7, #12]
	if (pressure_okay){
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d009      	beq.n	8001cc0 <read_pressure_sensor+0x68>
		data.pressure_result = (raw_result << 8) | pressure_received_bytes[2];
 8001cac:	89bb      	ldrh	r3, [r7, #12]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	78bb      	ldrb	r3, [r7, #2]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	80bb      	strh	r3, [r7, #4]
 8001cbe:	e001      	b.n	8001cc4 <read_pressure_sensor+0x6c>
	} else {
		data.pressure_result = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	80bb      	strh	r3, [r7, #4]
	}

	return data;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	893a      	ldrh	r2, [r7, #8]
 8001ccc:	f362 030f 	bfi	r3, r2, #0, #16
 8001cd0:	897a      	ldrh	r2, [r7, #10]
 8001cd2:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200000c8 	.word	0x200000c8

08001ce4 <setup_load_cell_sensor>:

bool setup_load_cell_sensor(void) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0

	bool begin_ok = false;
 8001cea:	2300      	movs	r3, #0
 8001cec:	71fb      	strb	r3, [r7, #7]

	begin_ok = NAU7802_begin(&hi2c2, true); // initialise sensor
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <setup_load_cell_sensor+0x20>)
 8001cf2:	f7fe fbef 	bl	80004d4 <NAU7802_begin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]



	return begin_ok;
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	200000c8 	.word	0x200000c8

08001d08 <convert_int32_t_to_three_bytes>:


// function to turn load cell readings into three bytes rather than four
// we're taking a 32 bit signed value and making a 24 bit signed value but represented as three unsigned bytes
// output_arrray a pointer to a 3-byte array of uint8_t
void convert_int32_t_to_three_bytes(int32_t input_value, uint8_t * output_array) {
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]

	*output_array = 0; // MSB
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
	*(output_array + 1) = 0; // middle byte
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
	*(output_array + 2) = 0; // LSB
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	3302      	adds	r3, #2
 8001d24:	2200      	movs	r2, #0
 8001d26:	701a      	strb	r2, [r3, #0]

	*output_array = (uint8_t)((uint32_t)(input_value & 0xFF0000) >> 16); // MSB magnitude
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	701a      	strb	r2, [r3, #0]
	*output_array = (*output_array) | ((uint32_t)(input_value & 0x8000000) >> 24); // MSB sign
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	781a      	ldrb	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	0e1b      	lsrs	r3, r3, #24
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	701a      	strb	r2, [r3, #0]
	*(output_array + 1) = (uint8_t)((uint32_t)(input_value & 0xFF00) >> 8); // middle byte
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	0a1a      	lsrs	r2, r3, #8
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3301      	adds	r3, #1
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]
	*(output_array + 2) = (uint8_t)(input_value & 0xFF); // LSB
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	3302      	adds	r3, #2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]

	return;
 8001d60:	bf00      	nop
}
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <read_battery_voltage>:

// function to read battery voltage using internal voltage reference on ADC
uint16_t read_battery_voltage() {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0

	uint16_t battery_millivolts = 0; // return value is in integer mV, so 3.6V = 3600
 8001d72:	2300      	movs	r3, #0
 8001d74:	83fb      	strh	r3, [r7, #30]
	uint16_t vref_adc_val = 0; // this is the measurement of VREF from the ADC
 8001d76:	2300      	movs	r3, #0
 8001d78:	83bb      	strh	r3, [r7, #28]

	ADC_ChannelConfTypeDef sConfig = {0};
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
 8001d88:	615a      	str	r2, [r3, #20]
	// reconfigure the ADC to read the internal voltage reference
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001d8a:	4b18      	ldr	r3, [pc, #96]	; (8001dec <read_battery_voltage+0x80>)
 8001d8c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d8e:	2306      	movs	r3, #6
 8001d90:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001d92:	2307      	movs	r3, #7
 8001d94:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4815      	ldr	r0, [pc, #84]	; (8001df0 <read_battery_voltage+0x84>)
 8001d9c:	f001 f9e2 	bl	8003164 <HAL_ADC_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <read_battery_voltage+0x3e>
	{
		Error_Handler();
 8001da6:	f000 f991 	bl	80020cc <Error_Handler>
	}

	// start ADC conversion
	HAL_ADC_Start(&hadc1);
 8001daa:	4811      	ldr	r0, [pc, #68]	; (8001df0 <read_battery_voltage+0x84>)
 8001dac:	f001 f8a8 	bl	8002f00 <HAL_ADC_Start>

	// poll ADC until conversion completes - note that we should check for the success of the conversion here really
	HAL_ADC_PollForConversion(&hadc1, ADC_POLL_TIMEOUT);
 8001db0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001db4:	480e      	ldr	r0, [pc, #56]	; (8001df0 <read_battery_voltage+0x84>)
 8001db6:	f001 f939 	bl	800302c <HAL_ADC_PollForConversion>

	// get result
	vref_adc_val = HAL_ADC_GetValue(&hadc1);
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <read_battery_voltage+0x84>)
 8001dbc:	f001 f9c5 	bl	800314a <HAL_ADC_GetValue>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	83bb      	strh	r3, [r7, #28]

	// switch off ADC
	HAL_ADC_Stop(&hadc1);
 8001dc4:	480a      	ldr	r0, [pc, #40]	; (8001df0 <read_battery_voltage+0x84>)
 8001dc6:	f001 f8fe 	bl	8002fc6 <HAL_ADC_Stop>

	// convert the ADC value to the supply voltage (VDDA/VREF+), which on Cryowurst is the raw battery voltage
	// we use this handy macro from the HAL

	battery_millivolts = __HAL_ADC_CALC_VREFANALOG_VOLTAGE ( vref_adc_val,  ADC_RESOLUTION_12B );
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <read_battery_voltage+0x88>)
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001dd4:	fb03 f202 	mul.w	r2, r3, r2
 8001dd8:	8bbb      	ldrh	r3, [r7, #28]
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	83fb      	strh	r3, [r7, #30]




	return battery_millivolts;
 8001de0:	8bfb      	ldrh	r3, [r7, #30]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	80000001 	.word	0x80000001
 8001df0:	20000130 	.word	0x20000130
 8001df4:	1fff75aa 	.word	0x1fff75aa

08001df8 <assemble_and_send_packet>:
  * @note	Function used to read peripheral sensor data (TILT-05, MPU9250, TMP117)
  * 		then send assembled data packet of raw sensor values to Radio modem.
  * @param None
  * @retval bool Status
  */
bool assemble_and_send_packet(void){
 8001df8:	b5b0      	push	{r4, r5, r7, lr}
 8001dfa:	b094      	sub	sp, #80	; 0x50
 8001dfc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef radio_ret;

	temperature_data = read_temperature_sensor();
 8001dfe:	f7ff fb43 	bl	8001488 <read_temperature_sensor>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4aa7      	ldr	r2, [pc, #668]	; (80020a4 <assemble_and_send_packet+0x2ac>)
 8001e06:	8013      	strh	r3, [r2, #0]

	imu_data = read_imu_sensor();
 8001e08:	4ca7      	ldr	r4, [pc, #668]	; (80020a8 <assemble_and_send_packet+0x2b0>)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fcb1 	bl	8001774 <read_imu_sensor>
 8001e12:	4622      	mov	r2, r4
 8001e14:	463b      	mov	r3, r7
 8001e16:	681d      	ldr	r5, [r3, #0]
 8001e18:	685c      	ldr	r4, [r3, #4]
 8001e1a:	6898      	ldr	r0, [r3, #8]
 8001e1c:	68d9      	ldr	r1, [r3, #12]
 8001e1e:	6015      	str	r5, [r2, #0]
 8001e20:	6054      	str	r4, [r2, #4]
 8001e22:	6090      	str	r0, [r2, #8]
 8001e24:	60d1      	str	r1, [r2, #12]
 8001e26:	8a1b      	ldrh	r3, [r3, #16]
 8001e28:	8213      	strh	r3, [r2, #16]

	if (tilt_sensor_connected) {
 8001e2a:	4ba0      	ldr	r3, [pc, #640]	; (80020ac <assemble_and_send_packet+0x2b4>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <assemble_and_send_packet+0x54>
		tilt_data = read_tilt_sensor();
 8001e32:	4c9f      	ldr	r4, [pc, #636]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001e34:	463b      	mov	r3, r7
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fdde 	bl	80019f8 <read_tilt_sensor>
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	463b      	mov	r3, r7
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	6010      	str	r0, [r2, #0]
 8001e46:	6051      	str	r1, [r2, #4]
 8001e48:	891b      	ldrh	r3, [r3, #8]
 8001e4a:	8113      	strh	r3, [r2, #8]
	}

	cond_data = read_conductivity_sensor();
 8001e4c:	f7ff fe92 	bl	8001b74 <read_conductivity_sensor>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4a98      	ldr	r2, [pc, #608]	; (80020b4 <assemble_and_send_packet+0x2bc>)
 8001e54:	8013      	strh	r3, [r2, #0]

	if (pressure_sensor_connected == true) {
 8001e56:	4b98      	ldr	r3, [pc, #608]	; (80020b8 <assemble_and_send_packet+0x2c0>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d008      	beq.n	8001e70 <assemble_and_send_packet+0x78>
		pres_data = read_pressure_sensor();
 8001e5e:	f7ff fefb 	bl	8001c58 <read_pressure_sensor>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b95      	ldr	r3, [pc, #596]	; (80020bc <assemble_and_send_packet+0x2c4>)
 8001e66:	4611      	mov	r1, r2
 8001e68:	8019      	strh	r1, [r3, #0]
 8001e6a:	f3c2 420f 	ubfx	r2, r2, #16, #16
 8001e6e:	805a      	strh	r2, [r3, #2]
	}
	uint16_t battery_voltage;
	battery_voltage = read_battery_voltage();
 8001e70:	f7ff ff7c 	bl	8001d6c <read_battery_voltage>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	int32_t load_cell_ch1_result = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
	int32_t load_cell_ch2_result = 0;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	64bb      	str	r3, [r7, #72]	; 0x48

	if (load_cell_connected == true) {
 8001e82:	4b8f      	ldr	r3, [pc, #572]	; (80020c0 <assemble_and_send_packet+0x2c8>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00f      	beq.n	8001eaa <assemble_and_send_packet+0xb2>
		NAU7802_setChannel(NAU7802_CHANNEL_1); // make sure we have Channel 1 selected
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7fe fc45 	bl	800071a <NAU7802_setChannel>
		NAU7802_calibrateAFE(); // recalibrate after channel change
 8001e90:	f7fe fbc8 	bl	8000624 <NAU7802_calibrateAFE>

		load_cell_ch1_result = NAU7802_getReading();
 8001e94:	f7fe fcd6 	bl	8000844 <NAU7802_getReading>
 8001e98:	64f8      	str	r0, [r7, #76]	; 0x4c
		// change to channel 2
		NAU7802_setChannel(NAU7802_CHANNEL_2);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7fe fc3d 	bl	800071a <NAU7802_setChannel>
		NAU7802_calibrateAFE(); // recalibrate after channel change
 8001ea0:	f7fe fbc0 	bl	8000624 <NAU7802_calibrateAFE>
		load_cell_ch2_result = NAU7802_getReading();
 8001ea4:	f7fe fcce 	bl	8000844 <NAU7802_getReading>
 8001ea8:	64b8      	str	r0, [r7, #72]	; 0x48
	}

	uint8_t load_cell_ch1_bytes[3];
	uint8_t load_cell_ch2_bytes[3];

	convert_int32_t_to_three_bytes(load_cell_ch1_result, load_cell_ch1_bytes);
 8001eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001eb2:	f7ff ff29 	bl	8001d08 <convert_int32_t_to_three_bytes>
	convert_int32_t_to_three_bytes(load_cell_ch2_result, load_cell_ch2_bytes);
 8001eb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001eba:	4619      	mov	r1, r3
 8001ebc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001ebe:	f7ff ff23 	bl	8001d08 <convert_int32_t_to_three_bytes>

	// sequence number

	HAL_PWR_EnableBkUpAccess(); // enable access to the Backup Registers
 8001ec2:	f003 f861 	bl	8004f88 <HAL_PWR_EnableBkUpAccess>
	uint8_t sequence_number;
	sequence_number = HAL_RTCEx_BKUPRead(&hrtc, 2); // read Backup Register 2
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	487e      	ldr	r0, [pc, #504]	; (80020c4 <assemble_and_send_packet+0x2cc>)
 8001eca:	f004 fc96 	bl	80067fa <HAL_RTCEx_BKUPRead>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	uint8_t packet[33];

	packet[0] = sizeof(packet)-1; // number of bytes to follow
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	763b      	strb	r3, [r7, #24]
	packet[1] = CI_Byte;
 8001ed8:	23ac      	movs	r3, #172	; 0xac
 8001eda:	767b      	strb	r3, [r7, #25]

	/*TEMPERATURE PACKET*/
	packet[2] = temperature_data.temperature >> 8;
 8001edc:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <assemble_and_send_packet+0x2ac>)
 8001ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee2:	121b      	asrs	r3, r3, #8
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	76bb      	strb	r3, [r7, #26]
	packet[3] = temperature_data.temperature & 0x00FF;
 8001eea:	4b6e      	ldr	r3, [pc, #440]	; (80020a4 <assemble_and_send_packet+0x2ac>)
 8001eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	76fb      	strb	r3, [r7, #27]
	packet[12] = imu_data.gyro_y >> 8;
	packet[13] = imu_data.gyro_y & 0x00FF;
	packet[14] = imu_data.gyro_z >> 8;
	packet[15] = imu_data.gyro_z & 0x00FF;
	*/
	packet[4] = imu_data.mag_x >> 8;
 8001ef4:	4b6c      	ldr	r3, [pc, #432]	; (80020a8 <assemble_and_send_packet+0x2b0>)
 8001ef6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001efa:	121b      	asrs	r3, r3, #8
 8001efc:	b21b      	sxth	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	773b      	strb	r3, [r7, #28]
	packet[5] = imu_data.mag_x & 0x00FF;
 8001f02:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <assemble_and_send_packet+0x2b0>)
 8001f04:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	777b      	strb	r3, [r7, #29]
	packet[6] = imu_data.mag_y >> 8;
 8001f0c:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <assemble_and_send_packet+0x2b0>)
 8001f0e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f12:	121b      	asrs	r3, r3, #8
 8001f14:	b21b      	sxth	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	77bb      	strb	r3, [r7, #30]
	packet[7] = imu_data.mag_y & 0x00FF;
 8001f1a:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <assemble_and_send_packet+0x2b0>)
 8001f1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	77fb      	strb	r3, [r7, #31]
	packet[8] = imu_data.mag_z >> 8;
 8001f24:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <assemble_and_send_packet+0x2b0>)
 8001f26:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f2a:	121b      	asrs	r3, r3, #8
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f887 3020 	strb.w	r3, [r7, #32]
	packet[9] = imu_data.mag_z & 0x00FF;
 8001f34:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <assemble_and_send_packet+0x2b0>)
 8001f36:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	/*TILT PACKET*/
	packet[10] = tilt_data.accel_x >> 8;
 8001f40:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f46:	121b      	asrs	r3, r3, #8
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	packet[11] = tilt_data.accel_x & 0x00FF;
 8001f50:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001f52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	packet[12] = tilt_data.accel_y >> 8;
 8001f5c:	4b54      	ldr	r3, [pc, #336]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001f5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f62:	121b      	asrs	r3, r3, #8
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	packet[13] = tilt_data.accel_y & 0x00FF;
 8001f6c:	4b50      	ldr	r3, [pc, #320]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001f6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	packet[14] = tilt_data.accel_z >> 8;
 8001f78:	4b4d      	ldr	r3, [pc, #308]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001f7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f7e:	121b      	asrs	r3, r3, #8
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	packet[15] = tilt_data.accel_z & 0x00FF;
 8001f88:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001f8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	packet[16] = tilt_data.pitch_x >> 8;
 8001f94:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001f96:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f9a:	121b      	asrs	r3, r3, #8
 8001f9c:	b21b      	sxth	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	packet[17] = tilt_data.pitch_x & 0x00FF;
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001fa6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	packet[18] = tilt_data.roll_y >> 8;
 8001fb0:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001fb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fb6:	121b      	asrs	r3, r3, #8
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	packet[19] = tilt_data.roll_y & 0x00FF;
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	; (80020b0 <assemble_and_send_packet+0x2b8>)
 8001fc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	/*Conductivity PACKET */
	packet[20] = cond_data.result >> 8;
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <assemble_and_send_packet+0x2bc>)
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	packet[21] = cond_data.result & 0x00FF;
 8001fda:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <assemble_and_send_packet+0x2bc>)
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	/*Pressure PACKET*/
	packet[22] = pres_data.pressure_result >> 8;
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <assemble_and_send_packet+0x2c4>)
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	packet[23] = pres_data.pressure_result & 0x00FF;
 8001ff2:	4b32      	ldr	r3, [pc, #200]	; (80020bc <assemble_and_send_packet+0x2c4>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/*Load cell*/
	packet[24] = load_cell_ch1_bytes[0];
 8001ffc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002000:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	packet[25] = load_cell_ch1_bytes[1];
 8002004:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002008:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	packet[26] = load_cell_ch1_bytes[2];
 800200c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002010:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	packet[27] = load_cell_ch2_bytes[0];
 8002014:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002018:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	packet[28] = load_cell_ch2_bytes[1];
 800201c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002020:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	packet[29] = load_cell_ch2_bytes[2];
 8002024:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002028:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	/* battery voltage */
	packet[30] = battery_voltage >> 8;
 800202c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	b29b      	uxth	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	packet[31] = battery_voltage & 0x00FF;
 800203a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* sequence number */
	packet[32] = sequence_number;
 8002044:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002048:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	radio_ret = HAL_UART_Transmit(&huart2, packet, packet[0] + 1, 100);
 800204c:	7e3b      	ldrb	r3, [r7, #24]
 800204e:	b29b      	uxth	r3, r3
 8002050:	3301      	adds	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	f107 0118 	add.w	r1, r7, #24
 8002058:	2364      	movs	r3, #100	; 0x64
 800205a:	481b      	ldr	r0, [pc, #108]	; (80020c8 <assemble_and_send_packet+0x2d0>)
 800205c:	f005 fb3e 	bl	80076dc <HAL_UART_Transmit>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	// increment sequence number and write back to Backup Register
	if (sequence_number == 255) {
 8002066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800206a:	2bff      	cmp	r3, #255	; 0xff
 800206c:	d103      	bne.n	8002076 <assemble_and_send_packet+0x27e>
		sequence_number = 0; // reset back to zero if we're at the top
 800206e:	2300      	movs	r3, #0
 8002070:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002074:	e004      	b.n	8002080 <assemble_and_send_packet+0x288>
	} else {
		sequence_number++; // otherwise increment
 8002076:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800207a:	3301      	adds	r3, #1
 800207c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	 HAL_RTCEx_BKUPWrite(&hrtc, 2, sequence_number); // write the sequence number to Backup Register 2
 8002080:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002084:	461a      	mov	r2, r3
 8002086:	2102      	movs	r1, #2
 8002088:	480e      	ldr	r0, [pc, #56]	; (80020c4 <assemble_and_send_packet+0x2cc>)
 800208a:	f004 fb9d 	bl	80067c8 <HAL_RTCEx_BKUPWrite>


	if(radio_ret == HAL_OK){
 800208e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <assemble_and_send_packet+0x2a2>
		return true;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <assemble_and_send_packet+0x2a4>
	}
	return false;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3750      	adds	r7, #80	; 0x50
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bdb0      	pop	{r4, r5, r7, pc}
 80020a4:	20000078 	.word	0x20000078
 80020a8:	20000118 	.word	0x20000118
 80020ac:	2000002a 	.word	0x2000002a
 80020b0:	20000194 	.word	0x20000194
 80020b4:	200002c8 	.word	0x200002c8
 80020b8:	20000029 	.word	0x20000029
 80020bc:	20000114 	.word	0x20000114
 80020c0:	20000028 	.word	0x20000028
 80020c4:	20000224 	.word	0x20000224
 80020c8:	200002cc 	.word	0x200002cc

080020cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d0:	b672      	cpsid	i
}
 80020d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <Error_Handler+0x8>
	...

080020d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_MspInit+0x88>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <HAL_MspInit+0x88>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_MspInit+0x88>)
 80020ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_MspInit+0x88>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	4a19      	ldr	r2, [pc, #100]	; (8002160 <HAL_MspInit+0x88>)
 80020fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002100:	6593      	str	r3, [r2, #88]	; 0x58
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_MspInit+0x88>)
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2101      	movs	r1, #1
 8002112:	f06f 000b 	mvn.w	r0, #11
 8002116:	f001 fe5e 	bl	8003dd6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2101      	movs	r1, #1
 800211e:	f06f 000a 	mvn.w	r0, #10
 8002122:	f001 fe58 	bl	8003dd6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2101      	movs	r1, #1
 800212a:	f06f 0009 	mvn.w	r0, #9
 800212e:	f001 fe52 	bl	8003dd6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2101      	movs	r1, #1
 8002136:	f06f 0004 	mvn.w	r0, #4
 800213a:	f001 fe4c 	bl	8003dd6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2101      	movs	r1, #1
 8002142:	f06f 0003 	mvn.w	r0, #3
 8002146:	f001 fe46 	bl	8003dd6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2101      	movs	r1, #1
 800214e:	f06f 0001 	mvn.w	r0, #1
 8002152:	f001 fe40 	bl	8003dd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000

08002164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0a2      	sub	sp, #136	; 0x88
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2260      	movs	r2, #96	; 0x60
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f006 fd6b 	bl	8008c60 <memset>
  if(hadc->Instance==ADC1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a25      	ldr	r2, [pc, #148]	; (8002224 <HAL_ADC_MspInit+0xc0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d143      	bne.n	800221c <HAL_ADC_MspInit+0xb8>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002194:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002198:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800219a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800219e:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80021a8:	2308      	movs	r3, #8
 80021aa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80021ac:	2307      	movs	r3, #7
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80021b0:	2302      	movs	r3, #2
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80021b4:	2302      	movs	r3, #2
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80021b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fd94 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80021ce:	f7ff ff7d 	bl	80020cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80021d2:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_ADC_MspInit+0xc4>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <HAL_ADC_MspInit+0xc4>)
 80021d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_ADC_MspInit+0xc4>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_ADC_MspInit+0xc4>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	4a0e      	ldr	r2, [pc, #56]	; (8002228 <HAL_ADC_MspInit+0xc4>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <HAL_ADC_MspInit+0xc4>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002202:	2301      	movs	r3, #1
 8002204:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002206:	230b      	movs	r3, #11
 8002208:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002212:	4619      	mov	r1, r3
 8002214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002218:	f001 fe92 	bl	8003f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800221c:	bf00      	nop
 800221e:	3788      	adds	r7, #136	; 0x88
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	50040000 	.word	0x50040000
 8002228:	40021000 	.word	0x40021000

0800222c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b0a4      	sub	sp, #144	; 0x90
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002244:	f107 031c 	add.w	r3, r7, #28
 8002248:	2260      	movs	r2, #96	; 0x60
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f006 fd07 	bl	8008c60 <memset>
  if(hi2c->Instance==I2C2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a41      	ldr	r2, [pc, #260]	; (800235c <HAL_I2C_MspInit+0x130>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d13b      	bne.n	80022d4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002260:	2300      	movs	r3, #0
 8002262:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002264:	f107 031c 	add.w	r3, r7, #28
 8002268:	4618      	mov	r0, r3
 800226a:	f003 fd41 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002274:	f7ff ff2a 	bl	80020cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002278:	4b39      	ldr	r3, [pc, #228]	; (8002360 <HAL_I2C_MspInit+0x134>)
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	4a38      	ldr	r2, [pc, #224]	; (8002360 <HAL_I2C_MspInit+0x134>)
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002284:	4b36      	ldr	r3, [pc, #216]	; (8002360 <HAL_I2C_MspInit+0x134>)
 8002286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	61bb      	str	r3, [r7, #24]
 800228e:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002290:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002294:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002296:	2312      	movs	r3, #18
 8002298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022a8:	2304      	movs	r3, #4
 80022aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022b2:	4619      	mov	r1, r3
 80022b4:	482b      	ldr	r0, [pc, #172]	; (8002364 <HAL_I2C_MspInit+0x138>)
 80022b6:	f001 fe43 	bl	8003f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_I2C_MspInit+0x134>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	4a28      	ldr	r2, [pc, #160]	; (8002360 <HAL_I2C_MspInit+0x134>)
 80022c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022c4:	6593      	str	r3, [r2, #88]	; 0x58
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_I2C_MspInit+0x134>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80022d2:	e03f      	b.n	8002354 <HAL_I2C_MspInit+0x128>
  else if(hi2c->Instance==I2C3)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a23      	ldr	r2, [pc, #140]	; (8002368 <HAL_I2C_MspInit+0x13c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d13a      	bne.n	8002354 <HAL_I2C_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80022e4:	2300      	movs	r3, #0
 80022e6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fcff 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80022f8:	f7ff fee8 	bl	80020cc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_I2C_MspInit+0x134>)
 80022fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_I2C_MspInit+0x134>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002308:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_I2C_MspInit+0x134>)
 800230a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002314:	2303      	movs	r3, #3
 8002316:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002318:	2312      	movs	r3, #18
 800231a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800232a:	2304      	movs	r3, #4
 800232c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002334:	4619      	mov	r1, r3
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <HAL_I2C_MspInit+0x140>)
 8002338:	f001 fe02 	bl	8003f40 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_I2C_MspInit+0x134>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <HAL_I2C_MspInit+0x134>)
 8002342:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002346:	6593      	str	r3, [r2, #88]	; 0x58
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_I2C_MspInit+0x134>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	bf00      	nop
 8002356:	3790      	adds	r7, #144	; 0x90
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40005800 	.word	0x40005800
 8002360:	40021000 	.word	0x40021000
 8002364:	48000400 	.word	0x48000400
 8002368:	40005c00 	.word	0x40005c00
 800236c:	48000800 	.word	0x48000800

08002370 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b09a      	sub	sp, #104	; 0x68
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002378:	f107 0308 	add.w	r3, r7, #8
 800237c:	2260      	movs	r2, #96	; 0x60
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f006 fc6d 	bl	8008c60 <memset>
  if(hrtc->Instance==RTC)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_RTC_MspInit+0x68>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d11f      	bne.n	80023d0 <HAL_RTC_MspInit+0x60>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800239a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800239c:	f107 0308 	add.w	r3, r7, #8
 80023a0:	4618      	mov	r0, r3
 80023a2:	f003 fca5 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80023ac:	f7ff fe8e 	bl	80020cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023b0:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_RTC_MspInit+0x6c>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_RTC_MspInit+0x6c>)
 80023b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2100      	movs	r1, #0
 80023c4:	2003      	movs	r0, #3
 80023c6:	f001 fd06 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80023ca:	2003      	movs	r0, #3
 80023cc:	f001 fd1f 	bl	8003e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023d0:	bf00      	nop
 80023d2:	3768      	adds	r7, #104	; 0x68
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40002800 	.word	0x40002800
 80023dc:	40021000 	.word	0x40021000

080023e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_TIM_PWM_MspInit+0x38>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d10b      	bne.n	800240a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <HAL_TIM_PWM_MspInit+0x3c>)
 80023f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_TIM_PWM_MspInit+0x3c>)
 80023f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023fc:	6613      	str	r3, [r2, #96]	; 0x60
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_TIM_PWM_MspInit+0x3c>)
 8002400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40012c00 	.word	0x40012c00
 800241c:	40021000 	.word	0x40021000

08002420 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b088      	sub	sp, #32
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_TIM_MspPostInit+0x68>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d11d      	bne.n	800247e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_TIM_MspPostInit+0x6c>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	4a11      	ldr	r2, [pc, #68]	; (800248c <HAL_TIM_MspPostInit+0x6c>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_TIM_MspPostInit+0x6c>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800245a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800245e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800246c:	2301      	movs	r3, #1
 800246e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247a:	f001 fd61 	bl	8003f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800247e:	bf00      	nop
 8002480:	3720      	adds	r7, #32
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40012c00 	.word	0x40012c00
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b0a4      	sub	sp, #144	; 0x90
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	2260      	movs	r2, #96	; 0x60
 80024ae:	2100      	movs	r1, #0
 80024b0:	4618      	mov	r0, r3
 80024b2:	f006 fbd5 	bl	8008c60 <memset>
  if(huart->Instance==USART1)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a46      	ldr	r2, [pc, #280]	; (80025d4 <HAL_UART_MspInit+0x144>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d144      	bne.n	800254a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024c4:	2300      	movs	r3, #0
 80024c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c8:	f107 031c 	add.w	r3, r7, #28
 80024cc:	4618      	mov	r0, r3
 80024ce:	f003 fc0f 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024d8:	f7ff fdf8 	bl	80020cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024dc:	4b3e      	ldr	r3, [pc, #248]	; (80025d8 <HAL_UART_MspInit+0x148>)
 80024de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e0:	4a3d      	ldr	r2, [pc, #244]	; (80025d8 <HAL_UART_MspInit+0x148>)
 80024e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e6:	6613      	str	r3, [r2, #96]	; 0x60
 80024e8:	4b3b      	ldr	r3, [pc, #236]	; (80025d8 <HAL_UART_MspInit+0x148>)
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f4:	4b38      	ldr	r3, [pc, #224]	; (80025d8 <HAL_UART_MspInit+0x148>)
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	4a37      	ldr	r2, [pc, #220]	; (80025d8 <HAL_UART_MspInit+0x148>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002500:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <HAL_UART_MspInit+0x148>)
 8002502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800250c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002510:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251e:	2303      	movs	r3, #3
 8002520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002524:	2307      	movs	r3, #7
 8002526:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002534:	f001 fd04 	bl	8003f40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002538:	2200      	movs	r2, #0
 800253a:	2100      	movs	r1, #0
 800253c:	2025      	movs	r0, #37	; 0x25
 800253e:	f001 fc4a 	bl	8003dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002542:	2025      	movs	r0, #37	; 0x25
 8002544:	f001 fc63 	bl	8003e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002548:	e03f      	b.n	80025ca <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a23      	ldr	r2, [pc, #140]	; (80025dc <HAL_UART_MspInit+0x14c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d13a      	bne.n	80025ca <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002554:	2302      	movs	r3, #2
 8002556:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002558:	2300      	movs	r3, #0
 800255a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800255c:	f107 031c 	add.w	r3, r7, #28
 8002560:	4618      	mov	r0, r3
 8002562:	f003 fbc5 	bl	8005cf0 <HAL_RCCEx_PeriphCLKConfig>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800256c:	f7ff fdae 	bl	80020cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_UART_MspInit+0x148>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	4a18      	ldr	r2, [pc, #96]	; (80025d8 <HAL_UART_MspInit+0x148>)
 8002576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257a:	6593      	str	r3, [r2, #88]	; 0x58
 800257c:	4b16      	ldr	r3, [pc, #88]	; (80025d8 <HAL_UART_MspInit+0x148>)
 800257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <HAL_UART_MspInit+0x148>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258c:	4a12      	ldr	r2, [pc, #72]	; (80025d8 <HAL_UART_MspInit+0x148>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002594:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <HAL_UART_MspInit+0x148>)
 8002596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025a0:	2304      	movs	r3, #4
 80025a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a4:	2312      	movs	r3, #18
 80025a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025b6:	2307      	movs	r3, #7
 80025b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025c0:	4619      	mov	r1, r3
 80025c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c6:	f001 fcbb 	bl	8003f40 <HAL_GPIO_Init>
}
 80025ca:	bf00      	nop
 80025cc:	3790      	adds	r7, #144	; 0x90
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40004400 	.word	0x40004400

080025e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e4:	e7fe      	b.n	80025e4 <NMI_Handler+0x4>

080025e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e6:	b480      	push	{r7}
 80025e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ea:	e7fe      	b.n	80025ea <HardFault_Handler+0x4>

080025ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f0:	e7fe      	b.n	80025f0 <MemManage_Handler+0x4>

080025f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f6:	e7fe      	b.n	80025f6 <BusFault_Handler+0x4>

080025f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <UsageFault_Handler+0x4>

080025fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800262c:	f000 f8c6 	bl	80027bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}

08002634 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002638:	4802      	ldr	r0, [pc, #8]	; (8002644 <RTC_WKUP_IRQHandler+0x10>)
 800263a:	f004 f895 	bl	8006768 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000224 	.word	0x20000224

08002648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <USART1_IRQHandler+0x10>)
 800264e:	f005 f92f 	bl	80078b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200001a0 	.word	0x200001a0

0800265c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002660:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <SystemInit+0x5c>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	4a14      	ldr	r2, [pc, #80]	; (80026b8 <SystemInit+0x5c>)
 8002668:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800266c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <SystemInit+0x60>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <SystemInit+0x60>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <SystemInit+0x60>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <SystemInit+0x60>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <SystemInit+0x60>)
 8002688:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800268c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002690:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <SystemInit+0x60>)
 8002694:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002698:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <SystemInit+0x60>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a07      	ldr	r2, [pc, #28]	; (80026bc <SystemInit+0x60>)
 80026a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SystemInit+0x60>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	e000ed00 	.word	0xe000ed00
 80026bc:	40021000 	.word	0x40021000

080026c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026c4:	f7ff ffca 	bl	800265c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80026c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80026ca:	e003      	b.n	80026d4 <LoopCopyDataInit>

080026cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80026ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80026d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80026d2:	3104      	adds	r1, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80026d4:	480a      	ldr	r0, [pc, #40]	; (8002700 <LoopForever+0xa>)
	ldr	r3, =_edata
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <LoopForever+0xe>)
	adds	r2, r0, r1
 80026d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80026da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80026dc:	d3f6      	bcc.n	80026cc <CopyDataInit>
	ldr	r2, =_sbss
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <LoopForever+0x12>)
	b	LoopFillZerobss
 80026e0:	e002      	b.n	80026e8 <LoopFillZerobss>

080026e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80026e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80026e4:	f842 3b04 	str.w	r3, [r2], #4

080026e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <LoopForever+0x16>)
	cmp	r2, r3
 80026ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80026ec:	d3f9      	bcc.n	80026e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ee:	f006 fa93 	bl	8008c18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026f2:	f7fe f9c3 	bl	8000a7c <main>

080026f6 <LoopForever>:

LoopForever:
    b LoopForever
 80026f6:	e7fe      	b.n	80026f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80026f8:	2000c000 	.word	0x2000c000
	ldr	r3, =_sidata
 80026fc:	08008cf8 	.word	0x08008cf8
	ldr	r0, =_sdata
 8002700:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002704:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002708:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800270c:	20000354 	.word	0x20000354

08002710 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC1_IRQHandler>

08002712 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800271c:	2003      	movs	r0, #3
 800271e:	f001 fb4f 	bl	8003dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002722:	2000      	movs	r0, #0
 8002724:	f000 f80e 	bl	8002744 <HAL_InitTick>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	71fb      	strb	r3, [r7, #7]
 8002732:	e001      	b.n	8002738 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002734:	f7ff fcd0 	bl	80020d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002738:	79fb      	ldrb	r3, [r7, #7]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_InitTick+0x6c>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d023      	beq.n	80027a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002758:	4b16      	ldr	r3, [pc, #88]	; (80027b4 <HAL_InitTick+0x70>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_InitTick+0x6c>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002766:	fbb3 f3f1 	udiv	r3, r3, r1
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	4618      	mov	r0, r3
 8002770:	f001 fb5b 	bl	8003e2a <HAL_SYSTICK_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d809      	bhi.n	8002794 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f001 fb25 	bl	8003dd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_InitTick+0x74>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e007      	b.n	80027a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	e004      	b.n	80027a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	73fb      	strb	r3, [r7, #15]
 800279e:	e001      	b.n	80027a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000008 	.word	0x20000008
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027c0:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_IncTick+0x20>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_IncTick+0x24>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <HAL_IncTick+0x24>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000008 	.word	0x20000008
 80027e0:	20000350 	.word	0x20000350

080027e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return uwTick;
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_GetTick+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000350 	.word	0x20000350

080027fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff ffee 	bl	80027e4 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d005      	beq.n	8002822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_Delay+0x44>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002822:	bf00      	nop
 8002824:	f7ff ffde 	bl	80027e4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	429a      	cmp	r2, r3
 8002832:	d8f7      	bhi.n	8002824 <HAL_Delay+0x28>
  {
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000008 	.word	0x20000008

08002844 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	609a      	str	r2, [r3, #8]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b087      	sub	sp, #28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3360      	adds	r3, #96	; 0x60
 80028be:	461a      	mov	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <LL_ADC_SetOffset+0x44>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	4313      	orrs	r3, r2
 80028dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	03fff000 	.word	0x03fff000

080028f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3360      	adds	r3, #96	; 0x60
 8002902:	461a      	mov	r2, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002920:	b480      	push	{r7}
 8002922:	b087      	sub	sp, #28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3360      	adds	r3, #96	; 0x60
 8002930:	461a      	mov	r2, r3
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	431a      	orrs	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800294a:	bf00      	nop
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3330      	adds	r3, #48	; 0x30
 800298c:	461a      	mov	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	4413      	add	r3, r2
 800299a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	211f      	movs	r1, #31
 80029a8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	401a      	ands	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0e9b      	lsrs	r3, r3, #26
 80029b4:	f003 011f 	and.w	r1, r3, #31
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	431a      	orrs	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029c8:	bf00      	nop
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3314      	adds	r3, #20
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	0e5b      	lsrs	r3, r3, #25
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	0d1b      	lsrs	r3, r3, #20
 80029fc:	f003 031f 	and.w	r3, r3, #31
 8002a00:	2107      	movs	r1, #7
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	0d1b      	lsrs	r3, r3, #20
 8002a0e:	f003 031f 	and.w	r3, r3, #31
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	43db      	mvns	r3, r3
 8002a46:	401a      	ands	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0318 	and.w	r3, r3, #24
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a50:	40d9      	lsrs	r1, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	400b      	ands	r3, r1
 8002a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	0007ffff 	.word	0x0007ffff

08002a74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6093      	str	r3, [r2, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aac:	d101      	bne.n	8002ab2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002ad0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ad4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002afc:	d101      	bne.n	8002b02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b4c:	f043 0202 	orr.w	r2, r3, #2
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <LL_ADC_IsEnabled+0x18>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <LL_ADC_IsEnabled+0x1a>
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d101      	bne.n	8002b9e <LL_ADC_IsDisableOngoing+0x18>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_ADC_IsDisableOngoing+0x1a>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002be4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002be8:	f043 0210 	orr.w	r2, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d101      	bne.n	8002c14 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c36:	f043 0220 	orr.w	r2, r3, #32
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d101      	bne.n	8002c62 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b088      	sub	sp, #32
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e12c      	b.n	8002ee4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff fa63 	bl	8002164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fef1 	bl	8002a98 <LL_ADC_IsDeepPowerDownEnabled>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d004      	beq.n	8002cc6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fed7 	bl	8002a74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ff0c 	bl	8002ae8 <LL_ADC_IsInternalRegulatorEnabled>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d115      	bne.n	8002d02 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fef0 	bl	8002ac0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ce0:	4b82      	ldr	r3, [pc, #520]	; (8002eec <HAL_ADC_Init+0x27c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	4a82      	ldr	r2, [pc, #520]	; (8002ef0 <HAL_ADC_Init+0x280>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cf4:	e002      	b.n	8002cfc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f9      	bne.n	8002cf6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff feee 	bl	8002ae8 <LL_ADC_IsInternalRegulatorEnabled>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10d      	bne.n	8002d2e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d16:	f043 0210 	orr.w	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff62 	bl	8002bfc <LL_ADC_REG_IsConversionOngoing>
 8002d38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 80c5 	bne.w	8002ed2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 80c1 	bne.w	8002ed2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d58:	f043 0202 	orr.w	r2, r3, #2
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff fefb 	bl	8002b60 <LL_ADC_IsEnabled>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d70:	4860      	ldr	r0, [pc, #384]	; (8002ef4 <HAL_ADC_Init+0x284>)
 8002d72:	f7ff fef5 	bl	8002b60 <LL_ADC_IsEnabled>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4619      	mov	r1, r3
 8002d82:	485d      	ldr	r0, [pc, #372]	; (8002ef8 <HAL_ADC_Init+0x288>)
 8002d84:	f7ff fd5e 	bl	8002844 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7e5b      	ldrb	r3, [r3, #25]
 8002d8c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d92:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d98:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d9e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002da6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d106      	bne.n	8002dc4 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	045b      	lsls	r3, r3, #17
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	4b45      	ldr	r3, [pc, #276]	; (8002efc <HAL_ADC_Init+0x28c>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	69b9      	ldr	r1, [r7, #24]
 8002df0:	430b      	orrs	r3, r1
 8002df2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff feff 	bl	8002bfc <LL_ADC_REG_IsConversionOngoing>
 8002dfe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff20 	bl	8002c4a <LL_ADC_INJ_IsConversionOngoing>
 8002e0a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d13d      	bne.n	8002e8e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d13a      	bne.n	8002e8e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e1c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e24:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e34:	f023 0302 	bic.w	r3, r3, #2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6812      	ldr	r2, [r2, #0]
 8002e3c:	69b9      	ldr	r1, [r7, #24]
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d118      	bne.n	8002e7e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e56:	f023 0304 	bic.w	r3, r3, #4
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e62:	4311      	orrs	r1, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e68:	4311      	orrs	r1, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	611a      	str	r2, [r3, #16]
 8002e7c:	e007      	b.n	8002e8e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0201 	bic.w	r2, r2, #1
 8002e8c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d10c      	bne.n	8002eb0 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	f023 010f 	bic.w	r1, r3, #15
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	1e5a      	subs	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	631a      	str	r2, [r3, #48]	; 0x30
 8002eae:	e007      	b.n	8002ec0 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 020f 	bic.w	r2, r2, #15
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	f023 0303 	bic.w	r3, r3, #3
 8002ec8:	f043 0201 	orr.w	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54
 8002ed0:	e007      	b.n	8002ee2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed6:	f043 0210 	orr.w	r2, r3, #16
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ee2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	053e2d63 	.word	0x053e2d63
 8002ef4:	50040000 	.word	0x50040000
 8002ef8:	50040300 	.word	0x50040300
 8002efc:	fff0c007 	.word	0xfff0c007

08002f00 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fe75 	bl	8002bfc <LL_ADC_REG_IsConversionOngoing>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d14f      	bne.n	8002fb8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_Start+0x26>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e04b      	b.n	8002fbe <HAL_ADC_Start+0xbe>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fdb4 	bl	8003a9c <ADC_Enable>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f38:	7bfb      	ldrb	r3, [r7, #15]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d137      	bne.n	8002fae <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5e:	d106      	bne.n	8002f6e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	f023 0206 	bic.w	r2, r3, #6
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8002f6c:	e002      	b.n	8002f74 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	221c      	movs	r2, #28
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fe00 	bl	8002bac <LL_ADC_REG_StartConversion>
 8002fac:	e006      	b.n	8002fbc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002fb6:	e001      	b.n	8002fbc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_Stop+0x16>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e023      	b.n	8003024 <HAL_ADC_Stop+0x5e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002fe4:	2103      	movs	r1, #3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fc9c 	bl	8003924 <ADC_ConversionStop>
 8002fec:	4603      	mov	r3, r0
 8002fee:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d111      	bne.n	800301a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fdb2 	bl	8003b60 <ADC_Disable>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	2b08      	cmp	r3, #8
 800303c:	d102      	bne.n	8003044 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800303e:	2308      	movs	r3, #8
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e010      	b.n	8003066 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003056:	f043 0220 	orr.w	r2, r3, #32
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e06f      	b.n	8003142 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003062:	2304      	movs	r3, #4
 8003064:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003066:	f7ff fbbd 	bl	80027e4 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800306c:	e021      	b.n	80030b2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d01d      	beq.n	80030b2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003076:	f7ff fbb5 	bl	80027e4 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <HAL_ADC_PollForConversion+0x60>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d112      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10b      	bne.n	80030b2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f043 0204 	orr.w	r2, r3, #4
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e047      	b.n	8003142 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0d6      	beq.n	800306e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fc40 	bl	8002956 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01c      	beq.n	8003116 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7e5b      	ldrb	r3, [r3, #25]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d118      	bne.n	8003116 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d111      	bne.n	8003116 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d105      	bne.n	8003116 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f043 0201 	orr.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d104      	bne.n	800312e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2208      	movs	r2, #8
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e008      	b.n	8003140 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d103      	bne.n	8003140 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	220c      	movs	r2, #12
 800313e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003158:	4618      	mov	r0, r3
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b0b6      	sub	sp, #216	; 0xd8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x22>
 8003182:	2302      	movs	r3, #2
 8003184:	e3b9      	b.n	80038fa <HAL_ADC_ConfigChannel+0x796>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fd32 	bl	8002bfc <LL_ADC_REG_IsConversionOngoing>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 839e 	bne.w	80038dc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b05      	cmp	r3, #5
 80031a6:	d824      	bhi.n	80031f2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	3b02      	subs	r3, #2
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d81b      	bhi.n	80031ea <HAL_ADC_ConfigChannel+0x86>
 80031b2:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <HAL_ADC_ConfigChannel+0x54>)
 80031b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b8:	080031c9 	.word	0x080031c9
 80031bc:	080031d1 	.word	0x080031d1
 80031c0:	080031d9 	.word	0x080031d9
 80031c4:	080031e1 	.word	0x080031e1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	220c      	movs	r2, #12
 80031cc:	605a      	str	r2, [r3, #4]
          break;
 80031ce:	e011      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2212      	movs	r2, #18
 80031d4:	605a      	str	r2, [r3, #4]
          break;
 80031d6:	e00d      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2218      	movs	r2, #24
 80031dc:	605a      	str	r2, [r3, #4]
          break;
 80031de:	e009      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031e6:	605a      	str	r2, [r3, #4]
          break;
 80031e8:	e004      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2206      	movs	r2, #6
 80031ee:	605a      	str	r2, [r3, #4]
          break;
 80031f0:	e000      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80031f2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	f7ff fbbb 	bl	800297c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fcf6 	bl	8002bfc <LL_ADC_REG_IsConversionOngoing>
 8003210:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fd16 	bl	8002c4a <LL_ADC_INJ_IsConversionOngoing>
 800321e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003222:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 81a6 	bne.w	8003578 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800322c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 81a1 	bne.w	8003578 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	461a      	mov	r2, r3
 8003244:	f7ff fbc6 	bl	80029d4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	08db      	lsrs	r3, r3, #3
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d00a      	beq.n	8003280 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6919      	ldr	r1, [r3, #16]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800327a:	f7ff fb17 	bl	80028ac <LL_ADC_SetOffset>
 800327e:	e17b      	b.n	8003578 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fb34 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 800328c:	4603      	mov	r3, r0
 800328e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x148>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fb29 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 80032a2:	4603      	mov	r3, r0
 80032a4:	0e9b      	lsrs	r3, r3, #26
 80032a6:	f003 021f 	and.w	r2, r3, #31
 80032aa:	e01e      	b.n	80032ea <HAL_ADC_ConfigChannel+0x186>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2100      	movs	r1, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fb1e 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80032da:	2320      	movs	r3, #32
 80032dc:	e004      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80032de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032e2:	fab3 f383 	clz	r3, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x19e>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0e9b      	lsrs	r3, r3, #26
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	e018      	b.n	8003334 <HAL_ADC_ConfigChannel+0x1d0>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800331a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800331e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8003326:	2320      	movs	r3, #32
 8003328:	e004      	b.n	8003334 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800332a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003334:	429a      	cmp	r2, r3
 8003336:	d106      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2200      	movs	r2, #0
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff faed 	bl	8002920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2101      	movs	r1, #1
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fad1 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x20e>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2101      	movs	r1, #1
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fac6 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 8003368:	4603      	mov	r3, r0
 800336a:	0e9b      	lsrs	r3, r3, #26
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	e01e      	b.n	80033b0 <HAL_ADC_ConfigChannel+0x24c>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2101      	movs	r1, #1
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fabb 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003390:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e004      	b.n	80033ae <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80033a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033a8:	fab3 f383 	clz	r3, r3
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x264>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	0e9b      	lsrs	r3, r3, #26
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	e018      	b.n	80033fa <HAL_ADC_ConfigChannel+0x296>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80033dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80033e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80033ec:	2320      	movs	r3, #32
 80033ee:	e004      	b.n	80033fa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80033f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033f4:	fab3 f383 	clz	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d106      	bne.n	800340c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2200      	movs	r2, #0
 8003404:	2101      	movs	r1, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fa8a 	bl	8002920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2102      	movs	r1, #2
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff fa6e 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 8003418:	4603      	mov	r3, r0
 800341a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x2d4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2102      	movs	r1, #2
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fa63 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 800342e:	4603      	mov	r3, r0
 8003430:	0e9b      	lsrs	r3, r3, #26
 8003432:	f003 021f 	and.w	r2, r3, #31
 8003436:	e01e      	b.n	8003476 <HAL_ADC_ConfigChannel+0x312>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2102      	movs	r1, #2
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fa58 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 8003444:	4603      	mov	r3, r0
 8003446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800345a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800345e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e004      	b.n	8003474 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800346a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800346e:	fab3 f383 	clz	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <HAL_ADC_ConfigChannel+0x32a>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	0e9b      	lsrs	r3, r3, #26
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	e016      	b.n	80034bc <HAL_ADC_ConfigChannel+0x358>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80034a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80034a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80034ae:	2320      	movs	r3, #32
 80034b0:	e004      	b.n	80034bc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80034b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034bc:	429a      	cmp	r2, r3
 80034be:	d106      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2200      	movs	r2, #0
 80034c6:	2102      	movs	r1, #2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fa29 	bl	8002920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2103      	movs	r1, #3
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fa0d 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10a      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x396>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2103      	movs	r1, #3
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff fa02 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 80034f0:	4603      	mov	r3, r0
 80034f2:	0e9b      	lsrs	r3, r3, #26
 80034f4:	f003 021f 	and.w	r2, r3, #31
 80034f8:	e017      	b.n	800352a <HAL_ADC_ConfigChannel+0x3c6>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2103      	movs	r1, #3
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff f9f7 	bl	80028f4 <LL_ADC_GetOffsetChannel>
 8003506:	4603      	mov	r3, r0
 8003508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003514:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800351c:	2320      	movs	r3, #32
 800351e:	e003      	b.n	8003528 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003532:	2b00      	cmp	r3, #0
 8003534:	d105      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x3de>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	0e9b      	lsrs	r3, r3, #26
 800353c:	f003 031f 	and.w	r3, r3, #31
 8003540:	e011      	b.n	8003566 <HAL_ADC_ConfigChannel+0x402>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003548:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800354a:	fa93 f3a3 	rbit	r3, r3
 800354e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003552:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800355a:	2320      	movs	r3, #32
 800355c:	e003      	b.n	8003566 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800355e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003566:	429a      	cmp	r2, r3
 8003568:	d106      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	2103      	movs	r1, #3
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f9d4 	bl	8002920 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff faef 	bl	8002b60 <LL_ADC_IsEnabled>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	f040 813f 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6819      	ldr	r1, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	461a      	mov	r2, r3
 8003598:	f7ff fa48 	bl	8002a2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a8e      	ldr	r2, [pc, #568]	; (80037dc <HAL_ADC_ConfigChannel+0x678>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f040 8130 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x46c>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0e9b      	lsrs	r3, r3, #26
 80035be:	3301      	adds	r3, #1
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2b09      	cmp	r3, #9
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e019      	b.n	8003604 <HAL_ADC_ConfigChannel+0x4a0>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d8:	fa93 f3a3 	rbit	r3, r3
 80035dc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80035de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80035e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80035e8:	2320      	movs	r3, #32
 80035ea:	e003      	b.n	80035f4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80035ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ee:	fab3 f383 	clz	r3, r3
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	3301      	adds	r3, #1
 80035f6:	f003 031f 	and.w	r3, r3, #31
 80035fa:	2b09      	cmp	r3, #9
 80035fc:	bf94      	ite	ls
 80035fe:	2301      	movls	r3, #1
 8003600:	2300      	movhi	r3, #0
 8003602:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003604:	2b00      	cmp	r3, #0
 8003606:	d079      	beq.n	80036fc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003610:	2b00      	cmp	r3, #0
 8003612:	d107      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x4c0>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	0e9b      	lsrs	r3, r3, #26
 800361a:	3301      	adds	r3, #1
 800361c:	069b      	lsls	r3, r3, #26
 800361e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003622:	e015      	b.n	8003650 <HAL_ADC_ConfigChannel+0x4ec>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362c:	fa93 f3a3 	rbit	r3, r3
 8003630:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800363c:	2320      	movs	r3, #32
 800363e:	e003      	b.n	8003648 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003642:	fab3 f383 	clz	r3, r3
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3301      	adds	r3, #1
 800364a:	069b      	lsls	r3, r3, #26
 800364c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x50c>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	0e9b      	lsrs	r3, r3, #26
 8003662:	3301      	adds	r3, #1
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	2101      	movs	r1, #1
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	e017      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x53c>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800367e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003680:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003688:	2320      	movs	r3, #32
 800368a:	e003      	b.n	8003694 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800368c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	3301      	adds	r3, #1
 8003696:	f003 031f 	and.w	r3, r3, #31
 800369a:	2101      	movs	r1, #1
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	ea42 0103 	orr.w	r1, r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x562>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	3301      	adds	r3, #1
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	051b      	lsls	r3, r3, #20
 80036c4:	e018      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x594>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80036de:	2320      	movs	r3, #32
 80036e0:	e003      	b.n	80036ea <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80036e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e4:	fab3 f383 	clz	r3, r3
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f003 021f 	and.w	r2, r3, #31
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036f8:	430b      	orrs	r3, r1
 80036fa:	e080      	b.n	80037fe <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003704:	2b00      	cmp	r3, #0
 8003706:	d107      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x5b4>
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	0e9b      	lsrs	r3, r3, #26
 800370e:	3301      	adds	r3, #1
 8003710:	069b      	lsls	r3, r3, #26
 8003712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003716:	e015      	b.n	8003744 <HAL_ADC_ConfigChannel+0x5e0>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	fa93 f3a3 	rbit	r3, r3
 8003724:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003730:	2320      	movs	r3, #32
 8003732:	e003      	b.n	800373c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3301      	adds	r3, #1
 800373e:	069b      	lsls	r3, r3, #26
 8003740:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x600>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	0e9b      	lsrs	r3, r3, #26
 8003756:	3301      	adds	r3, #1
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f303 	lsl.w	r3, r1, r3
 8003762:	e017      	b.n	8003794 <HAL_ADC_ConfigChannel+0x630>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	fa93 f3a3 	rbit	r3, r3
 8003770:	61fb      	str	r3, [r7, #28]
  return result;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800377c:	2320      	movs	r3, #32
 800377e:	e003      	b.n	8003788 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	3301      	adds	r3, #1
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	2101      	movs	r1, #1
 8003790:	fa01 f303 	lsl.w	r3, r1, r3
 8003794:	ea42 0103 	orr.w	r1, r2, r3
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10d      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x65c>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	0e9b      	lsrs	r3, r3, #26
 80037aa:	3301      	adds	r3, #1
 80037ac:	f003 021f 	and.w	r2, r3, #31
 80037b0:	4613      	mov	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4413      	add	r3, r2
 80037b6:	3b1e      	subs	r3, #30
 80037b8:	051b      	lsls	r3, r3, #20
 80037ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037be:	e01d      	b.n	80037fc <HAL_ADC_ConfigChannel+0x698>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	fa93 f3a3 	rbit	r3, r3
 80037cc:	613b      	str	r3, [r7, #16]
  return result;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d103      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80037d8:	2320      	movs	r3, #32
 80037da:	e005      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x684>
 80037dc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	f003 021f 	and.w	r2, r3, #31
 80037ee:	4613      	mov	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	3b1e      	subs	r3, #30
 80037f6:	051b      	lsls	r3, r3, #20
 80037f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037fc:	430b      	orrs	r3, r1
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	6892      	ldr	r2, [r2, #8]
 8003802:	4619      	mov	r1, r3
 8003804:	f7ff f8e6 	bl	80029d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <HAL_ADC_ConfigChannel+0x7a0>)
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d06c      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003814:	483c      	ldr	r0, [pc, #240]	; (8003908 <HAL_ADC_ConfigChannel+0x7a4>)
 8003816:	f7ff f83b 	bl	8002890 <LL_ADC_GetCommonPathInternalCh>
 800381a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3a      	ldr	r2, [pc, #232]	; (800390c <HAL_ADC_ConfigChannel+0x7a8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d127      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800382c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d121      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a35      	ldr	r2, [pc, #212]	; (8003910 <HAL_ADC_ConfigChannel+0x7ac>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d157      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800383e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003842:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003846:	4619      	mov	r1, r3
 8003848:	482f      	ldr	r0, [pc, #188]	; (8003908 <HAL_ADC_ConfigChannel+0x7a4>)
 800384a:	f7ff f80e 	bl	800286a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800384e:	4b31      	ldr	r3, [pc, #196]	; (8003914 <HAL_ADC_ConfigChannel+0x7b0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	4a30      	ldr	r2, [pc, #192]	; (8003918 <HAL_ADC_ConfigChannel+0x7b4>)
 8003856:	fba2 2303 	umull	r2, r3, r2, r3
 800385a:	099b      	lsrs	r3, r3, #6
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003868:	e002      	b.n	8003870 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3b01      	subs	r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f9      	bne.n	800386a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003876:	e03a      	b.n	80038ee <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a27      	ldr	r2, [pc, #156]	; (800391c <HAL_ADC_ConfigChannel+0x7b8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d113      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x746>
 8003882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10d      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a1f      	ldr	r2, [pc, #124]	; (8003910 <HAL_ADC_ConfigChannel+0x7ac>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d12a      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800389c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a0:	4619      	mov	r1, r3
 80038a2:	4819      	ldr	r0, [pc, #100]	; (8003908 <HAL_ADC_ConfigChannel+0x7a4>)
 80038a4:	f7fe ffe1 	bl	800286a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038a8:	e021      	b.n	80038ee <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_ADC_ConfigChannel+0x7bc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d11c      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d116      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a12      	ldr	r2, [pc, #72]	; (8003910 <HAL_ADC_ConfigChannel+0x7ac>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d111      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038d2:	4619      	mov	r1, r3
 80038d4:	480c      	ldr	r0, [pc, #48]	; (8003908 <HAL_ADC_ConfigChannel+0x7a4>)
 80038d6:	f7fe ffc8 	bl	800286a <LL_ADC_SetCommonPathInternalCh>
 80038da:	e008      	b.n	80038ee <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	37d8      	adds	r7, #216	; 0xd8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	80080000 	.word	0x80080000
 8003908:	50040300 	.word	0x50040300
 800390c:	c7520000 	.word	0xc7520000
 8003910:	50040000 	.word	0x50040000
 8003914:	20000000 	.word	0x20000000
 8003918:	053e2d63 	.word	0x053e2d63
 800391c:	cb840000 	.word	0xcb840000
 8003920:	80000001 	.word	0x80000001

08003924 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff f95e 	bl	8002bfc <LL_ADC_REG_IsConversionOngoing>
 8003940:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff f97f 	bl	8002c4a <LL_ADC_INJ_IsConversionOngoing>
 800394c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8098 	beq.w	8003a8c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d02a      	beq.n	80039c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	7e5b      	ldrb	r3, [r3, #25]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d126      	bne.n	80039c0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	7e1b      	ldrb	r3, [r3, #24]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d122      	bne.n	80039c0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800397a:	2301      	movs	r3, #1
 800397c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800397e:	e014      	b.n	80039aa <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4a45      	ldr	r2, [pc, #276]	; (8003a98 <ADC_ConversionStop+0x174>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d90d      	bls.n	80039a4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f043 0210 	orr.w	r2, r3, #16
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003998:	f043 0201 	orr.w	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e074      	b.n	8003a8e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	3301      	adds	r3, #1
 80039a8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d1e3      	bne.n	8003980 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2240      	movs	r2, #64	; 0x40
 80039be:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d014      	beq.n	80039f0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff f916 	bl	8002bfc <LL_ADC_REG_IsConversionOngoing>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff f8d3 	bl	8002b86 <LL_ADC_IsDisableOngoing>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d104      	bne.n	80039f0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff f8f2 	bl	8002bd4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d014      	beq.n	8003a20 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f925 	bl	8002c4a <LL_ADC_INJ_IsConversionOngoing>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00c      	beq.n	8003a20 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff f8bb 	bl	8002b86 <LL_ADC_IsDisableOngoing>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d104      	bne.n	8003a20 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff f901 	bl	8002c22 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d005      	beq.n	8003a32 <ADC_ConversionStop+0x10e>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d105      	bne.n	8003a38 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	617b      	str	r3, [r7, #20]
        break;
 8003a30:	e005      	b.n	8003a3e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003a32:	2308      	movs	r3, #8
 8003a34:	617b      	str	r3, [r7, #20]
        break;
 8003a36:	e002      	b.n	8003a3e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003a38:	2304      	movs	r3, #4
 8003a3a:	617b      	str	r3, [r7, #20]
        break;
 8003a3c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003a3e:	f7fe fed1 	bl	80027e4 <HAL_GetTick>
 8003a42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a44:	e01b      	b.n	8003a7e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003a46:	f7fe fecd 	bl	80027e4 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b05      	cmp	r3, #5
 8003a52:	d914      	bls.n	8003a7e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a66:	f043 0210 	orr.w	r2, r3, #16
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	f043 0201 	orr.w	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e007      	b.n	8003a8e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1dc      	bne.n	8003a46 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	a33fffff 	.word	0xa33fffff

08003a9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff f859 	bl	8002b60 <LL_ADC_IsEnabled>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d14d      	bne.n	8003b50 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	4b28      	ldr	r3, [pc, #160]	; (8003b5c <ADC_Enable+0xc0>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac6:	f043 0210 	orr.w	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e039      	b.n	8003b52 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff f814 	bl	8002b10 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ae8:	f7fe fe7c 	bl	80027e4 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003aee:	e028      	b.n	8003b42 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff f833 	bl	8002b60 <LL_ADC_IsEnabled>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff f803 	bl	8002b10 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b0a:	f7fe fe6b 	bl	80027e4 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d914      	bls.n	8003b42 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d00d      	beq.n	8003b42 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2a:	f043 0210 	orr.w	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b36:	f043 0201 	orr.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e007      	b.n	8003b52 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d1cf      	bne.n	8003af0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	8000003f 	.word	0x8000003f

08003b60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff f80a 	bl	8002b86 <LL_ADC_IsDisableOngoing>
 8003b72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe fff1 	bl	8002b60 <LL_ADC_IsEnabled>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d047      	beq.n	8003c14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d144      	bne.n	8003c14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 030d 	and.w	r3, r3, #13
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d10c      	bne.n	8003bb2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe ffcb 	bl	8002b38 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003baa:	f7fe fe1b 	bl	80027e4 <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bb0:	e029      	b.n	8003c06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb6:	f043 0210 	orr.w	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f043 0201 	orr.w	r2, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e023      	b.n	8003c16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bce:	f7fe fe09 	bl	80027e4 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d914      	bls.n	8003c06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00d      	beq.n	8003c06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfa:	f043 0201 	orr.w	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e007      	b.n	8003c16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1dc      	bne.n	8003bce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
	...

08003c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c52:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <__NVIC_SetPriorityGrouping+0x44>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	60d3      	str	r3, [r2, #12]
}
 8003c58:	bf00      	nop
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <__NVIC_GetPriorityGrouping+0x18>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	0a1b      	lsrs	r3, r3, #8
 8003c72:	f003 0307 	and.w	r3, r3, #7
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	db0b      	blt.n	8003cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	f003 021f 	and.w	r2, r3, #31
 8003c9c:	4907      	ldr	r1, [pc, #28]	; (8003cbc <__NVIC_EnableIRQ+0x38>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	2001      	movs	r0, #1
 8003ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	e000e100 	.word	0xe000e100

08003cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	6039      	str	r1, [r7, #0]
 8003cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	db0a      	blt.n	8003cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	490c      	ldr	r1, [pc, #48]	; (8003d0c <__NVIC_SetPriority+0x4c>)
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ce8:	e00a      	b.n	8003d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4908      	ldr	r1, [pc, #32]	; (8003d10 <__NVIC_SetPriority+0x50>)
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	3b04      	subs	r3, #4
 8003cf8:	0112      	lsls	r2, r2, #4
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	761a      	strb	r2, [r3, #24]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	e000e100 	.word	0xe000e100
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b089      	sub	sp, #36	; 0x24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f1c3 0307 	rsb	r3, r3, #7
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	bf28      	it	cs
 8003d32:	2304      	movcs	r3, #4
 8003d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	2b06      	cmp	r3, #6
 8003d3c:	d902      	bls.n	8003d44 <NVIC_EncodePriority+0x30>
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3b03      	subs	r3, #3
 8003d42:	e000      	b.n	8003d46 <NVIC_EncodePriority+0x32>
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	401a      	ands	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	fa01 f303 	lsl.w	r3, r1, r3
 8003d66:	43d9      	mvns	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	4313      	orrs	r3, r2
         );
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3724      	adds	r7, #36	; 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d8c:	d301      	bcc.n	8003d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e00f      	b.n	8003db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d92:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <SysTick_Config+0x40>)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003da0:	f7ff ff8e 	bl	8003cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <SysTick_Config+0x40>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003daa:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <SysTick_Config+0x40>)
 8003dac:	2207      	movs	r2, #7
 8003dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	e000e010 	.word	0xe000e010

08003dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff ff29 	bl	8003c20 <__NVIC_SetPriorityGrouping>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b086      	sub	sp, #24
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	4603      	mov	r3, r0
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
 8003de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003de4:	2300      	movs	r3, #0
 8003de6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003de8:	f7ff ff3e 	bl	8003c68 <__NVIC_GetPriorityGrouping>
 8003dec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	6978      	ldr	r0, [r7, #20]
 8003df4:	f7ff ff8e 	bl	8003d14 <NVIC_EncodePriority>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff5d 	bl	8003cc0 <__NVIC_SetPriority>
}
 8003e06:	bf00      	nop
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	4603      	mov	r3, r0
 8003e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff ff31 	bl	8003c84 <__NVIC_EnableIRQ>
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7ff ffa2 	bl	8003d7c <SysTick_Config>
 8003e38:	4603      	mov	r3, r0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d008      	beq.n	8003e6c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e022      	b.n	8003eb2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 020e 	bic.w	r2, r2, #14
 8003e7a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	f003 021c 	and.w	r2, r3, #28
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	2101      	movs	r1, #1
 8003e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e9e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d005      	beq.n	8003ee2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
 8003ee0:	e029      	b.n	8003f36 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 020e 	bic.w	r2, r2, #14
 8003ef0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	f003 021c 	and.w	r2, r3, #28
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	4798      	blx	r3
    }
  }
  return status;
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4e:	e154      	b.n	80041fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	2101      	movs	r1, #1
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8146 	beq.w	80041f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d005      	beq.n	8003f80 <HAL_GPIO_Init+0x40>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d130      	bne.n	8003fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4013      	ands	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	f003 0201 	and.w	r2, r3, #1
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d017      	beq.n	800401e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	2203      	movs	r2, #3
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689a      	ldr	r2, [r3, #8]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	fa02 f303 	lsl.w	r3, r2, r3
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d123      	bne.n	8004072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	08da      	lsrs	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	3208      	adds	r2, #8
 8004032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	220f      	movs	r2, #15
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	43db      	mvns	r3, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4013      	ands	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	08da      	lsrs	r2, r3, #3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3208      	adds	r2, #8
 800406c:	6939      	ldr	r1, [r7, #16]
 800406e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	2203      	movs	r2, #3
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 0203 	and.w	r2, r3, #3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80a0 	beq.w	80041f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b4:	4b58      	ldr	r3, [pc, #352]	; (8004218 <HAL_GPIO_Init+0x2d8>)
 80040b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040b8:	4a57      	ldr	r2, [pc, #348]	; (8004218 <HAL_GPIO_Init+0x2d8>)
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	6613      	str	r3, [r2, #96]	; 0x60
 80040c0:	4b55      	ldr	r3, [pc, #340]	; (8004218 <HAL_GPIO_Init+0x2d8>)
 80040c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040cc:	4a53      	ldr	r2, [pc, #332]	; (800421c <HAL_GPIO_Init+0x2dc>)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	089b      	lsrs	r3, r3, #2
 80040d2:	3302      	adds	r3, #2
 80040d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	220f      	movs	r2, #15
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	43db      	mvns	r3, r3
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040f6:	d019      	beq.n	800412c <HAL_GPIO_Init+0x1ec>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a49      	ldr	r2, [pc, #292]	; (8004220 <HAL_GPIO_Init+0x2e0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d013      	beq.n	8004128 <HAL_GPIO_Init+0x1e8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a48      	ldr	r2, [pc, #288]	; (8004224 <HAL_GPIO_Init+0x2e4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00d      	beq.n	8004124 <HAL_GPIO_Init+0x1e4>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a47      	ldr	r2, [pc, #284]	; (8004228 <HAL_GPIO_Init+0x2e8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <HAL_GPIO_Init+0x1e0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a46      	ldr	r2, [pc, #280]	; (800422c <HAL_GPIO_Init+0x2ec>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_GPIO_Init+0x1dc>
 8004118:	2304      	movs	r3, #4
 800411a:	e008      	b.n	800412e <HAL_GPIO_Init+0x1ee>
 800411c:	2307      	movs	r3, #7
 800411e:	e006      	b.n	800412e <HAL_GPIO_Init+0x1ee>
 8004120:	2303      	movs	r3, #3
 8004122:	e004      	b.n	800412e <HAL_GPIO_Init+0x1ee>
 8004124:	2302      	movs	r3, #2
 8004126:	e002      	b.n	800412e <HAL_GPIO_Init+0x1ee>
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <HAL_GPIO_Init+0x1ee>
 800412c:	2300      	movs	r3, #0
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	f002 0203 	and.w	r2, r2, #3
 8004134:	0092      	lsls	r2, r2, #2
 8004136:	4093      	lsls	r3, r2
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800413e:	4937      	ldr	r1, [pc, #220]	; (800421c <HAL_GPIO_Init+0x2dc>)
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	089b      	lsrs	r3, r3, #2
 8004144:	3302      	adds	r3, #2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800414c:	4b38      	ldr	r3, [pc, #224]	; (8004230 <HAL_GPIO_Init+0x2f0>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	43db      	mvns	r3, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004170:	4a2f      	ldr	r2, [pc, #188]	; (8004230 <HAL_GPIO_Init+0x2f0>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004176:	4b2e      	ldr	r3, [pc, #184]	; (8004230 <HAL_GPIO_Init+0x2f0>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43db      	mvns	r3, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800419a:	4a25      	ldr	r2, [pc, #148]	; (8004230 <HAL_GPIO_Init+0x2f0>)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041a0:	4b23      	ldr	r3, [pc, #140]	; (8004230 <HAL_GPIO_Init+0x2f0>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041c4:	4a1a      	ldr	r2, [pc, #104]	; (8004230 <HAL_GPIO_Init+0x2f0>)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041ca:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_GPIO_Init+0x2f0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4013      	ands	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041ee:	4a10      	ldr	r2, [pc, #64]	; (8004230 <HAL_GPIO_Init+0x2f0>)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3301      	adds	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	f47f aea3 	bne.w	8003f50 <HAL_GPIO_Init+0x10>
  }
}
 800420a:	bf00      	nop
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40021000 	.word	0x40021000
 800421c:	40010000 	.word	0x40010000
 8004220:	48000400 	.word	0x48000400
 8004224:	48000800 	.word	0x48000800
 8004228:	48000c00 	.word	0x48000c00
 800422c:	48001000 	.word	0x48001000
 8004230:	40010400 	.word	0x40010400

08004234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
 8004240:	4613      	mov	r3, r2
 8004242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004244:	787b      	ldrb	r3, [r7, #1]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800424a:	887a      	ldrh	r2, [r7, #2]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004250:	e002      	b.n	8004258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e081      	b.n	800437a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fd ffce 	bl	800222c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2224      	movs	r2, #36	; 0x24
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d107      	bne.n	80042de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042da:	609a      	str	r2, [r3, #8]
 80042dc:	e006      	b.n	80042ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d104      	bne.n	80042fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800430c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004310:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004320:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69d9      	ldr	r1, [r3, #28]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1a      	ldr	r2, [r3, #32]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af02      	add	r7, sp, #8
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	461a      	mov	r2, r3
 8004390:	460b      	mov	r3, r1
 8004392:	817b      	strh	r3, [r7, #10]
 8004394:	4613      	mov	r3, r2
 8004396:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	f040 80da 	bne.w	800455a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_I2C_Master_Transmit+0x30>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e0d3      	b.n	800455c <HAL_I2C_Master_Transmit+0x1d8>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043bc:	f7fe fa12 	bl	80027e4 <HAL_GetTick>
 80043c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	2319      	movs	r3, #25
 80043c8:	2201      	movs	r2, #1
 80043ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 faed 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e0be      	b.n	800455c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2221      	movs	r2, #33	; 0x21
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2210      	movs	r2, #16
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	893a      	ldrh	r2, [r7, #8]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440a:	b29b      	uxth	r3, r3
 800440c:	2bff      	cmp	r3, #255	; 0xff
 800440e:	d90e      	bls.n	800442e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	22ff      	movs	r2, #255	; 0xff
 8004414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	b2da      	uxtb	r2, r3
 800441c:	8979      	ldrh	r1, [r7, #10]
 800441e:	4b51      	ldr	r3, [pc, #324]	; (8004564 <HAL_I2C_Master_Transmit+0x1e0>)
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f000 fce4 	bl	8004df4 <I2C_TransferConfig>
 800442c:	e06c      	b.n	8004508 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443c:	b2da      	uxtb	r2, r3
 800443e:	8979      	ldrh	r1, [r7, #10]
 8004440:	4b48      	ldr	r3, [pc, #288]	; (8004564 <HAL_I2C_Master_Transmit+0x1e0>)
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 fcd3 	bl	8004df4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800444e:	e05b      	b.n	8004508 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	6a39      	ldr	r1, [r7, #32]
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 faea 	bl	8004a2e <I2C_WaitOnTXISFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e07b      	b.n	800455c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447e:	b29b      	uxth	r3, r3
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d034      	beq.n	8004508 <HAL_I2C_Master_Transmit+0x184>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d130      	bne.n	8004508 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fa7c 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e04d      	b.n	800455c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2bff      	cmp	r3, #255	; 0xff
 80044c8:	d90e      	bls.n	80044e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	22ff      	movs	r2, #255	; 0xff
 80044ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	8979      	ldrh	r1, [r7, #10]
 80044d8:	2300      	movs	r3, #0
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fc87 	bl	8004df4 <I2C_TransferConfig>
 80044e6:	e00f      	b.n	8004508 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	8979      	ldrh	r1, [r7, #10]
 80044fa:	2300      	movs	r3, #0
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fc76 	bl	8004df4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d19e      	bne.n	8004450 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	6a39      	ldr	r1, [r7, #32]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fac9 	bl	8004aae <I2C_WaitOnSTOPFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e01a      	b.n	800455c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2220      	movs	r2, #32
 800452c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <HAL_I2C_Master_Transmit+0x1e4>)
 800453a:	400b      	ands	r3, r1
 800453c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	e000      	b.n	800455c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800455a:	2302      	movs	r3, #2
  }
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	80002000 	.word	0x80002000
 8004568:	fe00e800 	.word	0xfe00e800

0800456c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	461a      	mov	r2, r3
 8004578:	460b      	mov	r3, r1
 800457a:	817b      	strh	r3, [r7, #10]
 800457c:	4613      	mov	r3, r2
 800457e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b20      	cmp	r3, #32
 800458a:	f040 80db 	bne.w	8004744 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_I2C_Master_Receive+0x30>
 8004598:	2302      	movs	r3, #2
 800459a:	e0d4      	b.n	8004746 <HAL_I2C_Master_Receive+0x1da>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045a4:	f7fe f91e 	bl	80027e4 <HAL_GetTick>
 80045a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	2319      	movs	r3, #25
 80045b0:	2201      	movs	r2, #1
 80045b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f9f9 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0bf      	b.n	8004746 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2222      	movs	r2, #34	; 0x22
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2210      	movs	r2, #16
 80045d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	893a      	ldrh	r2, [r7, #8]
 80045e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	2bff      	cmp	r3, #255	; 0xff
 80045f6:	d90e      	bls.n	8004616 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	22ff      	movs	r2, #255	; 0xff
 80045fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004602:	b2da      	uxtb	r2, r3
 8004604:	8979      	ldrh	r1, [r7, #10]
 8004606:	4b52      	ldr	r3, [pc, #328]	; (8004750 <HAL_I2C_Master_Receive+0x1e4>)
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 fbf0 	bl	8004df4 <I2C_TransferConfig>
 8004614:	e06d      	b.n	80046f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004624:	b2da      	uxtb	r2, r3
 8004626:	8979      	ldrh	r1, [r7, #10]
 8004628:	4b49      	ldr	r3, [pc, #292]	; (8004750 <HAL_I2C_Master_Receive+0x1e4>)
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 fbdf 	bl	8004df4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004636:	e05c      	b.n	80046f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	6a39      	ldr	r1, [r7, #32]
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fa73 	bl	8004b28 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e07c      	b.n	8004746 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	1c5a      	adds	r2, r3, #1
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d034      	beq.n	80046f2 <HAL_I2C_Master_Receive+0x186>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d130      	bne.n	80046f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	2200      	movs	r2, #0
 8004698:	2180      	movs	r1, #128	; 0x80
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f987 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e04d      	b.n	8004746 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2bff      	cmp	r3, #255	; 0xff
 80046b2:	d90e      	bls.n	80046d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	22ff      	movs	r2, #255	; 0xff
 80046b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	8979      	ldrh	r1, [r7, #10]
 80046c2:	2300      	movs	r3, #0
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 fb92 	bl	8004df4 <I2C_TransferConfig>
 80046d0:	e00f      	b.n	80046f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	8979      	ldrh	r1, [r7, #10]
 80046e4:	2300      	movs	r3, #0
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fb81 	bl	8004df4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d19d      	bne.n	8004638 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	6a39      	ldr	r1, [r7, #32]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f9d4 	bl	8004aae <I2C_WaitOnSTOPFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e01a      	b.n	8004746 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2220      	movs	r2, #32
 8004716:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <HAL_I2C_Master_Receive+0x1e8>)
 8004724:	400b      	ands	r3, r1
 8004726:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	80002400 	.word	0x80002400
 8004754:	fe00e800 	.word	0xfe00e800

08004758 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b08a      	sub	sp, #40	; 0x28
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	460b      	mov	r3, r1
 8004766:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b20      	cmp	r3, #32
 8004776:	f040 80f1 	bne.w	800495c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004788:	d101      	bne.n	800478e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800478a:	2302      	movs	r3, #2
 800478c:	e0e7      	b.n	800495e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_I2C_IsDeviceReady+0x44>
 8004798:	2302      	movs	r3, #2
 800479a:	e0e0      	b.n	800495e <HAL_I2C_IsDeviceReady+0x206>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2224      	movs	r2, #36	; 0x24
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d107      	bne.n	80047ca <HAL_I2C_IsDeviceReady+0x72>
 80047ba:	897b      	ldrh	r3, [r7, #10]
 80047bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047c8:	e004      	b.n	80047d4 <HAL_I2C_IsDeviceReady+0x7c>
 80047ca:	897b      	ldrh	r3, [r7, #10]
 80047cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80047da:	f7fe f803 	bl	80027e4 <HAL_GetTick>
 80047de:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	bf0c      	ite	eq
 80047ee:	2301      	moveq	r3, #1
 80047f0:	2300      	movne	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b10      	cmp	r3, #16
 8004802:	bf0c      	ite	eq
 8004804:	2301      	moveq	r3, #1
 8004806:	2300      	movne	r3, #0
 8004808:	b2db      	uxtb	r3, r3
 800480a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800480c:	e034      	b.n	8004878 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d01a      	beq.n	800484c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004816:	f7fd ffe5 	bl	80027e4 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <HAL_I2C_IsDeviceReady+0xd4>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10f      	bne.n	800484c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2220      	movs	r2, #32
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e088      	b.n	800495e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b20      	cmp	r3, #32
 8004858:	bf0c      	ite	eq
 800485a:	2301      	moveq	r3, #1
 800485c:	2300      	movne	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b10      	cmp	r3, #16
 800486e:	bf0c      	ite	eq
 8004870:	2301      	moveq	r3, #1
 8004872:	2300      	movne	r3, #0
 8004874:	b2db      	uxtb	r3, r3
 8004876:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004878:	7ffb      	ldrb	r3, [r7, #31]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <HAL_I2C_IsDeviceReady+0x12c>
 800487e:	7fbb      	ldrb	r3, [r7, #30]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0c4      	beq.n	800480e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f003 0310 	and.w	r3, r3, #16
 800488e:	2b10      	cmp	r3, #16
 8004890:	d01a      	beq.n	80048c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2200      	movs	r2, #0
 800489a:	2120      	movs	r1, #32
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f886 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e058      	b.n	800495e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2220      	movs	r2, #32
 80048b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2220      	movs	r2, #32
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e04a      	b.n	800495e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	2200      	movs	r2, #0
 80048d0:	2120      	movs	r1, #32
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 f86b 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e03d      	b.n	800495e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2210      	movs	r2, #16
 80048e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2220      	movs	r2, #32
 80048f0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d118      	bne.n	800492c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004908:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2200      	movs	r2, #0
 8004912:	2120      	movs	r1, #32
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f84a 	bl	80049ae <I2C_WaitOnFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e01c      	b.n	800495e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2220      	movs	r2, #32
 800492a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	3301      	adds	r3, #1
 8004930:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	429a      	cmp	r2, r3
 8004938:	f63f af3b 	bhi.w	80047b2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800495c:	2302      	movs	r3, #2
  }
}
 800495e:	4618      	mov	r0, r3
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b02      	cmp	r3, #2
 800497a:	d103      	bne.n	8004984 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2200      	movs	r2, #0
 8004982:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d007      	beq.n	80049a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	699a      	ldr	r2, [r3, #24]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	619a      	str	r2, [r3, #24]
  }
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049be:	e022      	b.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d01e      	beq.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049c8:	f7fd ff0c 	bl	80027e4 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d302      	bcc.n	80049de <I2C_WaitOnFlagUntilTimeout+0x30>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d113      	bne.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	f043 0220 	orr.w	r2, r3, #32
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2220      	movs	r2, #32
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e00f      	b.n	8004a26 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	bf0c      	ite	eq
 8004a16:	2301      	moveq	r3, #1
 8004a18:	2300      	movne	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d0cd      	beq.n	80049c0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a3a:	e02c      	b.n	8004a96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f8eb 	bl	8004c1c <I2C_IsErrorOccurred>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e02a      	b.n	8004aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d01e      	beq.n	8004a96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a58:	f7fd fec4 	bl	80027e4 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d302      	bcc.n	8004a6e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d113      	bne.n	8004a96 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a72:	f043 0220 	orr.w	r2, r3, #32
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e007      	b.n	8004aa6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d1cb      	bne.n	8004a3c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aba:	e028      	b.n	8004b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f8ab 	bl	8004c1c <I2C_IsErrorOccurred>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d001      	beq.n	8004ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e026      	b.n	8004b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad0:	f7fd fe88 	bl	80027e4 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d302      	bcc.n	8004ae6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d113      	bne.n	8004b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e007      	b.n	8004b1e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
 8004b14:	f003 0320 	and.w	r3, r3, #32
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d1cf      	bne.n	8004abc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b34:	e064      	b.n	8004c00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f86e 	bl	8004c1c <I2C_IsErrorOccurred>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e062      	b.n	8004c10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d138      	bne.n	8004bca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d105      	bne.n	8004b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e04e      	b.n	8004c10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d107      	bne.n	8004b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2210      	movs	r2, #16
 8004b86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	645a      	str	r2, [r3, #68]	; 0x44
 8004b8e:	e002      	b.n	8004b96 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004baa:	400b      	ands	r3, r1
 8004bac:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e022      	b.n	8004c10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bca:	f7fd fe0b 	bl	80027e4 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d302      	bcc.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10f      	bne.n	8004c00 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be4:	f043 0220 	orr.w	r2, r3, #32
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e007      	b.n	8004c10 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	f003 0304 	and.w	r3, r3, #4
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d193      	bne.n	8004b36 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	fe00e800 	.word	0xfe00e800

08004c1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c36:	2300      	movs	r3, #0
 8004c38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d075      	beq.n	8004d34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c50:	e056      	b.n	8004d00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c58:	d052      	beq.n	8004d00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c5a:	f7fd fdc3 	bl	80027e4 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d302      	bcc.n	8004c70 <I2C_IsErrorOccurred+0x54>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d147      	bne.n	8004d00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c92:	d12e      	bne.n	8004cf2 <I2C_IsErrorOccurred+0xd6>
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c9a:	d02a      	beq.n	8004cf2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	d027      	beq.n	8004cf2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cb0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004cb2:	f7fd fd97 	bl	80027e4 <HAL_GetTick>
 8004cb6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cb8:	e01b      	b.n	8004cf2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004cba:	f7fd fd93 	bl	80027e4 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b19      	cmp	r3, #25
 8004cc6:	d914      	bls.n	8004cf2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	f003 0320 	and.w	r3, r3, #32
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d1dc      	bne.n	8004cba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	d003      	beq.n	8004d16 <I2C_IsErrorOccurred+0xfa>
 8004d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d09d      	beq.n	8004c52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2220      	movs	r2, #32
 8004d24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	f043 0304 	orr.w	r3, r3, #4
 8004d2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00b      	beq.n	8004d80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	f043 0308 	orr.w	r3, r3, #8
 8004d6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f043 0302 	orr.w	r3, r3, #2
 8004d90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d01c      	beq.n	8004de4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fddb 	bl	8004966 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6859      	ldr	r1, [r3, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <I2C_IsErrorOccurred+0x1d4>)
 8004dbc:	400b      	ands	r3, r1
 8004dbe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3728      	adds	r7, #40	; 0x28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	fe00e800 	.word	0xfe00e800

08004df4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	817b      	strh	r3, [r7, #10]
 8004e02:	4613      	mov	r3, r2
 8004e04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e06:	897b      	ldrh	r3, [r7, #10]
 8004e08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e0c:	7a7b      	ldrb	r3, [r7, #9]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e14:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e22:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	0d5b      	lsrs	r3, r3, #21
 8004e2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <I2C_TransferConfig+0x60>)
 8004e34:	430b      	orrs	r3, r1
 8004e36:	43db      	mvns	r3, r3
 8004e38:	ea02 0103 	and.w	r1, r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e46:	bf00      	nop
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	03ff63ff 	.word	0x03ff63ff

08004e58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d138      	bne.n	8004ee0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e032      	b.n	8004ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2224      	movs	r2, #36	; 0x24
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0201 	bic.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eaa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6819      	ldr	r1, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0201 	orr.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e000      	b.n	8004ee2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
  }
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d139      	bne.n	8004f78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	e033      	b.n	8004f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2224      	movs	r2, #36	; 0x24
 8004f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
	...

08004f88 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a04      	ldr	r2, [pc, #16]	; (8004fa4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f96:	6013      	str	r3, [r2, #0]
}
 8004f98:	bf00      	nop
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40007000 	.word	0x40007000

08004fa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004fac:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40007000 	.word	0x40007000

08004fc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fd2:	d130      	bne.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fd4:	4b23      	ldr	r3, [pc, #140]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe0:	d038      	beq.n	8005054 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fe2:	4b20      	ldr	r3, [pc, #128]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fea:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ff0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ff2:	4b1d      	ldr	r3, [pc, #116]	; (8005068 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2232      	movs	r2, #50	; 0x32
 8004ff8:	fb02 f303 	mul.w	r3, r2, r3
 8004ffc:	4a1b      	ldr	r2, [pc, #108]	; (800506c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8005002:	0c9b      	lsrs	r3, r3, #18
 8005004:	3301      	adds	r3, #1
 8005006:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005008:	e002      	b.n	8005010 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3b01      	subs	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005010:	4b14      	ldr	r3, [pc, #80]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501c:	d102      	bne.n	8005024 <HAL_PWREx_ControlVoltageScaling+0x60>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f2      	bne.n	800500a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005024:	4b0f      	ldr	r3, [pc, #60]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005030:	d110      	bne.n	8005054 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e00f      	b.n	8005056 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800503e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005042:	d007      	beq.n	8005054 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005044:	4b07      	ldr	r3, [pc, #28]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800504c:	4a05      	ldr	r2, [pc, #20]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800504e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005052:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40007000 	.word	0x40007000
 8005068:	20000000 	.word	0x20000000
 800506c:	431bde83 	.word	0x431bde83

08005070 <HAL_PWREx_EnterSHUTDOWNMode>:
  *        The BOR is not available.
  * @note  The I/Os can be configured either with a pull-up or pull-down or can be kept in analog state.
  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0

  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_SHUTDOWN);
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f023 0307 	bic.w	r3, r3, #7
 800507c:	4a07      	ldr	r2, [pc, #28]	; (800509c <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800507e:	f043 0304 	orr.w	r3, r3, #4
 8005082:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005084:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	4a05      	ldr	r2, [pc, #20]	; (80050a0 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800508a:	f043 0304 	orr.w	r3, r3, #4
 800508e:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8005090:	bf30      	wfi
}
 8005092:	bf00      	nop
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40007000 	.word	0x40007000
 80050a0:	e000ed00 	.word	0xe000ed00

080050a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d102      	bne.n	80050b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f000 bc11 	b.w	80058da <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050b8:	4ba0      	ldr	r3, [pc, #640]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f003 030c 	and.w	r3, r3, #12
 80050c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050c2:	4b9e      	ldr	r3, [pc, #632]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80e4 	beq.w	80052a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <HAL_RCC_OscConfig+0x4c>
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b0c      	cmp	r3, #12
 80050e4:	f040 808b 	bne.w	80051fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	f040 8087 	bne.w	80051fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050f0:	4b92      	ldr	r3, [pc, #584]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_OscConfig+0x64>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e3e8      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1a      	ldr	r2, [r3, #32]
 800510c:	4b8b      	ldr	r3, [pc, #556]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d004      	beq.n	8005122 <HAL_RCC_OscConfig+0x7e>
 8005118:	4b88      	ldr	r3, [pc, #544]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005120:	e005      	b.n	800512e <HAL_RCC_OscConfig+0x8a>
 8005122:	4b86      	ldr	r3, [pc, #536]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005128:	091b      	lsrs	r3, r3, #4
 800512a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800512e:	4293      	cmp	r3, r2
 8005130:	d223      	bcs.n	800517a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fd7a 	bl	8005c30 <RCC_SetFlashLatencyFromMSIRange>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e3c9      	b.n	80058da <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005146:	4b7d      	ldr	r3, [pc, #500]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a7c      	ldr	r2, [pc, #496]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800514c:	f043 0308 	orr.w	r3, r3, #8
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	4b7a      	ldr	r3, [pc, #488]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	4977      	ldr	r1, [pc, #476]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005160:	4313      	orrs	r3, r2
 8005162:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005164:	4b75      	ldr	r3, [pc, #468]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	021b      	lsls	r3, r3, #8
 8005172:	4972      	ldr	r1, [pc, #456]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005174:	4313      	orrs	r3, r2
 8005176:	604b      	str	r3, [r1, #4]
 8005178:	e025      	b.n	80051c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800517a:	4b70      	ldr	r3, [pc, #448]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a6f      	ldr	r2, [pc, #444]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005180:	f043 0308 	orr.w	r3, r3, #8
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	4b6d      	ldr	r3, [pc, #436]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	496a      	ldr	r1, [pc, #424]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005198:	4b68      	ldr	r3, [pc, #416]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	4965      	ldr	r1, [pc, #404]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fd3a 	bl	8005c30 <RCC_SetFlashLatencyFromMSIRange>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e389      	b.n	80058da <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051c6:	f000 fc6f 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4b5b      	ldr	r3, [pc, #364]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	495a      	ldr	r1, [pc, #360]	; (8005340 <HAL_RCC_OscConfig+0x29c>)
 80051d8:	5ccb      	ldrb	r3, [r1, r3]
 80051da:	f003 031f 	and.w	r3, r3, #31
 80051de:	fa22 f303 	lsr.w	r3, r2, r3
 80051e2:	4a58      	ldr	r2, [pc, #352]	; (8005344 <HAL_RCC_OscConfig+0x2a0>)
 80051e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80051e6:	4b58      	ldr	r3, [pc, #352]	; (8005348 <HAL_RCC_OscConfig+0x2a4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fd faaa 	bl	8002744 <HAL_InitTick>
 80051f0:	4603      	mov	r3, r0
 80051f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d052      	beq.n	80052a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	e36d      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d032      	beq.n	800526c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005206:	4b4d      	ldr	r3, [pc, #308]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a4c      	ldr	r2, [pc, #304]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005212:	f7fd fae7 	bl	80027e4 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800521a:	f7fd fae3 	bl	80027e4 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e356      	b.n	80058da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800522c:	4b43      	ldr	r3, [pc, #268]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005238:	4b40      	ldr	r3, [pc, #256]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a3f      	ldr	r2, [pc, #252]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800523e:	f043 0308 	orr.w	r3, r3, #8
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	4b3d      	ldr	r3, [pc, #244]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	493a      	ldr	r1, [pc, #232]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005252:	4313      	orrs	r3, r2
 8005254:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005256:	4b39      	ldr	r3, [pc, #228]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	4935      	ldr	r1, [pc, #212]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005266:	4313      	orrs	r3, r2
 8005268:	604b      	str	r3, [r1, #4]
 800526a:	e01a      	b.n	80052a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800526c:	4b33      	ldr	r3, [pc, #204]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a32      	ldr	r2, [pc, #200]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005272:	f023 0301 	bic.w	r3, r3, #1
 8005276:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005278:	f7fd fab4 	bl	80027e4 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005280:	f7fd fab0 	bl	80027e4 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e323      	b.n	80058da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005292:	4b2a      	ldr	r3, [pc, #168]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x1dc>
 800529e:	e000      	b.n	80052a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d073      	beq.n	8005396 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_OscConfig+0x21c>
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2b0c      	cmp	r3, #12
 80052b8:	d10e      	bne.n	80052d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d10b      	bne.n	80052d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c0:	4b1e      	ldr	r3, [pc, #120]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d063      	beq.n	8005394 <HAL_RCC_OscConfig+0x2f0>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d15f      	bne.n	8005394 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e300      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e0:	d106      	bne.n	80052f0 <HAL_RCC_OscConfig+0x24c>
 80052e2:	4b16      	ldr	r3, [pc, #88]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80052e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e01d      	b.n	800532c <HAL_RCC_OscConfig+0x288>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052f8:	d10c      	bne.n	8005314 <HAL_RCC_OscConfig+0x270>
 80052fa:	4b10      	ldr	r3, [pc, #64]	; (800533c <HAL_RCC_OscConfig+0x298>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a0f      	ldr	r2, [pc, #60]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	4b0d      	ldr	r3, [pc, #52]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a0c      	ldr	r2, [pc, #48]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800530c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e00b      	b.n	800532c <HAL_RCC_OscConfig+0x288>
 8005314:	4b09      	ldr	r3, [pc, #36]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a08      	ldr	r2, [pc, #32]	; (800533c <HAL_RCC_OscConfig+0x298>)
 800531a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	4b06      	ldr	r3, [pc, #24]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a05      	ldr	r2, [pc, #20]	; (800533c <HAL_RCC_OscConfig+0x298>)
 8005326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800532a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01b      	beq.n	800536c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fd fa56 	bl	80027e4 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800533a:	e010      	b.n	800535e <HAL_RCC_OscConfig+0x2ba>
 800533c:	40021000 	.word	0x40021000
 8005340:	08008ca0 	.word	0x08008ca0
 8005344:	20000000 	.word	0x20000000
 8005348:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800534c:	f7fd fa4a 	bl	80027e4 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b64      	cmp	r3, #100	; 0x64
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e2bd      	b.n	80058da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800535e:	4baf      	ldr	r3, [pc, #700]	; (800561c <HAL_RCC_OscConfig+0x578>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d0f0      	beq.n	800534c <HAL_RCC_OscConfig+0x2a8>
 800536a:	e014      	b.n	8005396 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536c:	f7fd fa3a 	bl	80027e4 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005374:	f7fd fa36 	bl	80027e4 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b64      	cmp	r3, #100	; 0x64
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e2a9      	b.n	80058da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005386:	4ba5      	ldr	r3, [pc, #660]	; (800561c <HAL_RCC_OscConfig+0x578>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x2d0>
 8005392:	e000      	b.n	8005396 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d060      	beq.n	8005464 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_OscConfig+0x310>
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b0c      	cmp	r3, #12
 80053ac:	d119      	bne.n	80053e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d116      	bne.n	80053e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053b4:	4b99      	ldr	r3, [pc, #612]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_OscConfig+0x328>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e286      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053cc:	4b93      	ldr	r3, [pc, #588]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	061b      	lsls	r3, r3, #24
 80053da:	4990      	ldr	r1, [pc, #576]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053e0:	e040      	b.n	8005464 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d023      	beq.n	8005432 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ea:	4b8c      	ldr	r3, [pc, #560]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a8b      	ldr	r2, [pc, #556]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80053f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fd f9f5 	bl	80027e4 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053fe:	f7fd f9f1 	bl	80027e4 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e264      	b.n	80058da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005410:	4b82      	ldr	r3, [pc, #520]	; (800561c <HAL_RCC_OscConfig+0x578>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541c:	4b7f      	ldr	r3, [pc, #508]	; (800561c <HAL_RCC_OscConfig+0x578>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	061b      	lsls	r3, r3, #24
 800542a:	497c      	ldr	r1, [pc, #496]	; (800561c <HAL_RCC_OscConfig+0x578>)
 800542c:	4313      	orrs	r3, r2
 800542e:	604b      	str	r3, [r1, #4]
 8005430:	e018      	b.n	8005464 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005432:	4b7a      	ldr	r3, [pc, #488]	; (800561c <HAL_RCC_OscConfig+0x578>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a79      	ldr	r2, [pc, #484]	; (800561c <HAL_RCC_OscConfig+0x578>)
 8005438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800543c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543e:	f7fd f9d1 	bl	80027e4 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005446:	f7fd f9cd 	bl	80027e4 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e240      	b.n	80058da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005458:	4b70      	ldr	r3, [pc, #448]	; (800561c <HAL_RCC_OscConfig+0x578>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1f0      	bne.n	8005446 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	2b00      	cmp	r3, #0
 800546e:	d03c      	beq.n	80054ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d01c      	beq.n	80054b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005478:	4b68      	ldr	r3, [pc, #416]	; (800561c <HAL_RCC_OscConfig+0x578>)
 800547a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800547e:	4a67      	ldr	r2, [pc, #412]	; (800561c <HAL_RCC_OscConfig+0x578>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005488:	f7fd f9ac 	bl	80027e4 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005490:	f7fd f9a8 	bl	80027e4 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e21b      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054a2:	4b5e      	ldr	r3, [pc, #376]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80054a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0ef      	beq.n	8005490 <HAL_RCC_OscConfig+0x3ec>
 80054b0:	e01b      	b.n	80054ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b2:	4b5a      	ldr	r3, [pc, #360]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80054b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b8:	4a58      	ldr	r2, [pc, #352]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c2:	f7fd f98f 	bl	80027e4 <HAL_GetTick>
 80054c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ca:	f7fd f98b 	bl	80027e4 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e1fe      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054dc:	4b4f      	ldr	r3, [pc, #316]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80054de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1ef      	bne.n	80054ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80a6 	beq.w	8005644 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f8:	2300      	movs	r3, #0
 80054fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80054fc:	4b47      	ldr	r3, [pc, #284]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80054fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10d      	bne.n	8005524 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005508:	4b44      	ldr	r3, [pc, #272]	; (800561c <HAL_RCC_OscConfig+0x578>)
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550c:	4a43      	ldr	r2, [pc, #268]	; (800561c <HAL_RCC_OscConfig+0x578>)
 800550e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005512:	6593      	str	r3, [r2, #88]	; 0x58
 8005514:	4b41      	ldr	r3, [pc, #260]	; (800561c <HAL_RCC_OscConfig+0x578>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005520:	2301      	movs	r3, #1
 8005522:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005524:	4b3e      	ldr	r3, [pc, #248]	; (8005620 <HAL_RCC_OscConfig+0x57c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d118      	bne.n	8005562 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005530:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <HAL_RCC_OscConfig+0x57c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a3a      	ldr	r2, [pc, #232]	; (8005620 <HAL_RCC_OscConfig+0x57c>)
 8005536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553c:	f7fd f952 	bl	80027e4 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005544:	f7fd f94e 	bl	80027e4 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e1c1      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005556:	4b32      	ldr	r3, [pc, #200]	; (8005620 <HAL_RCC_OscConfig+0x57c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d108      	bne.n	800557c <HAL_RCC_OscConfig+0x4d8>
 800556a:	4b2c      	ldr	r3, [pc, #176]	; (800561c <HAL_RCC_OscConfig+0x578>)
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005570:	4a2a      	ldr	r2, [pc, #168]	; (800561c <HAL_RCC_OscConfig+0x578>)
 8005572:	f043 0301 	orr.w	r3, r3, #1
 8005576:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800557a:	e024      	b.n	80055c6 <HAL_RCC_OscConfig+0x522>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b05      	cmp	r3, #5
 8005582:	d110      	bne.n	80055a6 <HAL_RCC_OscConfig+0x502>
 8005584:	4b25      	ldr	r3, [pc, #148]	; (800561c <HAL_RCC_OscConfig+0x578>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	4a24      	ldr	r2, [pc, #144]	; (800561c <HAL_RCC_OscConfig+0x578>)
 800558c:	f043 0304 	orr.w	r3, r3, #4
 8005590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005594:	4b21      	ldr	r3, [pc, #132]	; (800561c <HAL_RCC_OscConfig+0x578>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	4a20      	ldr	r2, [pc, #128]	; (800561c <HAL_RCC_OscConfig+0x578>)
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055a4:	e00f      	b.n	80055c6 <HAL_RCC_OscConfig+0x522>
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ac:	4a1b      	ldr	r2, [pc, #108]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80055ae:	f023 0301 	bic.w	r3, r3, #1
 80055b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80055b6:	4b19      	ldr	r3, [pc, #100]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80055b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055bc:	4a17      	ldr	r2, [pc, #92]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80055be:	f023 0304 	bic.w	r3, r3, #4
 80055c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ce:	f7fd f909 	bl	80027e4 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d4:	e00a      	b.n	80055ec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d6:	f7fd f905 	bl	80027e4 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e176      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ec:	4b0b      	ldr	r3, [pc, #44]	; (800561c <HAL_RCC_OscConfig+0x578>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0ed      	beq.n	80055d6 <HAL_RCC_OscConfig+0x532>
 80055fa:	e01a      	b.n	8005632 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fd f8f2 	bl	80027e4 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005602:	e00f      	b.n	8005624 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005604:	f7fd f8ee 	bl	80027e4 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d906      	bls.n	8005624 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e15f      	b.n	80058da <HAL_RCC_OscConfig+0x836>
 800561a:	bf00      	nop
 800561c:	40021000 	.word	0x40021000
 8005620:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005624:	4baa      	ldr	r3, [pc, #680]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e8      	bne.n	8005604 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005632:	7ffb      	ldrb	r3, [r7, #31]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d105      	bne.n	8005644 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005638:	4ba5      	ldr	r3, [pc, #660]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800563a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563c:	4aa4      	ldr	r2, [pc, #656]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800563e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005642:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d03c      	beq.n	80056ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01c      	beq.n	8005692 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005658:	4b9d      	ldr	r3, [pc, #628]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800565a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800565e:	4a9c      	ldr	r2, [pc, #624]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005668:	f7fd f8bc 	bl	80027e4 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005670:	f7fd f8b8 	bl	80027e4 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e12b      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005682:	4b93      	ldr	r3, [pc, #588]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0ef      	beq.n	8005670 <HAL_RCC_OscConfig+0x5cc>
 8005690:	e01b      	b.n	80056ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005692:	4b8f      	ldr	r3, [pc, #572]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005694:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005698:	4a8d      	ldr	r2, [pc, #564]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800569a:	f023 0301 	bic.w	r3, r3, #1
 800569e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a2:	f7fd f89f 	bl	80027e4 <HAL_GetTick>
 80056a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056aa:	f7fd f89b 	bl	80027e4 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e10e      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056bc:	4b84      	ldr	r3, [pc, #528]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 80056be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1ef      	bne.n	80056aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8102 	beq.w	80058d8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d8:	2b02      	cmp	r3, #2
 80056da:	f040 80c5 	bne.w	8005868 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80056de:	4b7c      	ldr	r3, [pc, #496]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f003 0203 	and.w	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d12c      	bne.n	800574c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	3b01      	subs	r3, #1
 80056fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005700:	429a      	cmp	r2, r3
 8005702:	d123      	bne.n	800574c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d11b      	bne.n	800574c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005720:	429a      	cmp	r2, r3
 8005722:	d113      	bne.n	800574c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	3b01      	subs	r3, #1
 8005732:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005734:	429a      	cmp	r2, r3
 8005736:	d109      	bne.n	800574c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	085b      	lsrs	r3, r3, #1
 8005744:	3b01      	subs	r3, #1
 8005746:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005748:	429a      	cmp	r2, r3
 800574a:	d067      	beq.n	800581c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	2b0c      	cmp	r3, #12
 8005750:	d062      	beq.n	8005818 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005752:	4b5f      	ldr	r3, [pc, #380]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e0bb      	b.n	80058da <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005762:	4b5b      	ldr	r3, [pc, #364]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a5a      	ldr	r2, [pc, #360]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005768:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800576c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800576e:	f7fd f839 	bl	80027e4 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005776:	f7fd f835 	bl	80027e4 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e0a8      	b.n	80058da <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005788:	4b51      	ldr	r3, [pc, #324]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f0      	bne.n	8005776 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005794:	4b4e      	ldr	r3, [pc, #312]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	4b4e      	ldr	r3, [pc, #312]	; (80058d4 <HAL_RCC_OscConfig+0x830>)
 800579a:	4013      	ands	r3, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057a4:	3a01      	subs	r2, #1
 80057a6:	0112      	lsls	r2, r2, #4
 80057a8:	4311      	orrs	r1, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057ae:	0212      	lsls	r2, r2, #8
 80057b0:	4311      	orrs	r1, r2
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057b6:	0852      	lsrs	r2, r2, #1
 80057b8:	3a01      	subs	r2, #1
 80057ba:	0552      	lsls	r2, r2, #21
 80057bc:	4311      	orrs	r1, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057c2:	0852      	lsrs	r2, r2, #1
 80057c4:	3a01      	subs	r2, #1
 80057c6:	0652      	lsls	r2, r2, #25
 80057c8:	4311      	orrs	r1, r2
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057ce:	06d2      	lsls	r2, r2, #27
 80057d0:	430a      	orrs	r2, r1
 80057d2:	493f      	ldr	r1, [pc, #252]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80057d8:	4b3d      	ldr	r3, [pc, #244]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a3c      	ldr	r2, [pc, #240]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 80057de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057e4:	4b3a      	ldr	r3, [pc, #232]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	4a39      	ldr	r2, [pc, #228]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 80057ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057f0:	f7fc fff8 	bl	80027e4 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f8:	f7fc fff4 	bl	80027e4 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e067      	b.n	80058da <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800580a:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d0f0      	beq.n	80057f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005816:	e05f      	b.n	80058d8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e05e      	b.n	80058da <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800581c:	4b2c      	ldr	r3, [pc, #176]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d157      	bne.n	80058d8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005828:	4b29      	ldr	r3, [pc, #164]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a28      	ldr	r2, [pc, #160]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800582e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005832:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005834:	4b26      	ldr	r3, [pc, #152]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	4a25      	ldr	r2, [pc, #148]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800583a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800583e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005840:	f7fc ffd0 	bl	80027e4 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005848:	f7fc ffcc 	bl	80027e4 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e03f      	b.n	80058da <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800585a:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0x7a4>
 8005866:	e037      	b.n	80058d8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b0c      	cmp	r3, #12
 800586c:	d02d      	beq.n	80058ca <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586e:	4b18      	ldr	r3, [pc, #96]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005878:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800587a:	4b15      	ldr	r3, [pc, #84]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d105      	bne.n	8005892 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005886:	4b12      	ldr	r3, [pc, #72]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	4a11      	ldr	r2, [pc, #68]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 800588c:	f023 0303 	bic.w	r3, r3, #3
 8005890:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005892:	4b0f      	ldr	r3, [pc, #60]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	4a0e      	ldr	r2, [pc, #56]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 8005898:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800589c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a2:	f7fc ff9f 	bl	80027e4 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a8:	e008      	b.n	80058bc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058aa:	f7fc ff9b 	bl	80027e4 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d901      	bls.n	80058bc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e00e      	b.n	80058da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <HAL_RCC_OscConfig+0x82c>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1f0      	bne.n	80058aa <HAL_RCC_OscConfig+0x806>
 80058c8:	e006      	b.n	80058d8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e005      	b.n	80058da <HAL_RCC_OscConfig+0x836>
 80058ce:	bf00      	nop
 80058d0:	40021000 	.word	0x40021000
 80058d4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop

080058e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0c8      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058f8:	4b66      	ldr	r3, [pc, #408]	; (8005a94 <HAL_RCC_ClockConfig+0x1b0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d910      	bls.n	8005928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005906:	4b63      	ldr	r3, [pc, #396]	; (8005a94 <HAL_RCC_ClockConfig+0x1b0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f023 0207 	bic.w	r2, r3, #7
 800590e:	4961      	ldr	r1, [pc, #388]	; (8005a94 <HAL_RCC_ClockConfig+0x1b0>)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	4313      	orrs	r3, r2
 8005914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005916:	4b5f      	ldr	r3, [pc, #380]	; (8005a94 <HAL_RCC_ClockConfig+0x1b0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e0b0      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d04c      	beq.n	80059ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b03      	cmp	r3, #3
 800593a:	d107      	bne.n	800594c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800593c:	4b56      	ldr	r3, [pc, #344]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d121      	bne.n	800598c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e09e      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d107      	bne.n	8005964 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005954:	4b50      	ldr	r3, [pc, #320]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d115      	bne.n	800598c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e092      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d107      	bne.n	800597c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800596c:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d109      	bne.n	800598c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e086      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800597c:	4b46      	ldr	r3, [pc, #280]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e07e      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800598c:	4b42      	ldr	r3, [pc, #264]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f023 0203 	bic.w	r2, r3, #3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	493f      	ldr	r1, [pc, #252]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 800599a:	4313      	orrs	r3, r2
 800599c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599e:	f7fc ff21 	bl	80027e4 <HAL_GetTick>
 80059a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a4:	e00a      	b.n	80059bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a6:	f7fc ff1d 	bl	80027e4 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e066      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059bc:	4b36      	ldr	r3, [pc, #216]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 020c 	and.w	r2, r3, #12
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d1eb      	bne.n	80059a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059da:	4b2f      	ldr	r3, [pc, #188]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	492c      	ldr	r1, [pc, #176]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ec:	4b29      	ldr	r3, [pc, #164]	; (8005a94 <HAL_RCC_ClockConfig+0x1b0>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d210      	bcs.n	8005a1c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b26      	ldr	r3, [pc, #152]	; (8005a94 <HAL_RCC_ClockConfig+0x1b0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f023 0207 	bic.w	r2, r3, #7
 8005a02:	4924      	ldr	r1, [pc, #144]	; (8005a94 <HAL_RCC_ClockConfig+0x1b0>)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0a:	4b22      	ldr	r3, [pc, #136]	; (8005a94 <HAL_RCC_ClockConfig+0x1b0>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e036      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d008      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a28:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	4918      	ldr	r1, [pc, #96]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a46:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4910      	ldr	r1, [pc, #64]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a5a:	f000 f825 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <HAL_RCC_ClockConfig+0x1b4>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	490c      	ldr	r1, [pc, #48]	; (8005a9c <HAL_RCC_ClockConfig+0x1b8>)
 8005a6c:	5ccb      	ldrb	r3, [r1, r3]
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	4a0a      	ldr	r2, [pc, #40]	; (8005aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	; (8005aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fc fe60 	bl	8002744 <HAL_InitTick>
 8005a84:	4603      	mov	r3, r0
 8005a86:	72fb      	strb	r3, [r7, #11]

  return status;
 8005a88:	7afb      	ldrb	r3, [r7, #11]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40022000 	.word	0x40022000
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	08008ca0 	.word	0x08008ca0
 8005aa0:	20000000 	.word	0x20000000
 8005aa4:	20000004 	.word	0x20000004

08005aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b089      	sub	sp, #36	; 0x24
 8005aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	61fb      	str	r3, [r7, #28]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ab6:	4b3e      	ldr	r3, [pc, #248]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 030c 	and.w	r3, r3, #12
 8005abe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac0:	4b3b      	ldr	r3, [pc, #236]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d005      	beq.n	8005adc <HAL_RCC_GetSysClockFreq+0x34>
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	2b0c      	cmp	r3, #12
 8005ad4:	d121      	bne.n	8005b1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d11e      	bne.n	8005b1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005adc:	4b34      	ldr	r3, [pc, #208]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d107      	bne.n	8005af8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ae8:	4b31      	ldr	r3, [pc, #196]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005aee:	0a1b      	lsrs	r3, r3, #8
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	61fb      	str	r3, [r7, #28]
 8005af6:	e005      	b.n	8005b04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005af8:	4b2d      	ldr	r3, [pc, #180]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	091b      	lsrs	r3, r3, #4
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b04:	4a2b      	ldr	r2, [pc, #172]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10d      	bne.n	8005b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b18:	e00a      	b.n	8005b30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d102      	bne.n	8005b26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b20:	4b25      	ldr	r3, [pc, #148]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b22:	61bb      	str	r3, [r7, #24]
 8005b24:	e004      	b.n	8005b30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b2c:	4b23      	ldr	r3, [pc, #140]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8005b2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b0c      	cmp	r3, #12
 8005b34:	d134      	bne.n	8005ba0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b36:	4b1e      	ldr	r3, [pc, #120]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d003      	beq.n	8005b4e <HAL_RCC_GetSysClockFreq+0xa6>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d003      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0xac>
 8005b4c:	e005      	b.n	8005b5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b4e:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b50:	617b      	str	r3, [r7, #20]
      break;
 8005b52:	e005      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b54:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8005b56:	617b      	str	r3, [r7, #20]
      break;
 8005b58:	e002      	b.n	8005b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	617b      	str	r3, [r7, #20]
      break;
 8005b5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b60:	4b13      	ldr	r3, [pc, #76]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	091b      	lsrs	r3, r3, #4
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b6e:	4b10      	ldr	r3, [pc, #64]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	0a1b      	lsrs	r3, r3, #8
 8005b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	fb02 f203 	mul.w	r2, r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b86:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	0e5b      	lsrs	r3, r3, #25
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	3301      	adds	r3, #1
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3724      	adds	r7, #36	; 0x24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	08008cb8 	.word	0x08008cb8
 8005bb8:	00f42400 	.word	0x00f42400
 8005bbc:	007a1200 	.word	0x007a1200

08005bc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc4:	4b03      	ldr	r3, [pc, #12]	; (8005bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	20000000 	.word	0x20000000

08005bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bdc:	f7ff fff0 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005be0:	4602      	mov	r2, r0
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	f003 0307 	and.w	r3, r3, #7
 8005bec:	4904      	ldr	r1, [pc, #16]	; (8005c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bee:	5ccb      	ldrb	r3, [r1, r3]
 8005bf0:	f003 031f 	and.w	r3, r3, #31
 8005bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	08008cb0 	.word	0x08008cb0

08005c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c08:	f7ff ffda 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	0adb      	lsrs	r3, r3, #11
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4904      	ldr	r1, [pc, #16]	; (8005c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40021000 	.word	0x40021000
 8005c2c:	08008cb0 	.word	0x08008cb0

08005c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c48:	f7ff f9ae 	bl	8004fa8 <HAL_PWREx_GetVoltageRange>
 8005c4c:	6178      	str	r0, [r7, #20]
 8005c4e:	e014      	b.n	8005c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c50:	4b25      	ldr	r3, [pc, #148]	; (8005ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c54:	4a24      	ldr	r2, [pc, #144]	; (8005ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c5c:	4b22      	ldr	r3, [pc, #136]	; (8005ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c68:	f7ff f99e 	bl	8004fa8 <HAL_PWREx_GetVoltageRange>
 8005c6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c72:	4a1d      	ldr	r2, [pc, #116]	; (8005ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c80:	d10b      	bne.n	8005c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b80      	cmp	r3, #128	; 0x80
 8005c86:	d919      	bls.n	8005cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2ba0      	cmp	r3, #160	; 0xa0
 8005c8c:	d902      	bls.n	8005c94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c8e:	2302      	movs	r3, #2
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e013      	b.n	8005cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c94:	2301      	movs	r3, #1
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	e010      	b.n	8005cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b80      	cmp	r3, #128	; 0x80
 8005c9e:	d902      	bls.n	8005ca6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	613b      	str	r3, [r7, #16]
 8005ca4:	e00a      	b.n	8005cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	d102      	bne.n	8005cb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cac:	2302      	movs	r3, #2
 8005cae:	613b      	str	r3, [r7, #16]
 8005cb0:	e004      	b.n	8005cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b70      	cmp	r3, #112	; 0x70
 8005cb6:	d101      	bne.n	8005cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cb8:	2301      	movs	r3, #1
 8005cba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005cbc:	4b0b      	ldr	r3, [pc, #44]	; (8005cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f023 0207 	bic.w	r2, r3, #7
 8005cc4:	4909      	ldr	r1, [pc, #36]	; (8005cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005ccc:	4b07      	ldr	r3, [pc, #28]	; (8005cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d001      	beq.n	8005cde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40021000 	.word	0x40021000
 8005cec:	40022000 	.word	0x40022000

08005cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d031      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d14:	d01a      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005d16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d1a:	d814      	bhi.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d009      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d24:	d10f      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005d26:	4b5d      	ldr	r3, [pc, #372]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	4a5c      	ldr	r2, [pc, #368]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d32:	e00c      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	3304      	adds	r3, #4
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 fa1e 	bl	800617c <RCCEx_PLLSAI1_Config>
 8005d40:	4603      	mov	r3, r0
 8005d42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d44:	e003      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	74fb      	strb	r3, [r7, #19]
      break;
 8005d4a:	e000      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d4e:	7cfb      	ldrb	r3, [r7, #19]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10b      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d54:	4b51      	ldr	r3, [pc, #324]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	494e      	ldr	r1, [pc, #312]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d6a:	e001      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6c:	7cfb      	ldrb	r3, [r7, #19]
 8005d6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 809e 	beq.w	8005eba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d82:	4b46      	ldr	r3, [pc, #280]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00d      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d98:	4b40      	ldr	r3, [pc, #256]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9c:	4a3f      	ldr	r2, [pc, #252]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6593      	str	r3, [r2, #88]	; 0x58
 8005da4:	4b3d      	ldr	r3, [pc, #244]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005db0:	2301      	movs	r3, #1
 8005db2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005db4:	4b3a      	ldr	r3, [pc, #232]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a39      	ldr	r2, [pc, #228]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dc0:	f7fc fd10 	bl	80027e4 <HAL_GetTick>
 8005dc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dc6:	e009      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc8:	f7fc fd0c 	bl	80027e4 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d902      	bls.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	74fb      	strb	r3, [r7, #19]
        break;
 8005dda:	e005      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ddc:	4b30      	ldr	r3, [pc, #192]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0ef      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005de8:	7cfb      	ldrb	r3, [r7, #19]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d15a      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005dee:	4b2b      	ldr	r3, [pc, #172]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01e      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d019      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e0a:	4b24      	ldr	r3, [pc, #144]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e16:	4b21      	ldr	r3, [pc, #132]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1c:	4a1f      	ldr	r2, [pc, #124]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e26:	4b1d      	ldr	r3, [pc, #116]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2c:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e36:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d016      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fc fccc 	bl	80027e4 <HAL_GetTick>
 8005e4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e4e:	e00b      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e50:	f7fc fcc8 	bl	80027e4 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d902      	bls.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	74fb      	strb	r3, [r7, #19]
            break;
 8005e66:	e006      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e68:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0ec      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005e76:	7cfb      	ldrb	r3, [r7, #19]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d10b      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e7c:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8a:	4904      	ldr	r1, [pc, #16]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e92:	e009      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e94:	7cfb      	ldrb	r3, [r7, #19]
 8005e96:	74bb      	strb	r3, [r7, #18]
 8005e98:	e006      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea4:	7cfb      	ldrb	r3, [r7, #19]
 8005ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ea8:	7c7b      	ldrb	r3, [r7, #17]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d105      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eae:	4bb2      	ldr	r3, [pc, #712]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb2:	4ab1      	ldr	r2, [pc, #708]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00a      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ec6:	4bac      	ldr	r3, [pc, #688]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ecc:	f023 0203 	bic.w	r2, r3, #3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	49a8      	ldr	r1, [pc, #672]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0302 	and.w	r3, r3, #2
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00a      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ee8:	4ba3      	ldr	r3, [pc, #652]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eee:	f023 020c 	bic.w	r2, r3, #12
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	49a0      	ldr	r1, [pc, #640]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f0a:	4b9b      	ldr	r3, [pc, #620]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	4997      	ldr	r1, [pc, #604]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f2c:	4b92      	ldr	r3, [pc, #584]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3a:	498f      	ldr	r1, [pc, #572]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f4e:	4b8a      	ldr	r3, [pc, #552]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5c:	4986      	ldr	r1, [pc, #536]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f70:	4b81      	ldr	r3, [pc, #516]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	497e      	ldr	r1, [pc, #504]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f92:	4b79      	ldr	r3, [pc, #484]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	4975      	ldr	r1, [pc, #468]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fb4:	4b70      	ldr	r3, [pc, #448]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	496d      	ldr	r1, [pc, #436]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fd6:	4b68      	ldr	r3, [pc, #416]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	4964      	ldr	r1, [pc, #400]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d028      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ff8:	4b5f      	ldr	r3, [pc, #380]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006006:	495c      	ldr	r1, [pc, #368]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006016:	d106      	bne.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006018:	4b57      	ldr	r3, [pc, #348]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a56      	ldr	r2, [pc, #344]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800601e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006022:	60d3      	str	r3, [r2, #12]
 8006024:	e011      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800602a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800602e:	d10c      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	2101      	movs	r1, #1
 8006036:	4618      	mov	r0, r3
 8006038:	f000 f8a0 	bl	800617c <RCCEx_PLLSAI1_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8006046:	7cfb      	ldrb	r3, [r7, #19]
 8006048:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d028      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006056:	4b48      	ldr	r3, [pc, #288]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006064:	4944      	ldr	r1, [pc, #272]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006074:	d106      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006076:	4b40      	ldr	r3, [pc, #256]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	4a3f      	ldr	r2, [pc, #252]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800607c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006080:	60d3      	str	r3, [r2, #12]
 8006082:	e011      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800608c:	d10c      	bne.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3304      	adds	r3, #4
 8006092:	2101      	movs	r1, #1
 8006094:	4618      	mov	r0, r3
 8006096:	f000 f871 	bl	800617c <RCCEx_PLLSAI1_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800609e:	7cfb      	ldrb	r3, [r7, #19]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80060a4:	7cfb      	ldrb	r3, [r7, #19]
 80060a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d028      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060b4:	4b30      	ldr	r3, [pc, #192]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c2:	492d      	ldr	r1, [pc, #180]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d2:	d106      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060d4:	4b28      	ldr	r3, [pc, #160]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4a27      	ldr	r2, [pc, #156]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060de:	60d3      	str	r3, [r2, #12]
 80060e0:	e011      	b.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060ea:	d10c      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3304      	adds	r3, #4
 80060f0:	2101      	movs	r1, #1
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f842 	bl	800617c <RCCEx_PLLSAI1_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060fc:	7cfb      	ldrb	r3, [r7, #19]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 8006102:	7cfb      	ldrb	r3, [r7, #19]
 8006104:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01c      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006112:	4b19      	ldr	r3, [pc, #100]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006118:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006120:	4915      	ldr	r1, [pc, #84]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006122:	4313      	orrs	r3, r2
 8006124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006130:	d10c      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3304      	adds	r3, #4
 8006136:	2102      	movs	r1, #2
 8006138:	4618      	mov	r0, r3
 800613a:	f000 f81f 	bl	800617c <RCCEx_PLLSAI1_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006142:	7cfb      	ldrb	r3, [r7, #19]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8006148:	7cfb      	ldrb	r3, [r7, #19]
 800614a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00a      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800615a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006166:	4904      	ldr	r1, [pc, #16]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006168:	4313      	orrs	r3, r2
 800616a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800616e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40021000 	.word	0x40021000

0800617c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800618a:	4b74      	ldr	r3, [pc, #464]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d018      	beq.n	80061c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006196:	4b71      	ldr	r3, [pc, #452]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0203 	and.w	r2, r3, #3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d10d      	bne.n	80061c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
       ||
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80061ae:	4b6b      	ldr	r3, [pc, #428]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	091b      	lsrs	r3, r3, #4
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
       ||
 80061be:	429a      	cmp	r2, r3
 80061c0:	d047      	beq.n	8006252 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	73fb      	strb	r3, [r7, #15]
 80061c6:	e044      	b.n	8006252 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	d018      	beq.n	8006202 <RCCEx_PLLSAI1_Config+0x86>
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d825      	bhi.n	8006220 <RCCEx_PLLSAI1_Config+0xa4>
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d002      	beq.n	80061de <RCCEx_PLLSAI1_Config+0x62>
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d009      	beq.n	80061f0 <RCCEx_PLLSAI1_Config+0x74>
 80061dc:	e020      	b.n	8006220 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80061de:	4b5f      	ldr	r3, [pc, #380]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d11d      	bne.n	8006226 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ee:	e01a      	b.n	8006226 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80061f0:	4b5a      	ldr	r3, [pc, #360]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d116      	bne.n	800622a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006200:	e013      	b.n	800622a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006202:	4b56      	ldr	r3, [pc, #344]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10f      	bne.n	800622e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800620e:	4b53      	ldr	r3, [pc, #332]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800621e:	e006      	b.n	800622e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
      break;
 8006224:	e004      	b.n	8006230 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006226:	bf00      	nop
 8006228:	e002      	b.n	8006230 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800622a:	bf00      	nop
 800622c:	e000      	b.n	8006230 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800622e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10d      	bne.n	8006252 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006236:	4b49      	ldr	r3, [pc, #292]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	3b01      	subs	r3, #1
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	430b      	orrs	r3, r1
 800624c:	4943      	ldr	r1, [pc, #268]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 800624e:	4313      	orrs	r3, r2
 8006250:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d17c      	bne.n	8006352 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006258:	4b40      	ldr	r3, [pc, #256]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a3f      	ldr	r2, [pc, #252]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 800625e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006264:	f7fc fabe 	bl	80027e4 <HAL_GetTick>
 8006268:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800626a:	e009      	b.n	8006280 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800626c:	f7fc faba 	bl	80027e4 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d902      	bls.n	8006280 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	73fb      	strb	r3, [r7, #15]
        break;
 800627e:	e005      	b.n	800628c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006280:	4b36      	ldr	r3, [pc, #216]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1ef      	bne.n	800626c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d15f      	bne.n	8006352 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d110      	bne.n	80062ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006298:	4b30      	ldr	r3, [pc, #192]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80062a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6892      	ldr	r2, [r2, #8]
 80062a8:	0211      	lsls	r1, r2, #8
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	68d2      	ldr	r2, [r2, #12]
 80062ae:	06d2      	lsls	r2, r2, #27
 80062b0:	430a      	orrs	r2, r1
 80062b2:	492a      	ldr	r1, [pc, #168]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	610b      	str	r3, [r1, #16]
 80062b8:	e027      	b.n	800630a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d112      	bne.n	80062e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062c0:	4b26      	ldr	r3, [pc, #152]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80062c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6892      	ldr	r2, [r2, #8]
 80062d0:	0211      	lsls	r1, r2, #8
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6912      	ldr	r2, [r2, #16]
 80062d6:	0852      	lsrs	r2, r2, #1
 80062d8:	3a01      	subs	r2, #1
 80062da:	0552      	lsls	r2, r2, #21
 80062dc:	430a      	orrs	r2, r1
 80062de:	491f      	ldr	r1, [pc, #124]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	610b      	str	r3, [r1, #16]
 80062e4:	e011      	b.n	800630a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80062e6:	4b1d      	ldr	r3, [pc, #116]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80062ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6892      	ldr	r2, [r2, #8]
 80062f6:	0211      	lsls	r1, r2, #8
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6952      	ldr	r2, [r2, #20]
 80062fc:	0852      	lsrs	r2, r2, #1
 80062fe:	3a01      	subs	r2, #1
 8006300:	0652      	lsls	r2, r2, #25
 8006302:	430a      	orrs	r2, r1
 8006304:	4915      	ldr	r1, [pc, #84]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006306:	4313      	orrs	r3, r2
 8006308:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800630a:	4b14      	ldr	r3, [pc, #80]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a13      	ldr	r2, [pc, #76]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006310:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006314:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006316:	f7fc fa65 	bl	80027e4 <HAL_GetTick>
 800631a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800631c:	e009      	b.n	8006332 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800631e:	f7fc fa61 	bl	80027e4 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d902      	bls.n	8006332 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	73fb      	strb	r3, [r7, #15]
          break;
 8006330:	e005      	b.n	800633e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006332:	4b0a      	ldr	r3, [pc, #40]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d0ef      	beq.n	800631e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800633e:	7bfb      	ldrb	r3, [r7, #15]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	4903      	ldr	r1, [pc, #12]	; (800635c <RCCEx_PLLSAI1_Config+0x1e0>)
 800634e:	4313      	orrs	r3, r2
 8006350:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006352:	7bfb      	ldrb	r3, [r7, #15]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	40021000 	.word	0x40021000

08006360 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d06c      	beq.n	800644c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fb fff2 	bl	8002370 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	22ca      	movs	r2, #202	; 0xca
 800639a:	625a      	str	r2, [r3, #36]	; 0x24
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2253      	movs	r2, #83	; 0x53
 80063a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f87c 	bl	80064a2 <RTC_EnterInitMode>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d14b      	bne.n	800644c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6899      	ldr	r1, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	68d2      	ldr	r2, [r2, #12]
 80063ee:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6919      	ldr	r1, [r3, #16]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	041a      	lsls	r2, r3, #16
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f87f 	bl	8006508 <RTC_ExitInitMode>
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11b      	bne.n	800644c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f022 0203 	bic.w	r2, r2, #3
 8006422:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69da      	ldr	r2, [r3, #28]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	22ff      	movs	r2, #255	; 0xff
 8006442:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800646c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800646e:	f7fc f9b9 	bl	80027e4 <HAL_GetTick>
 8006472:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006474:	e009      	b.n	800648a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006476:	f7fc f9b5 	bl	80027e4 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006484:	d901      	bls.n	800648a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e007      	b.n	800649a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0ee      	beq.n	8006476 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d120      	bne.n	80064fe <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80064c6:	f7fc f98d 	bl	80027e4 <HAL_GetTick>
 80064ca:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064cc:	e00d      	b.n	80064ea <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80064ce:	f7fc f989 	bl	80027e4 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064dc:	d905      	bls.n	80064ea <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2203      	movs	r2, #3
 80064e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <RTC_EnterInitMode+0x5c>
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d1e7      	bne.n	80064ce <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006514:	4b1a      	ldr	r3, [pc, #104]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	4a19      	ldr	r2, [pc, #100]	; (8006580 <RTC_ExitInitMode+0x78>)
 800651a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800651e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006520:	4b17      	ldr	r3, [pc, #92]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10c      	bne.n	8006546 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f7ff ff92 	bl	8006456 <HAL_RTC_WaitForSynchro>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01e      	beq.n	8006576 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2203      	movs	r2, #3
 800653c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	73fb      	strb	r3, [r7, #15]
 8006544:	e017      	b.n	8006576 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006546:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	4a0d      	ldr	r2, [pc, #52]	; (8006580 <RTC_ExitInitMode+0x78>)
 800654c:	f023 0320 	bic.w	r3, r3, #32
 8006550:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff ff7f 	bl	8006456 <HAL_RTC_WaitForSynchro>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2203      	movs	r2, #3
 8006562:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <RTC_ExitInitMode+0x78>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	4a04      	ldr	r2, [pc, #16]	; (8006580 <RTC_ExitInitMode+0x78>)
 8006570:	f043 0320 	orr.w	r3, r3, #32
 8006574:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006576:	7bfb      	ldrb	r3, [r7, #15]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40002800 	.word	0x40002800

08006584 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800659a:	2302      	movs	r3, #2
 800659c:	e07f      	b.n	800669e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	22ca      	movs	r2, #202	; 0xca
 80065b4:	625a      	str	r2, [r3, #36]	; 0x24
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2253      	movs	r2, #83	; 0x53
 80065bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065cc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	b2da      	uxtb	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80065de:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d120      	bne.n	8006630 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80065ee:	f7fc f8f9 	bl	80027e4 <HAL_GetTick>
 80065f2:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80065f4:	e015      	b.n	8006622 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065f6:	f7fc f8f5 	bl	80027e4 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006604:	d90d      	bls.n	8006622 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	22ff      	movs	r2, #255	; 0xff
 800660c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2203      	movs	r2, #3
 8006612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e03d      	b.n	800669e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0e2      	beq.n	80065f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f023 0107 	bic.w	r1, r3, #7
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	430a      	orrs	r2, r1
 800664a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800664c:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8006652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006656:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006658:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	4a12      	ldr	r2, [pc, #72]	; (80066a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800665e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006662:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006672:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	689a      	ldr	r2, [r3, #8]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006682:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	22ff      	movs	r2, #255	; 0xff
 800668a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	40010400 	.word	0x40010400

080066ac <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80066be:	2302      	movs	r3, #2
 80066c0:	e04d      	b.n	800675e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2202      	movs	r2, #2
 80066ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	22ca      	movs	r2, #202	; 0xca
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2253      	movs	r2, #83	; 0x53
 80066e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006700:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8006702:	f7fc f86f 	bl	80027e4 <HAL_GetTick>
 8006706:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006708:	e015      	b.n	8006736 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800670a:	f7fc f86b 	bl	80027e4 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006718:	d90d      	bls.n	8006736 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	22ff      	movs	r2, #255	; 0xff
 8006720:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2203      	movs	r2, #3
 8006726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e013      	b.n	800675e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0e2      	beq.n	800670a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	22ff      	movs	r2, #255	; 0xff
 800674a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3710      	adds	r7, #16
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
	...

08006768 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006770:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8006772:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006776:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00b      	beq.n	800679e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006796:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f80b 	bl	80067b4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40010400 	.word	0x40010400

080067b4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3350      	adds	r3, #80	; 0x50
 80067da:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	009a      	lsls	r2, r3, #2
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	4413      	add	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	461a      	mov	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6013      	str	r3, [r2, #0]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b085      	sub	sp, #20
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3350      	adds	r3, #80	; 0x50
 800680a:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e049      	b.n	80068cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d106      	bne.n	8006852 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7fb fdc7 	bl	80023e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	3304      	adds	r3, #4
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f000 faaf 	bl	8006dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d109      	bne.n	80068f8 <HAL_TIM_PWM_Start+0x24>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	bf14      	ite	ne
 80068f0:	2301      	movne	r3, #1
 80068f2:	2300      	moveq	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	e03c      	b.n	8006972 <HAL_TIM_PWM_Start+0x9e>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d109      	bne.n	8006912 <HAL_TIM_PWM_Start+0x3e>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	bf14      	ite	ne
 800690a:	2301      	movne	r3, #1
 800690c:	2300      	moveq	r3, #0
 800690e:	b2db      	uxtb	r3, r3
 8006910:	e02f      	b.n	8006972 <HAL_TIM_PWM_Start+0x9e>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b08      	cmp	r3, #8
 8006916:	d109      	bne.n	800692c <HAL_TIM_PWM_Start+0x58>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b01      	cmp	r3, #1
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2300      	moveq	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	e022      	b.n	8006972 <HAL_TIM_PWM_Start+0x9e>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b0c      	cmp	r3, #12
 8006930:	d109      	bne.n	8006946 <HAL_TIM_PWM_Start+0x72>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b01      	cmp	r3, #1
 800693c:	bf14      	ite	ne
 800693e:	2301      	movne	r3, #1
 8006940:	2300      	moveq	r3, #0
 8006942:	b2db      	uxtb	r3, r3
 8006944:	e015      	b.n	8006972 <HAL_TIM_PWM_Start+0x9e>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b10      	cmp	r3, #16
 800694a:	d109      	bne.n	8006960 <HAL_TIM_PWM_Start+0x8c>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b01      	cmp	r3, #1
 8006956:	bf14      	ite	ne
 8006958:	2301      	movne	r3, #1
 800695a:	2300      	moveq	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	e008      	b.n	8006972 <HAL_TIM_PWM_Start+0x9e>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	bf14      	ite	ne
 800696c:	2301      	movne	r3, #1
 800696e:	2300      	moveq	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e07e      	b.n	8006a78 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <HAL_TIM_PWM_Start+0xb6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006988:	e023      	b.n	80069d2 <HAL_TIM_PWM_Start+0xfe>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b04      	cmp	r3, #4
 800698e:	d104      	bne.n	800699a <HAL_TIM_PWM_Start+0xc6>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006998:	e01b      	b.n	80069d2 <HAL_TIM_PWM_Start+0xfe>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b08      	cmp	r3, #8
 800699e:	d104      	bne.n	80069aa <HAL_TIM_PWM_Start+0xd6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a8:	e013      	b.n	80069d2 <HAL_TIM_PWM_Start+0xfe>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b0c      	cmp	r3, #12
 80069ae:	d104      	bne.n	80069ba <HAL_TIM_PWM_Start+0xe6>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069b8:	e00b      	b.n	80069d2 <HAL_TIM_PWM_Start+0xfe>
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d104      	bne.n	80069ca <HAL_TIM_PWM_Start+0xf6>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069c8:	e003      	b.n	80069d2 <HAL_TIM_PWM_Start+0xfe>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2201      	movs	r2, #1
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fcd6 	bl	800738c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a26      	ldr	r2, [pc, #152]	; (8006a80 <HAL_TIM_PWM_Start+0x1ac>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d009      	beq.n	80069fe <HAL_TIM_PWM_Start+0x12a>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a25      	ldr	r2, [pc, #148]	; (8006a84 <HAL_TIM_PWM_Start+0x1b0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d004      	beq.n	80069fe <HAL_TIM_PWM_Start+0x12a>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a23      	ldr	r2, [pc, #140]	; (8006a88 <HAL_TIM_PWM_Start+0x1b4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d101      	bne.n	8006a02 <HAL_TIM_PWM_Start+0x12e>
 80069fe:	2301      	movs	r3, #1
 8006a00:	e000      	b.n	8006a04 <HAL_TIM_PWM_Start+0x130>
 8006a02:	2300      	movs	r3, #0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a18      	ldr	r2, [pc, #96]	; (8006a80 <HAL_TIM_PWM_Start+0x1ac>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d009      	beq.n	8006a36 <HAL_TIM_PWM_Start+0x162>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2a:	d004      	beq.n	8006a36 <HAL_TIM_PWM_Start+0x162>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a14      	ldr	r2, [pc, #80]	; (8006a84 <HAL_TIM_PWM_Start+0x1b0>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d115      	bne.n	8006a62 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <HAL_TIM_PWM_Start+0x1b8>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b06      	cmp	r3, #6
 8006a46:	d015      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a0>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4e:	d011      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0201 	orr.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a60:	e008      	b.n	8006a74 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f042 0201 	orr.w	r2, r2, #1
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	e000      	b.n	8006a76 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40014000 	.word	0x40014000
 8006a88:	40014400 	.word	0x40014400
 8006a8c:	00010007 	.word	0x00010007

08006a90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f000 fc72 	bl	800738c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a39      	ldr	r2, [pc, #228]	; (8006b94 <HAL_TIM_PWM_Stop+0x104>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_TIM_PWM_Stop+0x36>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a38      	ldr	r2, [pc, #224]	; (8006b98 <HAL_TIM_PWM_Stop+0x108>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_TIM_PWM_Stop+0x36>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a36      	ldr	r2, [pc, #216]	; (8006b9c <HAL_TIM_PWM_Stop+0x10c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d101      	bne.n	8006aca <HAL_TIM_PWM_Stop+0x3a>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e000      	b.n	8006acc <HAL_TIM_PWM_Stop+0x3c>
 8006aca:	2300      	movs	r3, #0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d017      	beq.n	8006b00 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6a1a      	ldr	r2, [r3, #32]
 8006ad6:	f241 1311 	movw	r3, #4369	; 0x1111
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10f      	bne.n	8006b00 <HAL_TIM_PWM_Stop+0x70>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	f240 4344 	movw	r3, #1092	; 0x444
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d107      	bne.n	8006b00 <HAL_TIM_PWM_Stop+0x70>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006afe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6a1a      	ldr	r2, [r3, #32]
 8006b06:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10f      	bne.n	8006b30 <HAL_TIM_PWM_Stop+0xa0>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6a1a      	ldr	r2, [r3, #32]
 8006b16:	f240 4344 	movw	r3, #1092	; 0x444
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d107      	bne.n	8006b30 <HAL_TIM_PWM_Stop+0xa0>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0201 	bic.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d104      	bne.n	8006b40 <HAL_TIM_PWM_Stop+0xb0>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b3e:	e023      	b.n	8006b88 <HAL_TIM_PWM_Stop+0xf8>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d104      	bne.n	8006b50 <HAL_TIM_PWM_Stop+0xc0>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b4e:	e01b      	b.n	8006b88 <HAL_TIM_PWM_Stop+0xf8>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d104      	bne.n	8006b60 <HAL_TIM_PWM_Stop+0xd0>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b5e:	e013      	b.n	8006b88 <HAL_TIM_PWM_Stop+0xf8>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b0c      	cmp	r3, #12
 8006b64:	d104      	bne.n	8006b70 <HAL_TIM_PWM_Stop+0xe0>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b6e:	e00b      	b.n	8006b88 <HAL_TIM_PWM_Stop+0xf8>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	2b10      	cmp	r3, #16
 8006b74:	d104      	bne.n	8006b80 <HAL_TIM_PWM_Stop+0xf0>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b7e:	e003      	b.n	8006b88 <HAL_TIM_PWM_Stop+0xf8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40012c00 	.word	0x40012c00
 8006b98:	40014000 	.word	0x40014000
 8006b9c:	40014400 	.word	0x40014400

08006ba0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e0ff      	b.n	8006dbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b14      	cmp	r3, #20
 8006bca:	f200 80f0 	bhi.w	8006dae <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006c29 	.word	0x08006c29
 8006bd8:	08006daf 	.word	0x08006daf
 8006bdc:	08006daf 	.word	0x08006daf
 8006be0:	08006daf 	.word	0x08006daf
 8006be4:	08006c69 	.word	0x08006c69
 8006be8:	08006daf 	.word	0x08006daf
 8006bec:	08006daf 	.word	0x08006daf
 8006bf0:	08006daf 	.word	0x08006daf
 8006bf4:	08006cab 	.word	0x08006cab
 8006bf8:	08006daf 	.word	0x08006daf
 8006bfc:	08006daf 	.word	0x08006daf
 8006c00:	08006daf 	.word	0x08006daf
 8006c04:	08006ceb 	.word	0x08006ceb
 8006c08:	08006daf 	.word	0x08006daf
 8006c0c:	08006daf 	.word	0x08006daf
 8006c10:	08006daf 	.word	0x08006daf
 8006c14:	08006d2d 	.word	0x08006d2d
 8006c18:	08006daf 	.word	0x08006daf
 8006c1c:	08006daf 	.word	0x08006daf
 8006c20:	08006daf 	.word	0x08006daf
 8006c24:	08006d6d 	.word	0x08006d6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 f92e 	bl	8006e90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0208 	orr.w	r2, r2, #8
 8006c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0204 	bic.w	r2, r2, #4
 8006c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6999      	ldr	r1, [r3, #24]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	619a      	str	r2, [r3, #24]
      break;
 8006c66:	e0a5      	b.n	8006db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 f98a 	bl	8006f88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6999      	ldr	r1, [r3, #24]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	021a      	lsls	r2, r3, #8
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	619a      	str	r2, [r3, #24]
      break;
 8006ca8:	e084      	b.n	8006db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 f9e3 	bl	800707c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69da      	ldr	r2, [r3, #28]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0208 	orr.w	r2, r2, #8
 8006cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0204 	bic.w	r2, r2, #4
 8006cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69d9      	ldr	r1, [r3, #28]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	691a      	ldr	r2, [r3, #16]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	61da      	str	r2, [r3, #28]
      break;
 8006ce8:	e064      	b.n	8006db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fa3b 	bl	800716c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69da      	ldr	r2, [r3, #28]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69d9      	ldr	r1, [r3, #28]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	021a      	lsls	r2, r3, #8
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	61da      	str	r2, [r3, #28]
      break;
 8006d2a:	e043      	b.n	8006db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68b9      	ldr	r1, [r7, #8]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 fa78 	bl	8007228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0208 	orr.w	r2, r2, #8
 8006d46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0204 	bic.w	r2, r2, #4
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d6a:	e023      	b.n	8006db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 fab0 	bl	80072d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	021a      	lsls	r2, r3, #8
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006dac:	e002      	b.n	8006db4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	75fb      	strb	r3, [r7, #23]
      break;
 8006db2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop

08006dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a2a      	ldr	r2, [pc, #168]	; (8006e84 <TIM_Base_SetConfig+0xbc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d003      	beq.n	8006de8 <TIM_Base_SetConfig+0x20>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de6:	d108      	bne.n	8006dfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a21      	ldr	r2, [pc, #132]	; (8006e84 <TIM_Base_SetConfig+0xbc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d00b      	beq.n	8006e1a <TIM_Base_SetConfig+0x52>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e08:	d007      	beq.n	8006e1a <TIM_Base_SetConfig+0x52>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a1e      	ldr	r2, [pc, #120]	; (8006e88 <TIM_Base_SetConfig+0xc0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d003      	beq.n	8006e1a <TIM_Base_SetConfig+0x52>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a1d      	ldr	r2, [pc, #116]	; (8006e8c <TIM_Base_SetConfig+0xc4>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d108      	bne.n	8006e2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	695b      	ldr	r3, [r3, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a0c      	ldr	r2, [pc, #48]	; (8006e84 <TIM_Base_SetConfig+0xbc>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <TIM_Base_SetConfig+0xa0>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a0b      	ldr	r2, [pc, #44]	; (8006e88 <TIM_Base_SetConfig+0xc0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d003      	beq.n	8006e68 <TIM_Base_SetConfig+0xa0>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <TIM_Base_SetConfig+0xc4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d103      	bne.n	8006e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	691a      	ldr	r2, [r3, #16]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	615a      	str	r2, [r3, #20]
}
 8006e76:	bf00      	nop
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40014400 	.word	0x40014400

08006e90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f023 0201 	bic.w	r2, r3, #1
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f023 0303 	bic.w	r3, r3, #3
 8006eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f023 0302 	bic.w	r3, r3, #2
 8006edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a24      	ldr	r2, [pc, #144]	; (8006f7c <TIM_OC1_SetConfig+0xec>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d007      	beq.n	8006f00 <TIM_OC1_SetConfig+0x70>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <TIM_OC1_SetConfig+0xf0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d003      	beq.n	8006f00 <TIM_OC1_SetConfig+0x70>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a22      	ldr	r2, [pc, #136]	; (8006f84 <TIM_OC1_SetConfig+0xf4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d10c      	bne.n	8006f1a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f023 0308 	bic.w	r3, r3, #8
 8006f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f023 0304 	bic.w	r3, r3, #4
 8006f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a17      	ldr	r2, [pc, #92]	; (8006f7c <TIM_OC1_SetConfig+0xec>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d007      	beq.n	8006f32 <TIM_OC1_SetConfig+0xa2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a16      	ldr	r2, [pc, #88]	; (8006f80 <TIM_OC1_SetConfig+0xf0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d003      	beq.n	8006f32 <TIM_OC1_SetConfig+0xa2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a15      	ldr	r2, [pc, #84]	; (8006f84 <TIM_OC1_SetConfig+0xf4>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d111      	bne.n	8006f56 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	621a      	str	r2, [r3, #32]
}
 8006f70:	bf00      	nop
 8006f72:	371c      	adds	r7, #28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	40012c00 	.word	0x40012c00
 8006f80:	40014000 	.word	0x40014000
 8006f84:	40014400 	.word	0x40014400

08006f88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a1b      	ldr	r3, [r3, #32]
 8006f96:	f023 0210 	bic.w	r2, r3, #16
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	021b      	lsls	r3, r3, #8
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f023 0320 	bic.w	r3, r3, #32
 8006fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a22      	ldr	r2, [pc, #136]	; (8007070 <TIM_OC2_SetConfig+0xe8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d10d      	bne.n	8007008 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	011b      	lsls	r3, r3, #4
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007006:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a19      	ldr	r2, [pc, #100]	; (8007070 <TIM_OC2_SetConfig+0xe8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_OC2_SetConfig+0x98>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a18      	ldr	r2, [pc, #96]	; (8007074 <TIM_OC2_SetConfig+0xec>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_OC2_SetConfig+0x98>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a17      	ldr	r2, [pc, #92]	; (8007078 <TIM_OC2_SetConfig+0xf0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d113      	bne.n	8007048 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800702e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40012c00 	.word	0x40012c00
 8007074:	40014000 	.word	0x40014000
 8007078:	40014400 	.word	0x40014400

0800707c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0303 	bic.w	r3, r3, #3
 80070b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	021b      	lsls	r3, r3, #8
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a21      	ldr	r2, [pc, #132]	; (8007160 <TIM_OC3_SetConfig+0xe4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d10d      	bne.n	80070fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a18      	ldr	r2, [pc, #96]	; (8007160 <TIM_OC3_SetConfig+0xe4>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d007      	beq.n	8007112 <TIM_OC3_SetConfig+0x96>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a17      	ldr	r2, [pc, #92]	; (8007164 <TIM_OC3_SetConfig+0xe8>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d003      	beq.n	8007112 <TIM_OC3_SetConfig+0x96>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a16      	ldr	r2, [pc, #88]	; (8007168 <TIM_OC3_SetConfig+0xec>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d113      	bne.n	800713a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007118:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007120:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4313      	orrs	r3, r2
 800712c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	621a      	str	r2, [r3, #32]
}
 8007154:	bf00      	nop
 8007156:	371c      	adds	r7, #28
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	40012c00 	.word	0x40012c00
 8007164:	40014000 	.word	0x40014000
 8007168:	40014400 	.word	0x40014400

0800716c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800719a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	031b      	lsls	r3, r3, #12
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a14      	ldr	r2, [pc, #80]	; (800721c <TIM_OC4_SetConfig+0xb0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d007      	beq.n	80071e0 <TIM_OC4_SetConfig+0x74>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a13      	ldr	r2, [pc, #76]	; (8007220 <TIM_OC4_SetConfig+0xb4>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d003      	beq.n	80071e0 <TIM_OC4_SetConfig+0x74>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a12      	ldr	r2, [pc, #72]	; (8007224 <TIM_OC4_SetConfig+0xb8>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d109      	bne.n	80071f4 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	019b      	lsls	r3, r3, #6
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	621a      	str	r2, [r3, #32]
}
 800720e:	bf00      	nop
 8007210:	371c      	adds	r7, #28
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	40012c00 	.word	0x40012c00
 8007220:	40014000 	.word	0x40014000
 8007224:	40014400 	.word	0x40014400

08007228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800726c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	041b      	lsls	r3, r3, #16
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a13      	ldr	r2, [pc, #76]	; (80072cc <TIM_OC5_SetConfig+0xa4>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d007      	beq.n	8007292 <TIM_OC5_SetConfig+0x6a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a12      	ldr	r2, [pc, #72]	; (80072d0 <TIM_OC5_SetConfig+0xa8>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d003      	beq.n	8007292 <TIM_OC5_SetConfig+0x6a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a11      	ldr	r2, [pc, #68]	; (80072d4 <TIM_OC5_SetConfig+0xac>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d109      	bne.n	80072a6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007298:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	021b      	lsls	r3, r3, #8
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	621a      	str	r2, [r3, #32]
}
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40014000 	.word	0x40014000
 80072d4:	40014400 	.word	0x40014400

080072d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800731e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	051b      	lsls	r3, r3, #20
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a14      	ldr	r2, [pc, #80]	; (8007380 <TIM_OC6_SetConfig+0xa8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d007      	beq.n	8007344 <TIM_OC6_SetConfig+0x6c>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a13      	ldr	r2, [pc, #76]	; (8007384 <TIM_OC6_SetConfig+0xac>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_OC6_SetConfig+0x6c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a12      	ldr	r2, [pc, #72]	; (8007388 <TIM_OC6_SetConfig+0xb0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d109      	bne.n	8007358 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800734a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	029b      	lsls	r3, r3, #10
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	bf00      	nop
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40014000 	.word	0x40014000
 8007388:	40014400 	.word	0x40014400

0800738c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 031f 	and.w	r3, r3, #31
 800739e:	2201      	movs	r2, #1
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1a      	ldr	r2, [r3, #32]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	43db      	mvns	r3, r3
 80073ae:	401a      	ands	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a1a      	ldr	r2, [r3, #32]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	fa01 f303 	lsl.w	r3, r1, r3
 80073c4:	431a      	orrs	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	621a      	str	r2, [r3, #32]
}
 80073ca:	bf00      	nop
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d101      	bne.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073ec:	2302      	movs	r3, #2
 80073ee:	e04f      	b.n	8007490 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2202      	movs	r2, #2
 80073fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a21      	ldr	r2, [pc, #132]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d108      	bne.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007420:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a14      	ldr	r2, [pc, #80]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007458:	d004      	beq.n	8007464 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a10      	ldr	r2, [pc, #64]	; (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d10c      	bne.n	800747e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800746a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	4313      	orrs	r3, r2
 8007474:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40014000 	.word	0x40014000

080074a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d101      	bne.n	80074c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074bc:	2302      	movs	r3, #2
 80074be:	e060      	b.n	8007582 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	4313      	orrs	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	041b      	lsls	r3, r3, #16
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a14      	ldr	r2, [pc, #80]	; (8007590 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d115      	bne.n	8007570 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	051b      	lsls	r3, r3, #20
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	4313      	orrs	r3, r2
 8007560:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	4313      	orrs	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3714      	adds	r7, #20
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40012c00 	.word	0x40012c00

08007594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e040      	b.n	8007628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fa ff6a 	bl	8002490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2224      	movs	r2, #36	; 0x24
 80075c0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0201 	bic.w	r2, r2, #1
 80075d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fc64 	bl	8007ea0 <UART_SetConfig>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d101      	bne.n	80075e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e022      	b.n	8007628 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fe8c 	bl	8008308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800760e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 ff13 	bl	800844c <UART_CheckIdleState>
 8007626:	4603      	mov	r3, r0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e048      	b.n	80076d4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007646:	2b00      	cmp	r3, #0
 8007648:	d106      	bne.n	8007658 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7fa ff1c 	bl	8002490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2224      	movs	r2, #36	; 0x24
 800765c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fc16 	bl	8007ea0 <UART_SetConfig>
 8007674:	4603      	mov	r3, r0
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e02a      	b.n	80076d4 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fe3e 	bl	8008308 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800769a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80076aa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f042 0208 	orr.w	r2, r2, #8
 80076ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0201 	orr.w	r2, r2, #1
 80076ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 febd 	bl	800844c <UART_CheckIdleState>
 80076d2:	4603      	mov	r3, r0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b08a      	sub	sp, #40	; 0x28
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	4613      	mov	r3, r2
 80076ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f0:	2b20      	cmp	r3, #32
 80076f2:	f040 8082 	bne.w	80077fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <HAL_UART_Transmit+0x26>
 80076fc:	88fb      	ldrh	r3, [r7, #6]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e07a      	b.n	80077fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_UART_Transmit+0x38>
 8007710:	2302      	movs	r3, #2
 8007712:	e073      	b.n	80077fc <HAL_UART_Transmit+0x120>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2221      	movs	r2, #33	; 0x21
 8007728:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800772a:	f7fb f85b 	bl	80027e4 <HAL_GetTick>
 800772e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	88fa      	ldrh	r2, [r7, #6]
 8007734:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007748:	d108      	bne.n	800775c <HAL_UART_Transmit+0x80>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d104      	bne.n	800775c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	61bb      	str	r3, [r7, #24]
 800775a:	e003      	b.n	8007764 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007760:	2300      	movs	r3, #0
 8007762:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800776c:	e02d      	b.n	80077ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2200      	movs	r2, #0
 8007776:	2180      	movs	r1, #128	; 0x80
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 feb0 	bl	80084de <UART_WaitOnFlagUntilTimeout>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e039      	b.n	80077fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10b      	bne.n	80077a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	881a      	ldrh	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800779a:	b292      	uxth	r2, r2
 800779c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	3302      	adds	r3, #2
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	e008      	b.n	80077b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	781a      	ldrb	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	b292      	uxth	r2, r2
 80077b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	3301      	adds	r3, #1
 80077b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1cb      	bne.n	800776e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2200      	movs	r2, #0
 80077de:	2140      	movs	r1, #64	; 0x40
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 fe7c 	bl	80084de <UART_WaitOnFlagUntilTimeout>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e005      	b.n	80077fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e000      	b.n	80077fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80077fa:	2302      	movs	r3, #2
  }
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3720      	adds	r7, #32
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08a      	sub	sp, #40	; 0x28
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007816:	2b20      	cmp	r3, #32
 8007818:	d142      	bne.n	80078a0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <HAL_UART_Receive_IT+0x22>
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e03b      	b.n	80078a2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_UART_Receive_IT+0x34>
 8007834:	2302      	movs	r3, #2
 8007836:	e034      	b.n	80078a2 <HAL_UART_Receive_IT+0x9e>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a18      	ldr	r2, [pc, #96]	; (80078ac <HAL_UART_Receive_IT+0xa8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d01f      	beq.n	8007890 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d018      	beq.n	8007890 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	613b      	str	r3, [r7, #16]
   return(result);
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	623b      	str	r3, [r7, #32]
 800787e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	69f9      	ldr	r1, [r7, #28]
 8007882:	6a3a      	ldr	r2, [r7, #32]
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	61bb      	str	r3, [r7, #24]
   return(result);
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e6      	bne.n	800785e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007890:	88fb      	ldrh	r3, [r7, #6]
 8007892:	461a      	mov	r2, r3
 8007894:	68b9      	ldr	r1, [r7, #8]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fee6 	bl	8008668 <UART_Start_Receive_IT>
 800789c:	4603      	mov	r3, r0
 800789e:	e000      	b.n	80078a2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80078a0:	2302      	movs	r3, #2
  }
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3728      	adds	r7, #40	; 0x28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	40008000 	.word	0x40008000

080078b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b0ba      	sub	sp, #232	; 0xe8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078da:	f640 030f 	movw	r3, #2063	; 0x80f
 80078de:	4013      	ands	r3, r2
 80078e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d115      	bne.n	8007918 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f0:	f003 0320 	and.w	r3, r3, #32
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00f      	beq.n	8007918 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fc:	f003 0320 	and.w	r3, r3, #32
 8007900:	2b00      	cmp	r3, #0
 8007902:	d009      	beq.n	8007918 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007908:	2b00      	cmp	r3, #0
 800790a:	f000 82a6 	beq.w	8007e5a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
      }
      return;
 8007916:	e2a0      	b.n	8007e5a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 8117 	beq.w	8007b50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d106      	bne.n	800793c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800792e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007932:	4b85      	ldr	r3, [pc, #532]	; (8007b48 <HAL_UART_IRQHandler+0x298>)
 8007934:	4013      	ands	r3, r2
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 810a 	beq.w	8007b50 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800793c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d011      	beq.n	800796c <HAL_UART_IRQHandler+0xbc>
 8007948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2201      	movs	r2, #1
 800795a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007962:	f043 0201 	orr.w	r2, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800796c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d011      	beq.n	800799c <HAL_UART_IRQHandler+0xec>
 8007978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800797c:	f003 0301 	and.w	r3, r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00b      	beq.n	800799c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2202      	movs	r2, #2
 800798a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007992:	f043 0204 	orr.w	r2, r3, #4
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800799c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a0:	f003 0304 	and.w	r3, r3, #4
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d011      	beq.n	80079cc <HAL_UART_IRQHandler+0x11c>
 80079a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00b      	beq.n	80079cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2204      	movs	r2, #4
 80079ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c2:	f043 0202 	orr.w	r2, r3, #2
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d0:	f003 0308 	and.w	r3, r3, #8
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d017      	beq.n	8007a08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00b      	beq.n	8007a08 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2208      	movs	r2, #8
 80079f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079fe:	f043 0208 	orr.w	r2, r3, #8
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d012      	beq.n	8007a3a <HAL_UART_IRQHandler+0x18a>
 8007a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00c      	beq.n	8007a3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a30:	f043 0220 	orr.w	r2, r3, #32
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 820c 	beq.w	8007e5e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a4a:	f003 0320 	and.w	r3, r3, #32
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00d      	beq.n	8007a6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a82:	2b40      	cmp	r3, #64	; 0x40
 8007a84:	d005      	beq.n	8007a92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d04f      	beq.n	8007b32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 feb2 	bl	80087fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	d141      	bne.n	8007b2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3308      	adds	r3, #8
 8007ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ad2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ada:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1d9      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d013      	beq.n	8007b22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	4a13      	ldr	r2, [pc, #76]	; (8007b4c <HAL_UART_IRQHandler+0x29c>)
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7fc f9d9 	bl	8003ebe <HAL_DMA_Abort_IT>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d017      	beq.n	8007b42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b20:	e00f      	b.n	8007b42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7f9 fba4 	bl	8001270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b28:	e00b      	b.n	8007b42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7f9 fba0 	bl	8001270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b30:	e007      	b.n	8007b42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7f9 fb9c 	bl	8001270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007b40:	e18d      	b.n	8007e5e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b42:	bf00      	nop
    return;
 8007b44:	e18b      	b.n	8007e5e <HAL_UART_IRQHandler+0x5ae>
 8007b46:	bf00      	nop
 8007b48:	04000120 	.word	0x04000120
 8007b4c:	080088c3 	.word	0x080088c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	f040 8146 	bne.w	8007de6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f000 813f 	beq.w	8007de6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8138 	beq.w	8007de6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2210      	movs	r2, #16
 8007b7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b40      	cmp	r3, #64	; 0x40
 8007b8a:	f040 80b4 	bne.w	8007cf6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 815f 	beq.w	8007e62 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	f080 8157 	bcs.w	8007e62 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0320 	and.w	r3, r3, #32
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f040 8085 	bne.w	8007cda <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bdc:	e853 3f00 	ldrex	r3, [r3]
 8007be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007bfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1da      	bne.n	8007bd0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3308      	adds	r3, #8
 8007c20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c2c:	f023 0301 	bic.w	r3, r3, #1
 8007c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3308      	adds	r3, #8
 8007c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e1      	bne.n	8007c1a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c82:	e841 2300 	strex	r3, r2, [r1]
 8007c86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1e3      	bne.n	8007c56 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2220      	movs	r2, #32
 8007c92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ca2:	e853 3f00 	ldrex	r3, [r3]
 8007ca6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007caa:	f023 0310 	bic.w	r3, r3, #16
 8007cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cc4:	e841 2300 	strex	r3, r2, [r1]
 8007cc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d1e4      	bne.n	8007c9a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fc f8b4 	bl	8003e42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f8ca 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cf4:	e0b5      	b.n	8007e62 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 80a7 	beq.w	8007e66 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007d18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 80a2 	beq.w	8007e66 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d44:	647b      	str	r3, [r7, #68]	; 0x44
 8007d46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e4      	bne.n	8007d22 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	623b      	str	r3, [r7, #32]
   return(result);
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	f023 0301 	bic.w	r3, r3, #1
 8007d6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3308      	adds	r3, #8
 8007d78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d7c:	633a      	str	r2, [r7, #48]	; 0x30
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e3      	bne.n	8007d58 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0310 	bic.w	r3, r3, #16
 8007db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007dc4:	61fb      	str	r3, [r7, #28]
 8007dc6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	69b9      	ldr	r1, [r7, #24]
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e4      	bne.n	8007da2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f852 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007de4:	e03f      	b.n	8007e66 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00e      	beq.n	8007e10 <HAL_UART_IRQHandler+0x560>
 8007df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d008      	beq.n	8007e10 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fefa 	bl	8008c02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e0e:	e02d      	b.n	8007e6c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00e      	beq.n	8007e3a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d008      	beq.n	8007e3a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01c      	beq.n	8007e6a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
    }
    return;
 8007e38:	e017      	b.n	8007e6a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d012      	beq.n	8007e6c <HAL_UART_IRQHandler+0x5bc>
 8007e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00c      	beq.n	8007e6c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fd4b 	bl	80088ee <UART_EndTransmit_IT>
    return;
 8007e58:	e008      	b.n	8007e6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007e5a:	bf00      	nop
 8007e5c:	e006      	b.n	8007e6c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007e5e:	bf00      	nop
 8007e60:	e004      	b.n	8007e6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007e62:	bf00      	nop
 8007e64:	e002      	b.n	8007e6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007e66:	bf00      	nop
 8007e68:	e000      	b.n	8007e6c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007e6a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007e6c:	37e8      	adds	r7, #232	; 0xe8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop

08007e74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e7c:	bf00      	nop
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea0:	b5b0      	push	{r4, r5, r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	4baa      	ldr	r3, [pc, #680]	; (8008174 <UART_SetConfig+0x2d4>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	6812      	ldr	r2, [r2, #0]
 8007ed2:	69f9      	ldr	r1, [r7, #28]
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a9f      	ldr	r2, [pc, #636]	; (8008178 <UART_SetConfig+0x2d8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d004      	beq.n	8007f08 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69fa      	ldr	r2, [r7, #28]
 8007f18:	430a      	orrs	r2, r1
 8007f1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a96      	ldr	r2, [pc, #600]	; (800817c <UART_SetConfig+0x2dc>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d121      	bne.n	8007f6a <UART_SetConfig+0xca>
 8007f26:	4b96      	ldr	r3, [pc, #600]	; (8008180 <UART_SetConfig+0x2e0>)
 8007f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2c:	f003 0303 	and.w	r3, r3, #3
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d817      	bhi.n	8007f64 <UART_SetConfig+0xc4>
 8007f34:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <UART_SetConfig+0x9c>)
 8007f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3a:	bf00      	nop
 8007f3c:	08007f4d 	.word	0x08007f4d
 8007f40:	08007f59 	.word	0x08007f59
 8007f44:	08007f53 	.word	0x08007f53
 8007f48:	08007f5f 	.word	0x08007f5f
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	76fb      	strb	r3, [r7, #27]
 8007f50:	e096      	b.n	8008080 <UART_SetConfig+0x1e0>
 8007f52:	2302      	movs	r3, #2
 8007f54:	76fb      	strb	r3, [r7, #27]
 8007f56:	e093      	b.n	8008080 <UART_SetConfig+0x1e0>
 8007f58:	2304      	movs	r3, #4
 8007f5a:	76fb      	strb	r3, [r7, #27]
 8007f5c:	e090      	b.n	8008080 <UART_SetConfig+0x1e0>
 8007f5e:	2308      	movs	r3, #8
 8007f60:	76fb      	strb	r3, [r7, #27]
 8007f62:	e08d      	b.n	8008080 <UART_SetConfig+0x1e0>
 8007f64:	2310      	movs	r3, #16
 8007f66:	76fb      	strb	r3, [r7, #27]
 8007f68:	e08a      	b.n	8008080 <UART_SetConfig+0x1e0>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a85      	ldr	r2, [pc, #532]	; (8008184 <UART_SetConfig+0x2e4>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d132      	bne.n	8007fda <UART_SetConfig+0x13a>
 8007f74:	4b82      	ldr	r3, [pc, #520]	; (8008180 <UART_SetConfig+0x2e0>)
 8007f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7a:	f003 030c 	and.w	r3, r3, #12
 8007f7e:	2b0c      	cmp	r3, #12
 8007f80:	d828      	bhi.n	8007fd4 <UART_SetConfig+0x134>
 8007f82:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0xe8>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08007fbd 	.word	0x08007fbd
 8007f8c:	08007fd5 	.word	0x08007fd5
 8007f90:	08007fd5 	.word	0x08007fd5
 8007f94:	08007fd5 	.word	0x08007fd5
 8007f98:	08007fc9 	.word	0x08007fc9
 8007f9c:	08007fd5 	.word	0x08007fd5
 8007fa0:	08007fd5 	.word	0x08007fd5
 8007fa4:	08007fd5 	.word	0x08007fd5
 8007fa8:	08007fc3 	.word	0x08007fc3
 8007fac:	08007fd5 	.word	0x08007fd5
 8007fb0:	08007fd5 	.word	0x08007fd5
 8007fb4:	08007fd5 	.word	0x08007fd5
 8007fb8:	08007fcf 	.word	0x08007fcf
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	76fb      	strb	r3, [r7, #27]
 8007fc0:	e05e      	b.n	8008080 <UART_SetConfig+0x1e0>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	76fb      	strb	r3, [r7, #27]
 8007fc6:	e05b      	b.n	8008080 <UART_SetConfig+0x1e0>
 8007fc8:	2304      	movs	r3, #4
 8007fca:	76fb      	strb	r3, [r7, #27]
 8007fcc:	e058      	b.n	8008080 <UART_SetConfig+0x1e0>
 8007fce:	2308      	movs	r3, #8
 8007fd0:	76fb      	strb	r3, [r7, #27]
 8007fd2:	e055      	b.n	8008080 <UART_SetConfig+0x1e0>
 8007fd4:	2310      	movs	r3, #16
 8007fd6:	76fb      	strb	r3, [r7, #27]
 8007fd8:	e052      	b.n	8008080 <UART_SetConfig+0x1e0>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a6a      	ldr	r2, [pc, #424]	; (8008188 <UART_SetConfig+0x2e8>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d120      	bne.n	8008026 <UART_SetConfig+0x186>
 8007fe4:	4b66      	ldr	r3, [pc, #408]	; (8008180 <UART_SetConfig+0x2e0>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fee:	2b30      	cmp	r3, #48	; 0x30
 8007ff0:	d013      	beq.n	800801a <UART_SetConfig+0x17a>
 8007ff2:	2b30      	cmp	r3, #48	; 0x30
 8007ff4:	d814      	bhi.n	8008020 <UART_SetConfig+0x180>
 8007ff6:	2b20      	cmp	r3, #32
 8007ff8:	d009      	beq.n	800800e <UART_SetConfig+0x16e>
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	d810      	bhi.n	8008020 <UART_SetConfig+0x180>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <UART_SetConfig+0x168>
 8008002:	2b10      	cmp	r3, #16
 8008004:	d006      	beq.n	8008014 <UART_SetConfig+0x174>
 8008006:	e00b      	b.n	8008020 <UART_SetConfig+0x180>
 8008008:	2300      	movs	r3, #0
 800800a:	76fb      	strb	r3, [r7, #27]
 800800c:	e038      	b.n	8008080 <UART_SetConfig+0x1e0>
 800800e:	2302      	movs	r3, #2
 8008010:	76fb      	strb	r3, [r7, #27]
 8008012:	e035      	b.n	8008080 <UART_SetConfig+0x1e0>
 8008014:	2304      	movs	r3, #4
 8008016:	76fb      	strb	r3, [r7, #27]
 8008018:	e032      	b.n	8008080 <UART_SetConfig+0x1e0>
 800801a:	2308      	movs	r3, #8
 800801c:	76fb      	strb	r3, [r7, #27]
 800801e:	e02f      	b.n	8008080 <UART_SetConfig+0x1e0>
 8008020:	2310      	movs	r3, #16
 8008022:	76fb      	strb	r3, [r7, #27]
 8008024:	e02c      	b.n	8008080 <UART_SetConfig+0x1e0>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a53      	ldr	r2, [pc, #332]	; (8008178 <UART_SetConfig+0x2d8>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d125      	bne.n	800807c <UART_SetConfig+0x1dc>
 8008030:	4b53      	ldr	r3, [pc, #332]	; (8008180 <UART_SetConfig+0x2e0>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800803a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800803e:	d017      	beq.n	8008070 <UART_SetConfig+0x1d0>
 8008040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008044:	d817      	bhi.n	8008076 <UART_SetConfig+0x1d6>
 8008046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800804a:	d00b      	beq.n	8008064 <UART_SetConfig+0x1c4>
 800804c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008050:	d811      	bhi.n	8008076 <UART_SetConfig+0x1d6>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <UART_SetConfig+0x1be>
 8008056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800805a:	d006      	beq.n	800806a <UART_SetConfig+0x1ca>
 800805c:	e00b      	b.n	8008076 <UART_SetConfig+0x1d6>
 800805e:	2300      	movs	r3, #0
 8008060:	76fb      	strb	r3, [r7, #27]
 8008062:	e00d      	b.n	8008080 <UART_SetConfig+0x1e0>
 8008064:	2302      	movs	r3, #2
 8008066:	76fb      	strb	r3, [r7, #27]
 8008068:	e00a      	b.n	8008080 <UART_SetConfig+0x1e0>
 800806a:	2304      	movs	r3, #4
 800806c:	76fb      	strb	r3, [r7, #27]
 800806e:	e007      	b.n	8008080 <UART_SetConfig+0x1e0>
 8008070:	2308      	movs	r3, #8
 8008072:	76fb      	strb	r3, [r7, #27]
 8008074:	e004      	b.n	8008080 <UART_SetConfig+0x1e0>
 8008076:	2310      	movs	r3, #16
 8008078:	76fb      	strb	r3, [r7, #27]
 800807a:	e001      	b.n	8008080 <UART_SetConfig+0x1e0>
 800807c:	2310      	movs	r3, #16
 800807e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a3c      	ldr	r2, [pc, #240]	; (8008178 <UART_SetConfig+0x2d8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	f040 8082 	bne.w	8008190 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800808c:	7efb      	ldrb	r3, [r7, #27]
 800808e:	2b08      	cmp	r3, #8
 8008090:	d823      	bhi.n	80080da <UART_SetConfig+0x23a>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <UART_SetConfig+0x1f8>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080bd 	.word	0x080080bd
 800809c:	080080db 	.word	0x080080db
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080080db 	.word	0x080080db
 80080a8:	080080cb 	.word	0x080080cb
 80080ac:	080080db 	.word	0x080080db
 80080b0:	080080db 	.word	0x080080db
 80080b4:	080080db 	.word	0x080080db
 80080b8:	080080d3 	.word	0x080080d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080bc:	f7fd fd8c 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 80080c0:	6178      	str	r0, [r7, #20]
        break;
 80080c2:	e00f      	b.n	80080e4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080c4:	4b31      	ldr	r3, [pc, #196]	; (800818c <UART_SetConfig+0x2ec>)
 80080c6:	617b      	str	r3, [r7, #20]
        break;
 80080c8:	e00c      	b.n	80080e4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080ca:	f7fd fced 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 80080ce:	6178      	str	r0, [r7, #20]
        break;
 80080d0:	e008      	b.n	80080e4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080d6:	617b      	str	r3, [r7, #20]
        break;
 80080d8:	e004      	b.n	80080e4 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 80080da:	2300      	movs	r3, #0
 80080dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	76bb      	strb	r3, [r7, #26]
        break;
 80080e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 8100 	beq.w	80082ec <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	4613      	mov	r3, r2
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	4413      	add	r3, r2
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d305      	bcc.n	8008108 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	429a      	cmp	r2, r3
 8008106:	d902      	bls.n	800810e <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	76bb      	strb	r3, [r7, #26]
 800810c:	e0ee      	b.n	80082ec <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	4618      	mov	r0, r3
 8008112:	f04f 0100 	mov.w	r1, #0
 8008116:	f04f 0200 	mov.w	r2, #0
 800811a:	f04f 0300 	mov.w	r3, #0
 800811e:	020b      	lsls	r3, r1, #8
 8008120:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008124:	0202      	lsls	r2, r0, #8
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	6849      	ldr	r1, [r1, #4]
 800812a:	0849      	lsrs	r1, r1, #1
 800812c:	4608      	mov	r0, r1
 800812e:	f04f 0100 	mov.w	r1, #0
 8008132:	1814      	adds	r4, r2, r0
 8008134:	eb43 0501 	adc.w	r5, r3, r1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	461a      	mov	r2, r3
 800813e:	f04f 0300 	mov.w	r3, #0
 8008142:	4620      	mov	r0, r4
 8008144:	4629      	mov	r1, r5
 8008146:	f7f8 f849 	bl	80001dc <__aeabi_uldivmod>
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	4613      	mov	r3, r2
 8008150:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008158:	d308      	bcc.n	800816c <UART_SetConfig+0x2cc>
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008160:	d204      	bcs.n	800816c <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	e0bf      	b.n	80082ec <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	76bb      	strb	r3, [r7, #26]
 8008170:	e0bc      	b.n	80082ec <UART_SetConfig+0x44c>
 8008172:	bf00      	nop
 8008174:	efff69f3 	.word	0xefff69f3
 8008178:	40008000 	.word	0x40008000
 800817c:	40013800 	.word	0x40013800
 8008180:	40021000 	.word	0x40021000
 8008184:	40004400 	.word	0x40004400
 8008188:	40004800 	.word	0x40004800
 800818c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008198:	d15b      	bne.n	8008252 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 800819a:	7efb      	ldrb	r3, [r7, #27]
 800819c:	2b08      	cmp	r3, #8
 800819e:	d828      	bhi.n	80081f2 <UART_SetConfig+0x352>
 80081a0:	a201      	add	r2, pc, #4	; (adr r2, 80081a8 <UART_SetConfig+0x308>)
 80081a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a6:	bf00      	nop
 80081a8:	080081cd 	.word	0x080081cd
 80081ac:	080081d5 	.word	0x080081d5
 80081b0:	080081dd 	.word	0x080081dd
 80081b4:	080081f3 	.word	0x080081f3
 80081b8:	080081e3 	.word	0x080081e3
 80081bc:	080081f3 	.word	0x080081f3
 80081c0:	080081f3 	.word	0x080081f3
 80081c4:	080081f3 	.word	0x080081f3
 80081c8:	080081eb 	.word	0x080081eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081cc:	f7fd fd04 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 80081d0:	6178      	str	r0, [r7, #20]
        break;
 80081d2:	e013      	b.n	80081fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081d4:	f7fd fd16 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 80081d8:	6178      	str	r0, [r7, #20]
        break;
 80081da:	e00f      	b.n	80081fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081dc:	4b49      	ldr	r3, [pc, #292]	; (8008304 <UART_SetConfig+0x464>)
 80081de:	617b      	str	r3, [r7, #20]
        break;
 80081e0:	e00c      	b.n	80081fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081e2:	f7fd fc61 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 80081e6:	6178      	str	r0, [r7, #20]
        break;
 80081e8:	e008      	b.n	80081fc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ee:	617b      	str	r3, [r7, #20]
        break;
 80081f0:	e004      	b.n	80081fc <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	76bb      	strb	r3, [r7, #26]
        break;
 80081fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d074      	beq.n	80082ec <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	005a      	lsls	r2, r3, #1
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	085b      	lsrs	r3, r3, #1
 800820c:	441a      	add	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	fbb2 f3f3 	udiv	r3, r2, r3
 8008216:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	2b0f      	cmp	r3, #15
 800821c:	d916      	bls.n	800824c <UART_SetConfig+0x3ac>
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008224:	d212      	bcs.n	800824c <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	b29b      	uxth	r3, r3
 800822a:	f023 030f 	bic.w	r3, r3, #15
 800822e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	085b      	lsrs	r3, r3, #1
 8008234:	b29b      	uxth	r3, r3
 8008236:	f003 0307 	and.w	r3, r3, #7
 800823a:	b29a      	uxth	r2, r3
 800823c:	89fb      	ldrh	r3, [r7, #14]
 800823e:	4313      	orrs	r3, r2
 8008240:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	89fa      	ldrh	r2, [r7, #14]
 8008248:	60da      	str	r2, [r3, #12]
 800824a:	e04f      	b.n	80082ec <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	76bb      	strb	r3, [r7, #26]
 8008250:	e04c      	b.n	80082ec <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008252:	7efb      	ldrb	r3, [r7, #27]
 8008254:	2b08      	cmp	r3, #8
 8008256:	d828      	bhi.n	80082aa <UART_SetConfig+0x40a>
 8008258:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <UART_SetConfig+0x3c0>)
 800825a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825e:	bf00      	nop
 8008260:	08008285 	.word	0x08008285
 8008264:	0800828d 	.word	0x0800828d
 8008268:	08008295 	.word	0x08008295
 800826c:	080082ab 	.word	0x080082ab
 8008270:	0800829b 	.word	0x0800829b
 8008274:	080082ab 	.word	0x080082ab
 8008278:	080082ab 	.word	0x080082ab
 800827c:	080082ab 	.word	0x080082ab
 8008280:	080082a3 	.word	0x080082a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008284:	f7fd fca8 	bl	8005bd8 <HAL_RCC_GetPCLK1Freq>
 8008288:	6178      	str	r0, [r7, #20]
        break;
 800828a:	e013      	b.n	80082b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800828c:	f7fd fcba 	bl	8005c04 <HAL_RCC_GetPCLK2Freq>
 8008290:	6178      	str	r0, [r7, #20]
        break;
 8008292:	e00f      	b.n	80082b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008294:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <UART_SetConfig+0x464>)
 8008296:	617b      	str	r3, [r7, #20]
        break;
 8008298:	e00c      	b.n	80082b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800829a:	f7fd fc05 	bl	8005aa8 <HAL_RCC_GetSysClockFreq>
 800829e:	6178      	str	r0, [r7, #20]
        break;
 80082a0:	e008      	b.n	80082b4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082a6:	617b      	str	r3, [r7, #20]
        break;
 80082a8:	e004      	b.n	80082b4 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	76bb      	strb	r3, [r7, #26]
        break;
 80082b2:	bf00      	nop
    }

    if (pclk != 0U)
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d018      	beq.n	80082ec <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	085a      	lsrs	r2, r3, #1
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	441a      	add	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082cc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	2b0f      	cmp	r3, #15
 80082d2:	d909      	bls.n	80082e8 <UART_SetConfig+0x448>
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082da:	d205      	bcs.n	80082e8 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	b29a      	uxth	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	e001      	b.n	80082ec <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80082f8:	7ebb      	ldrb	r3, [r7, #26]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3720      	adds	r7, #32
 80082fe:	46bd      	mov	sp, r7
 8008300:	bdb0      	pop	{r4, r5, r7, pc}
 8008302:	bf00      	nop
 8008304:	00f42400 	.word	0x00f42400

08008308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01a      	beq.n	800841e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008406:	d10a      	bne.n	800841e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	605a      	str	r2, [r3, #4]
  }
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af02      	add	r7, sp, #8
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800845c:	f7fa f9c2 	bl	80027e4 <HAL_GetTick>
 8008460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b08      	cmp	r3, #8
 800846e:	d10e      	bne.n	800848e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f82d 	bl	80084de <UART_WaitOnFlagUntilTimeout>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e023      	b.n	80084d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b04      	cmp	r3, #4
 800849a:	d10e      	bne.n	80084ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800849c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f817 	bl	80084de <UART_WaitOnFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e00d      	b.n	80084d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b09c      	sub	sp, #112	; 0x70
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	603b      	str	r3, [r7, #0]
 80084ea:	4613      	mov	r3, r2
 80084ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ee:	e0a5      	b.n	800863c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f6:	f000 80a1 	beq.w	800863c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084fa:	f7fa f973 	bl	80027e4 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008506:	429a      	cmp	r2, r3
 8008508:	d302      	bcc.n	8008510 <UART_WaitOnFlagUntilTimeout+0x32>
 800850a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800850c:	2b00      	cmp	r3, #0
 800850e:	d13e      	bne.n	800858e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800851e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008520:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008524:	667b      	str	r3, [r7, #100]	; 0x64
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800852e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008530:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008534:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800853c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e6      	bne.n	8008510 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	663b      	str	r3, [r7, #96]	; 0x60
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3308      	adds	r3, #8
 8008560:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008562:	64ba      	str	r2, [r7, #72]	; 0x48
 8008564:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e5      	bne.n	8008542 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2220      	movs	r2, #32
 800857a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e067      	b.n	800865e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d04f      	beq.n	800863c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085aa:	d147      	bne.n	800863c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085b4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
 80085d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e6      	bne.n	80085b6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3308      	adds	r3, #8
 80085ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	613b      	str	r3, [r7, #16]
   return(result);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f023 0301 	bic.w	r3, r3, #1
 80085fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008608:	623a      	str	r2, [r7, #32]
 800860a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	69f9      	ldr	r1, [r7, #28]
 800860e:	6a3a      	ldr	r2, [r7, #32]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	61bb      	str	r3, [r7, #24]
   return(result);
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e5      	bne.n	80085e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2220      	movs	r2, #32
 8008620:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2220      	movs	r2, #32
 8008626:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2220      	movs	r2, #32
 800862c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e010      	b.n	800865e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69da      	ldr	r2, [r3, #28]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	4013      	ands	r3, r2
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	429a      	cmp	r2, r3
 800864a:	bf0c      	ite	eq
 800864c:	2301      	moveq	r3, #1
 800864e:	2300      	movne	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	429a      	cmp	r2, r3
 8008658:	f43f af4a 	beq.w	80084f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3770      	adds	r7, #112	; 0x70
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008668:	b480      	push	{r7}
 800866a:	b097      	sub	sp, #92	; 0x5c
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	88fa      	ldrh	r2, [r7, #6]
 8008680:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	88fa      	ldrh	r2, [r7, #6]
 8008688:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869a:	d10e      	bne.n	80086ba <UART_Start_Receive_IT+0x52>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d105      	bne.n	80086b0 <UART_Start_Receive_IT+0x48>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80086aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086ae:	e02d      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	22ff      	movs	r2, #255	; 0xff
 80086b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086b8:	e028      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10d      	bne.n	80086de <UART_Start_Receive_IT+0x76>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d104      	bne.n	80086d4 <UART_Start_Receive_IT+0x6c>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	22ff      	movs	r2, #255	; 0xff
 80086ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086d2:	e01b      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	227f      	movs	r2, #127	; 0x7f
 80086d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086dc:	e016      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086e6:	d10d      	bne.n	8008704 <UART_Start_Receive_IT+0x9c>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d104      	bne.n	80086fa <UART_Start_Receive_IT+0x92>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	227f      	movs	r2, #127	; 0x7f
 80086f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086f8:	e008      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	223f      	movs	r2, #63	; 0x3f
 80086fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008702:	e003      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2222      	movs	r2, #34	; 0x22
 8008718:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3308      	adds	r3, #8
 8008720:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	f043 0301 	orr.w	r3, r3, #1
 8008730:	657b      	str	r3, [r7, #84]	; 0x54
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3308      	adds	r3, #8
 8008738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800873a:	64ba      	str	r2, [r7, #72]	; 0x48
 800873c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e5      	bne.n	800871a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008756:	d107      	bne.n	8008768 <UART_Start_Receive_IT+0x100>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a24      	ldr	r2, [pc, #144]	; (80087f4 <UART_Start_Receive_IT+0x18c>)
 8008764:	665a      	str	r2, [r3, #100]	; 0x64
 8008766:	e002      	b.n	800876e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4a23      	ldr	r2, [pc, #140]	; (80087f8 <UART_Start_Receive_IT+0x190>)
 800876c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d019      	beq.n	80087b2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008786:	e853 3f00 	ldrex	r3, [r3]
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879c:	637b      	str	r3, [r7, #52]	; 0x34
 800879e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087a4:	e841 2300 	strex	r3, r2, [r1]
 80087a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1e6      	bne.n	800877e <UART_Start_Receive_IT+0x116>
 80087b0:	e018      	b.n	80087e4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	613b      	str	r3, [r7, #16]
   return(result);
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f043 0320 	orr.w	r3, r3, #32
 80087c6:	653b      	str	r3, [r7, #80]	; 0x50
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d0:	623b      	str	r3, [r7, #32]
 80087d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	69f9      	ldr	r1, [r7, #28]
 80087d6:	6a3a      	ldr	r2, [r7, #32]
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e6      	bne.n	80087b2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	375c      	adds	r7, #92	; 0x5c
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	08008aa3 	.word	0x08008aa3
 80087f8:	08008943 	.word	0x08008943

080087fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b095      	sub	sp, #84	; 0x54
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008818:	64fb      	str	r3, [r7, #76]	; 0x4c
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008822:	643b      	str	r3, [r7, #64]	; 0x40
 8008824:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008828:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e6      	bne.n	8008804 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3308      	adds	r3, #8
 800883c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	61fb      	str	r3, [r7, #28]
   return(result);
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	f023 0301 	bic.w	r3, r3, #1
 800884c:	64bb      	str	r3, [r7, #72]	; 0x48
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3308      	adds	r3, #8
 8008854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008856:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008858:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800885c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e5      	bne.n	8008836 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886e:	2b01      	cmp	r3, #1
 8008870:	d118      	bne.n	80088a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f023 0310 	bic.w	r3, r3, #16
 8008886:	647b      	str	r3, [r7, #68]	; 0x44
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	461a      	mov	r2, r3
 800888e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008890:	61bb      	str	r3, [r7, #24]
 8008892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008894:	6979      	ldr	r1, [r7, #20]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	e841 2300 	strex	r3, r2, [r1]
 800889c:	613b      	str	r3, [r7, #16]
   return(result);
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d1e6      	bne.n	8008872 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2220      	movs	r2, #32
 80088a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80088b6:	bf00      	nop
 80088b8:	3754      	adds	r7, #84	; 0x54
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b084      	sub	sp, #16
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f7f8 fcc5 	bl	8001270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088e6:	bf00      	nop
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b088      	sub	sp, #32
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	60bb      	str	r3, [r7, #8]
   return(result);
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800890a:	61fb      	str	r3, [r7, #28]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	461a      	mov	r2, r3
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	61bb      	str	r3, [r7, #24]
 8008916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	6979      	ldr	r1, [r7, #20]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	613b      	str	r3, [r7, #16]
   return(result);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e6      	bne.n	80088f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fa9d 	bl	8007e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800893a:	bf00      	nop
 800893c:	3720      	adds	r7, #32
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b096      	sub	sp, #88	; 0x58
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008950:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008958:	2b22      	cmp	r3, #34	; 0x22
 800895a:	f040 8094 	bne.w	8008a86 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008964:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008968:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800896c:	b2d9      	uxtb	r1, r3
 800896e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008972:	b2da      	uxtb	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008978:	400a      	ands	r2, r1
 800897a:	b2d2      	uxtb	r2, r2
 800897c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	1c5a      	adds	r2, r3, #1
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800898e:	b29b      	uxth	r3, r3
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d179      	bne.n	8008a9a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ae:	e853 3f00 	ldrex	r3, [r3]
 80089b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089ba:	653b      	str	r3, [r7, #80]	; 0x50
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	461a      	mov	r2, r3
 80089c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089c4:	647b      	str	r3, [r7, #68]	; 0x44
 80089c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089cc:	e841 2300 	strex	r3, r2, [r1]
 80089d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1e6      	bne.n	80089a6 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3308      	adds	r3, #8
 80089de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e2:	e853 3f00 	ldrex	r3, [r3]
 80089e6:	623b      	str	r3, [r7, #32]
   return(result);
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	f023 0301 	bic.w	r3, r3, #1
 80089ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	3308      	adds	r3, #8
 80089f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089f8:	633a      	str	r2, [r7, #48]	; 0x30
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a00:	e841 2300 	strex	r3, r2, [r1]
 8008a04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e5      	bne.n	80089d8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d12e      	bne.n	8008a7e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f023 0310 	bic.w	r3, r3, #16
 8008a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a44:	61fb      	str	r3, [r7, #28]
 8008a46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	69b9      	ldr	r1, [r7, #24]
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	617b      	str	r3, [r7, #20]
   return(result);
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e6      	bne.n	8008a26 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f003 0310 	and.w	r3, r3, #16
 8008a62:	2b10      	cmp	r3, #16
 8008a64:	d103      	bne.n	8008a6e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2210      	movs	r2, #16
 8008a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7ff fa06 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a7c:	e00d      	b.n	8008a9a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7f8 fb7c 	bl	800117c <HAL_UART_RxCpltCallback>
}
 8008a84:	e009      	b.n	8008a9a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	8b1b      	ldrh	r3, [r3, #24]
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0208 	orr.w	r2, r2, #8
 8008a96:	b292      	uxth	r2, r2
 8008a98:	831a      	strh	r2, [r3, #24]
}
 8008a9a:	bf00      	nop
 8008a9c:	3758      	adds	r7, #88	; 0x58
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b096      	sub	sp, #88	; 0x58
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ab0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ab8:	2b22      	cmp	r3, #34	; 0x22
 8008aba:	f040 8094 	bne.w	8008be6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ac4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008acc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ace:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008ad2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008adc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ae2:	1c9a      	adds	r2, r3, #2
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	3b01      	subs	r3, #1
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d179      	bne.n	8008bfa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b24:	643b      	str	r3, [r7, #64]	; 0x40
 8008b26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b2c:	e841 2300 	strex	r3, r2, [r1]
 8008b30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e6      	bne.n	8008b06 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3308      	adds	r3, #8
 8008b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f023 0301 	bic.w	r3, r3, #1
 8008b4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e5      	bne.n	8008b38 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2220      	movs	r2, #32
 8008b70:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d12e      	bne.n	8008bde <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	f023 0310 	bic.w	r3, r3, #16
 8008b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	6979      	ldr	r1, [r7, #20]
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e6      	bne.n	8008b86 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	f003 0310 	and.w	r3, r3, #16
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d103      	bne.n	8008bce <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2210      	movs	r2, #16
 8008bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7ff f956 	bl	8007e88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008bdc:	e00d      	b.n	8008bfa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7f8 facc 	bl	800117c <HAL_UART_RxCpltCallback>
}
 8008be4:	e009      	b.n	8008bfa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	8b1b      	ldrh	r3, [r3, #24]
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0208 	orr.w	r2, r2, #8
 8008bf6:	b292      	uxth	r2, r2
 8008bf8:	831a      	strh	r2, [r3, #24]
}
 8008bfa:	bf00      	nop
 8008bfc:	3758      	adds	r7, #88	; 0x58
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
	...

08008c18 <__libc_init_array>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	4d0d      	ldr	r5, [pc, #52]	; (8008c50 <__libc_init_array+0x38>)
 8008c1c:	4c0d      	ldr	r4, [pc, #52]	; (8008c54 <__libc_init_array+0x3c>)
 8008c1e:	1b64      	subs	r4, r4, r5
 8008c20:	10a4      	asrs	r4, r4, #2
 8008c22:	2600      	movs	r6, #0
 8008c24:	42a6      	cmp	r6, r4
 8008c26:	d109      	bne.n	8008c3c <__libc_init_array+0x24>
 8008c28:	4d0b      	ldr	r5, [pc, #44]	; (8008c58 <__libc_init_array+0x40>)
 8008c2a:	4c0c      	ldr	r4, [pc, #48]	; (8008c5c <__libc_init_array+0x44>)
 8008c2c:	f000 f820 	bl	8008c70 <_init>
 8008c30:	1b64      	subs	r4, r4, r5
 8008c32:	10a4      	asrs	r4, r4, #2
 8008c34:	2600      	movs	r6, #0
 8008c36:	42a6      	cmp	r6, r4
 8008c38:	d105      	bne.n	8008c46 <__libc_init_array+0x2e>
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c40:	4798      	blx	r3
 8008c42:	3601      	adds	r6, #1
 8008c44:	e7ee      	b.n	8008c24 <__libc_init_array+0xc>
 8008c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c4a:	4798      	blx	r3
 8008c4c:	3601      	adds	r6, #1
 8008c4e:	e7f2      	b.n	8008c36 <__libc_init_array+0x1e>
 8008c50:	08008cf0 	.word	0x08008cf0
 8008c54:	08008cf0 	.word	0x08008cf0
 8008c58:	08008cf0 	.word	0x08008cf0
 8008c5c:	08008cf4 	.word	0x08008cf4

08008c60 <memset>:
 8008c60:	4402      	add	r2, r0
 8008c62:	4603      	mov	r3, r0
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d100      	bne.n	8008c6a <memset+0xa>
 8008c68:	4770      	bx	lr
 8008c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c6e:	e7f9      	b.n	8008c64 <memset+0x4>

08008c70 <_init>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr

08008c7c <_fini>:
 8008c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7e:	bf00      	nop
 8008c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c82:	bc08      	pop	{r3}
 8008c84:	469e      	mov	lr, r3
 8008c86:	4770      	bx	lr
